{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\nimport \"../token/ERC721/IERC721Receiver.sol\";\nimport \"../token/ERC1155/IERC1155Receiver.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl, IERC721Receiver, IERC1155Receiver {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    bytes32 public constant CANCELLER_ROLE = keccak256(\"CANCELLER_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\n     */\n    event CallSalt(bytes32 indexed id, bytes32 salt);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with the following parameters:\n     *\n     * - `minDelay`: initial minimum delay for operations\n     * - `proposers`: accounts to be granted proposer and canceller roles\n     * - `executors`: accounts to be granted executor role\n     * - `admin`: optional account to be granted admin role; disable with zero address\n     *\n     * IMPORTANT: The optional admin can aid with initial configuration of roles after deployment\n     * without being subject to delay, but this role should be subsequently renounced in favor of\n     * administration through timelocked proposals. Previous versions of this contract would assign\n     * this admin to the deployer automatically and should be renounced as well.\n     */\n    constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address admin) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(CANCELLER_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // optional admin\n        if (admin != address(0)) {\n            _setupRole(TIMELOCK_ADMIN_ROLE, admin);\n        }\n\n        // register proposers and cancellers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n            _setupRole(CANCELLER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, AccessControl) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\".\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\".\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32) {\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\n        }\n        if (salt != bytes32(0)) {\n            emit CallSalt(id, salt);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to become valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'canceller' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(CANCELLER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata payload,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        _execute(target, value, payload);\n        emit CallExecuted(id, 0, target, value, payload);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n    // thus any modifications to the operation during reentrancy should be caught.\n    // slither-disable-next-line reentrancy-eth\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata payloads,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == payloads.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\n\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            address target = targets[i];\n            uint256 value = values[i];\n            bytes calldata payload = payloads[i];\n            _execute(target, value, payload);\n            emit CallExecuted(id, i, target, value, payload);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     */\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155Received}.\n     */\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@pythnetwork/pyth-sdk-solidity/IPyth.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./PythStructs.sol\";\nimport \"./IPythEvents.sol\";\n\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\n/// @author Pyth Data Association\ninterface IPyth is IPythEvents {\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\n\n    /// @notice Returns the price and confidence interval.\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\n    /// @dev Reverts if the EMA price is not available.\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPrice(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price of a price feed without any sanity checks.\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\n    /// However, if the price is not recent this function returns the latest available price.\n    ///\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\n    /// the returned price is recent or useful for any particular application.\n    ///\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\n    /// sufficiently recent for their application. If you are considering using this function, it may be\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceUnsafe(\n        bytes32 id\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\n    /// of the current time.\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\n    /// recently.\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\n    function getEmaPriceNoOlderThan(\n        bytes32 id,\n        uint age\n    ) external view returns (PythStructs.Price memory price);\n\n    /// @notice Update price feeds with given update messages.\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    /// Prices will be updated if they are more recent than the current stored prices.\n    /// The call will succeed even if the update is not the most recent.\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\n\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\n    ///\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\n    function updatePriceFeedsIfNecessary(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64[] calldata publishTimes\n    ) external payable;\n\n    /// @notice Returns the required fee to update an array of price updates.\n    /// @param updateData Array of price update data.\n    /// @return feeAmount The required fee in Wei.\n    function getUpdateFee(\n        bytes[] calldata updateData\n    ) external view returns (uint feeAmount);\n\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\n    /// within `minPublishTime` and `maxPublishTime`.\n    ///\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\n    /// otherwise, please consider using `updatePriceFeeds`. This method does not store the price updates on-chain.\n    ///\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\n    /// `getUpdateFee` with the length of the `updateData` array.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdates(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\n    /// this method will return the first update.\n    ///\n    ///\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\n    /// @param updateData Array of price update data.\n    /// @param priceIds Array of price ids.\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\n    function parsePriceFeedUpdatesUnique(\n        bytes[] calldata updateData,\n        bytes32[] calldata priceIds,\n        uint64 minPublishTime,\n        uint64 maxPublishTime\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\n}\n"
    },
    "@pythnetwork/pyth-sdk-solidity/IPythEvents.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/// @title IPythEvents contains the events that Pyth contract emits.\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\ninterface IPythEvents {\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\n    /// @param id The Pyth Price Feed ID.\n    /// @param publishTime Publish time of the given price update.\n    /// @param price Price of the given price update.\n    /// @param conf Confidence interval of the given price update.\n    event PriceFeedUpdate(\n        bytes32 indexed id,\n        uint64 publishTime,\n        int64 price,\n        uint64 conf\n    );\n\n    /// @dev Emitted when a batch price update is processed successfully.\n    /// @param chainId ID of the source chain that the batch price update comes from.\n    /// @param sequenceNumber Sequence number of the batch price update.\n    event BatchPriceFeedUpdate(uint16 chainId, uint64 sequenceNumber);\n}\n"
    },
    "@pythnetwork/pyth-sdk-solidity/PythStructs.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\ncontract PythStructs {\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\n    //\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\n    // Both the price and confidence are stored in a fixed-point numeric representation,\n    // `x * (10^expo)`, where `expo` is the exponent.\n    //\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\n    // to how this price safely.\n    struct Price {\n        // Price\n        int64 price;\n        // Confidence interval around the price\n        uint64 conf;\n        // Price exponent\n        int32 expo;\n        // Unix timestamp describing when the price was published\n        uint publishTime;\n    }\n\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\n    struct PriceFeed {\n        // The price ID.\n        bytes32 id;\n        // Latest available price\n        Price price;\n        // Latest available exponentially-weighted moving average price\n        Price emaPrice;\n    }\n}\n"
    },
    "contracts/CErc20.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CToken.sol\";\n\ninterface CompLike {\n    function delegate(address delegatee) external;\n}\n\n/**\n * @title CErc20 Contract\n * @notice CTokens which wrap an EIP-20 underlying\n */\ncontract CErc20 is CToken, CErc20Interface {\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     */\n    function initialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public {\n        // CToken initialize does the bulk of the work\n        super.initialize(\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set underlying and sanity check it\n        underlying = underlying_;\n        EIP20Interface(underlying).totalSupply();\n    }\n\n    /*** User Interface ***/\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function mint(uint mintAmount) external override returns (uint) {\n        // if (mintAmount < 1 ether) {\n        //     revert(\"mintAmount is too small\");\n        // }\n\n        require(mintAmount != 0, \"mintAmount is zero\");\n        mintInternal(mintAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint redeemTokens) external override returns (uint) {\n        require(redeemTokens != 0, \"redeemTokens is zero\");\n        redeemInternal(redeemTokens);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(\n        uint redeemAmount\n    ) external override returns (uint) {\n        require(redeemAmount != 0, \"redeemAmount is zero\");\n        redeemUnderlyingInternal(redeemAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrow(uint borrowAmount) external override returns (uint) {\n        require(borrowAmount != 0, \"borrowAmount is too small\");\n        borrowInternal(borrowAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrow(uint repayAmount) external override returns (uint) {\n        require(repayAmount != 0, \"repayAmount is too small\");\n        repayBorrowInternal(repayAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrowBehalf(\n        address borrower,\n        uint repayAmount\n    ) external override returns (uint) {\n        require(repayAmount != 0, \"repayAmount is too small\");\n        repayBorrowBehalfInternal(borrower, repayAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function liquidateBorrow(\n        address borrower,\n        uint repayAmount,\n        CTokenInterface cTokenCollateral\n    ) external override returns (uint) {\n        liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n     * @param token The address of the ERC-20 token to sweep\n     */\n    function sweepToken(EIP20NonStandardInterface token) external override {\n        require(\n            msg.sender == admin,\n            \"CErc20::sweepToken: only admin can sweep tokens\"\n        );\n        require(\n            address(token) != underlying,\n            \"CErc20::sweepToken: can not sweep underlying token\"\n        );\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(admin, balance);\n    }\n\n    /**\n     * @notice The sender adds to reserves.\n     * @param addAmount The amount fo underlying token to add as reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReserves(uint addAmount) external override returns (uint) {\n        return _addReservesInternal(addAmount);\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying tokens owned by this contract\n     */\n    function getCashPrior() internal view virtual override returns (uint) {\n        EIP20Interface token = EIP20Interface(underlying);\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n     *      This will revert due to insufficient balance or insufficient allowance.\n     *      This function returns the actual amount received,\n     *      which may be less than `amount` if there is a fee attached to the transfer.\n     *\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n     */\n    function doTransferIn(\n        address from,\n        uint amount\n    ) internal virtual override returns (uint) {\n        // Read from storage once\n        address underlying_ = underlying;\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(\n            underlying_\n        );\n        uint balanceBefore = EIP20Interface(underlying_).balanceOf(\n            address(this)\n        );\n        token.transferFrom(from, address(this), amount);\n\n        bool success;\n        assembly {\n            switch returndatasize()\n            case 0 {\n                // This is a non-standard ERC-20\n                success := not(0) // set success to true\n            }\n            case 32 {\n                // This is a compliant ERC-20\n                returndatacopy(0, 0, 32)\n                success := mload(0) // Set `success = returndata` of override external call\n            }\n            default {\n                // This is an excessively non-compliant ERC-20, revert.\n                revert(0, 0)\n            }\n        }\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\n\n        // Calculate the amount that was *actually* transferred\n        uint balanceAfter = EIP20Interface(underlying_).balanceOf(\n            address(this)\n        );\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\n    }\n\n    /**\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n     *      it is >= amount, this should not revert in normal conditions.\n     *\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n     */\n    function doTransferOut(\n        address payable to,\n        uint amount\n    ) internal virtual override {\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n        token.transfer(to, amount);\n\n        bool success;\n        assembly {\n            switch returndatasize()\n            case 0 {\n                // This is a non-standard ERC-20\n                success := not(0) // set success to true\n            }\n            case 32 {\n                // This is a compliant ERC-20\n                returndatacopy(0, 0, 32)\n                success := mload(0) // Set `success = returndata` of override external call\n            }\n            default {\n                // This is an excessively non-compliant ERC-20, revert.\n                revert(0, 0)\n            }\n        }\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\n    }\n\n    /**\n     * @notice Admin call to delegate the votes of the COMP-like underlying\n     * @param compLikeDelegatee The address to delegate votes to\n     * @dev CTokens whose underlying are not CompLike should revert here\n     */\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\n        require(\n            msg.sender == admin,\n            \"only the admin may set the comp-like delegate\"\n        );\n        CompLike(underlying).delegate(compLikeDelegatee);\n    }\n}\n"
    },
    "contracts/CErc20Immutable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CErc20.sol\";\n\n/**\n * @title  CErc20Immutable Contract\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\n */\ncontract CErc20Immutable is CErc20 {\n    /**\n     * @notice Construct a new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     * @param admin_ Address of the administrator of this token\n     */\n    constructor(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_\n    ) {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        // Initialize the market\n        initialize(\n            underlying_,\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/CErc20Rebase.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CToken.sol\";\n\ninterface CompLike {\n    function delegate(address delegatee) external;\n}\n\n/**\n * @title Shoebill's CErc20Rebase Contract\n * @notice CTokens which wrap an rebase underlying.\n * @dev  There is no interest accur\n * @author Shoebill\n */\ncontract CErc20Rebase is CToken, CErc20Interface {\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     */\n    function initialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public {\n        // CToken initialize does the bulk of the work\n        super.initialize(\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set underlying and sanity check it\n        underlying = underlying_;\n        EIP20Interface(underlying).totalSupply();\n    }\n\n    /*** User Interface ***/\n\n    /**\n     * @notice Accrue interest to reserve for rebase amount, not be borrowable !!\n     */\n\n    uint256 public lastCashStored;\n\n    function accrueInterest() public override returns (uint256) {\n        uint256 rebasedAmount = getCashPrior() - lastCashStored;\n        uint256 reserveNew = (rebasedAmount * reserveFactorMantissa) / 1e18;\n\n        totalReserves = totalReserves + reserveNew;\n\n        return super.accrueInterest();\n    }\n\n    function reduceReserveAll() external nonReentrant returns (uint256) {\n        accrueInterest();\n\n        _reduceReservesFresh(totalReserves);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function mint(uint mintAmount) external override returns (uint) {\n        mintInternal(mintAmount);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint redeemTokens) external override returns (uint) {\n        redeemInternal(redeemTokens);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(\n        uint redeemAmount\n    ) external override returns (uint) {\n        redeemUnderlyingInternal(redeemAmount);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrow(uint borrowAmount) external override returns (uint) {\n        require(false, \"CErc20Rebase::borrow: not be borrowable\");\n        borrowInternal(borrowAmount);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrow(uint repayAmount) external override returns (uint) {\n        require(false, \"CErc20Rebase::borrow: not be borrowable\");\n\n        repayBorrowInternal(repayAmount);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function repayBorrowBehalf(\n        address borrower,\n        uint repayAmount\n    ) external override returns (uint) {\n        require(false, \"CErc20Rebase::borrow: not be borrowable\");\n        repayBorrowBehalfInternal(borrower, repayAmount);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function liquidateBorrow(\n        address borrower,\n        uint repayAmount,\n        CTokenInterface cTokenCollateral\n    ) external override returns (uint) {\n        require(false, \"CErc20Rebase::borrow: not be borrowable\");\n\n        liquidateBorrowInternal(borrower, repayAmount, cTokenCollateral);\n\n        lastCashStored = getCashPrior();\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock)\n     * @param token The address of the ERC-20 token to sweep\n     */\n    function sweepToken(EIP20NonStandardInterface token) external override {\n        require(\n            msg.sender == admin,\n            \"CErc20::sweepToken: only admin can sweep tokens\"\n        );\n        require(\n            address(token) != underlying,\n            \"CErc20::sweepToken: can not sweep underlying token\"\n        );\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(admin, balance);\n    }\n\n    /**\n     * @notice The sender adds to reserves.\n     * @param addAmount The amount fo underlying token to add as reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReserves(uint addAmount) external override returns (uint) {\n        return _addReservesInternal(addAmount);\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying tokens owned by this contract\n     */\n    function getCashPrior() internal view virtual override returns (uint) {\n        EIP20Interface token = EIP20Interface(underlying);\n        return token.balanceOf(address(this));\n    }\n\n    /**\n     * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.\n     *      This will revert due to insufficient balance or insufficient allowance.\n     *      This function returns the actual amount received,\n     *      which may be less than `amount` if there is a fee attached to the transfer.\n     *\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n     */\n    function doTransferIn(\n        address from,\n        uint amount\n    ) internal virtual override returns (uint) {\n        // Read from storage once\n        address underlying_ = underlying;\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(\n            underlying_\n        );\n        uint balanceBefore = EIP20Interface(underlying_).balanceOf(\n            address(this)\n        );\n        token.transferFrom(from, address(this), amount);\n\n        bool success;\n        assembly {\n            switch returndatasize()\n            case 0 {\n                // This is a non-standard ERC-20\n                success := not(0) // set success to true\n            }\n            case 32 {\n                // This is a compliant ERC-20\n                returndatacopy(0, 0, 32)\n                success := mload(0) // Set `success = returndata` of override external call\n            }\n            default {\n                // This is an excessively non-compliant ERC-20, revert.\n                revert(0, 0)\n            }\n        }\n        require(success, \"TOKEN_TRANSFER_IN_FAILED\");\n\n        // Calculate the amount that was *actually* transferred\n        uint balanceAfter = EIP20Interface(underlying_).balanceOf(\n            address(this)\n        );\n        return balanceAfter - balanceBefore; // underflow already checked above, just subtract\n    }\n\n    /**\n     * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory\n     *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to\n     *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified\n     *      it is >= amount, this should not revert in normal conditions.\n     *\n     *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.\n     *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n     */\n    function doTransferOut(\n        address payable to,\n        uint amount\n    ) internal virtual override {\n        EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n        token.transfer(to, amount);\n\n        bool success;\n        assembly {\n            switch returndatasize()\n            case 0 {\n                // This is a non-standard ERC-20\n                success := not(0) // set success to true\n            }\n            case 32 {\n                // This is a compliant ERC-20\n                returndatacopy(0, 0, 32)\n                success := mload(0) // Set `success = returndata` of override external call\n            }\n            default {\n                // This is an excessively non-compliant ERC-20, revert.\n                revert(0, 0)\n            }\n        }\n        require(success, \"TOKEN_TRANSFER_OUT_FAILED\");\n    }\n\n    /**\n     * @notice Admin call to delegate the votes of the COMP-like underlying\n     * @param compLikeDelegatee The address to delegate votes to\n     * @dev CTokens whose underlying are not CompLike should revert here\n     */\n    function _delegateCompLikeTo(address compLikeDelegatee) external {\n        require(\n            msg.sender == admin,\n            \"only the admin may set the comp-like delegate\"\n        );\n        CompLike(underlying).delegate(compLikeDelegatee);\n    }\n}\n"
    },
    "contracts/CErc20RebaseUpgradable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./CErc20Rebase.sol\";\n\n/**\n * @title Shoebill's CErc20RebaseUpgradable Contract\n * @notice CTokens which wrap an EIP-20 underlying and are immutable\n * @author Shoebill\n */\ncontract CErc20RebaseUpgradable is Initializable, CErc20Rebase {\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     */\n    function proxyInitialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_\n    ) public initializer {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        // CErc20 initialize does the bulk of the work\n        super.initialize(\n            underlying_,\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/CErc20Upgradable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./CErc20.sol\";\n\n/**\n * @title  CErc20Upgradable Contract\n * @notice CTokens which wrap an EIP-20 underlying and are upgradeable\n */\ncontract CErc20Upgradable is Initializable, CErc20 {\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     */\n    function proxyInitialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_\n    ) public initializer {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        // CErc20 initialize does the bulk of the work\n        super.initialize(\n            underlying_,\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/CEther.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CToken.sol\";\n\n/**\n * @title  CEther Contract\n * @notice CToken which wraps Native coin (ETH, WEMIX)\n */\ncontract CEther is CToken {\n    function initialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public {\n        // Creator of the contract is admin during initialization\n        super.initialize(\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n    }\n\n    /*** User Interface ***/\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Reverts upon any failure\n     */\n    function mint() external payable {\n        // if (msg.value < 1 ether) {\n        //     revert(\"msg.value is too small\");\n        // }\n        require(msg.value != 0, \"msg.value is zero\");\n        mintInternal(msg.value);\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Reverts upon any failure\n     * @param mintAmount The amount of the underlying asset to supply\n     */\n    function mint(uint mintAmount) external payable returns (uint) {\n        // if (msg.value < 1 ether) {\n        //     revert(\"msg.value is too small\");\n        // }\n        require(mintAmount != 0, \"mintAmount is zero\");\n        require(msg.value == mintAmount, \"msg.value mismatch\");\n\n        mintInternal(msg.value);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeem(uint redeemTokens) external returns (uint) {\n        require(redeemTokens != 0, \"redeemTokens is zero\");\n        redeemInternal(redeemTokens);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to redeem\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\n        require(redeemAmount != 0, \"redeemAmount is zero\");\n        redeemUnderlyingInternal(redeemAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function borrow(uint borrowAmount) external returns (uint) {\n        require(borrowAmount != 0, \"borrowAmount is zero\");\n        borrowInternal(borrowAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @dev Reverts upon any failure\n     */\n    function repayBorrow() external payable {\n        require(msg.value != 0, \"msg.value is zero\");\n        repayBorrowInternal(msg.value);\n    }\n\n    function repayBorrow(uint repayAmount) external payable returns (uint) {\n        require(repayAmount != 0, \"repayAmount is zero\");\n        require(msg.value == repayAmount, \"msg.value mismatch\");\n        repayBorrowInternal(msg.value);\n        return NO_ERROR;\n    }\n\n    function repayBorrowBehalf(\n        address borrower,\n        uint repayAmount\n    ) external payable returns (uint) {\n        require(repayAmount != 0, \"repayAmount is zero\");\n        require(msg.value == repayAmount, \"msg.value mismatch\");\n        repayBorrowBehalfInternal(borrower, msg.value);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @dev Reverts upon any failure\n     * @param borrower the account with the debt being payed off\n     */\n    function repayBorrowBehalf(address borrower) external payable {\n        require(msg.value != 0, \"msg.value is zero\");\n        repayBorrowBehalfInternal(borrower, msg.value);\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @dev Reverts upon any failure\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     */\n    function liquidateBorrow(\n        address borrower,\n        CToken cTokenCollateral\n    ) external payable {\n        liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\n    }\n\n    function liquidateBorrow(\n        address borrower,\n        uint repayAmount,\n        CToken cTokenCollateral\n    ) external payable returns (uint) {\n        require(msg.value == repayAmount, \"msg.value mismatch\");\n        liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice The sender adds to reserves.\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReserves() external payable returns (uint) {\n        return _addReservesInternal(msg.value);\n    }\n\n    /**\n     * @notice Send Ether to CEther to mint\n     */\n    receive() external payable {\n        mintInternal(msg.value);\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of Ether, before this message\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of Ether owned by this contract\n     */\n    function getCashPrior() internal view override returns (uint) {\n        return address(this).balance - msg.value;\n    }\n\n    /**\n     * @notice Perform the actual transfer in, which is a no-op\n     * @param from Address sending the Ether\n     * @param amount Amount of Ether being sent\n     * @return The actual amount of Ether transferred\n     */\n    function doTransferIn(\n        address from,\n        uint amount\n    ) internal override returns (uint) {\n        // Sanity checks\n        require(msg.sender == from, \"sender mismatch\");\n        require(msg.value == amount, \"value mismatch\");\n        return amount;\n    }\n\n    function doTransferOut(\n        address payable to,\n        uint amount\n    ) internal virtual override {\n        /* Send the Ether, with minimal gas and revert on failure */\n\n        // CES-01\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"CEther::doTransferOut: Ether transfer failed\");\n    }\n}\n"
    },
    "contracts/CEtherUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"./CEther.sol\";\n\n/**\n * @title  CEtherUpgradeable Contract\n * @notice CTokens which wrap an ETH(WEMIX)\n */\ncontract CEtherUpgradeable is Initializable, CEther {\n    /**\n     * @notice Initialize the new money market\n     * @param underlying_ The address of the underlying asset\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ ERC-20 name of this token\n     * @param symbol_ ERC-20 symbol of this token\n     * @param decimals_ ERC-20 decimal precision of this token\n     */\n    function proxyInitialize(\n        address underlying_,\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address payable admin_\n    ) public initializer {\n        // Creator of the contract is admin during initialization\n        admin = payable(msg.sender);\n\n        // CErc20 initialize does the bulk of the work\n        super.initialize(\n            underlying_,\n            comptroller_,\n            interestRateModel_,\n            initialExchangeRateMantissa_,\n            name_,\n            symbol_,\n            decimals_\n        );\n\n        // Set the proper admin now that initialization is done\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CToken.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./PriceOracle.sol\";\nimport \"./ComptrollerInterface.sol\";\nimport \"./ComptrollerStorage.sol\";\nimport \"./Unitroller.sol\";\nimport \"./RewardDistributor.sol\";\n\n/**\n * @title Comptroller Contract\n */\ncontract Comptroller is\n    ComptrollerV1Storage,\n    ComptrollerInterface,\n    ComptrollerErrorReporter,\n    ExponentialNoError\n{\n    /// @notice Emitted when an admin supports a market\n    event MarketListed(CToken cToken);\n\n    /// @notice Emitted when an account enters a market\n    event MarketEntered(CToken cToken, address account);\n\n    /// @notice Emitted when an account exits a market\n    event MarketExited(CToken cToken, address account);\n\n    /// @notice Emitted when close factor is changed by admin\n    event NewCloseFactor(\n        uint256 oldCloseFactorMantissa,\n        uint256 newCloseFactorMantissa\n    );\n\n    /// @notice Emitted when a collateral factor is changed by admin\n    event NewCollateralFactor(\n        CToken cToken,\n        uint256 oldCollateralFactorMantissa,\n        uint256 newCollateralFactorMantissa\n    );\n\n    /// @notice Emitted when liquidation incentive is changed by admin\n    event NewLiquidationIncentive(\n        uint256 oldLiquidationIncentiveMantissa,\n        uint256 newLiquidationIncentiveMantissa\n    );\n\n    /// @notice Emitted when price oracle is changed\n    event NewPriceOracle(\n        PriceOracle oldPriceOracle,\n        PriceOracle newPriceOracle\n    );\n\n    /// @notice Emitted when pause guardian is changed\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n\n    /// @notice Emitted when an action is paused globally\n    event ActionPaused(string action, bool pauseState);\n\n    /// @notice Emitted when an action is paused on a market\n    event ActionPaused(CToken cToken, string action, bool pauseState);\n\n    /// @notice Emitted when borrow cap for a cToken is changed\n    event NewBorrowCap(CToken indexed cToken, uint256 newBorrowCap);\n\n    /// @notice Emitted when supply cap for a cToken is changed\n    event NewSupplyCap(CToken indexed cToken, uint256 newSupplyCap);\n\n    /// @notice Emitted when borrow cap guardian is changed\n    event NewBorrowCapGuardian(\n        address oldBorrowCapGuardian,\n        address newBorrowCapGuardian\n    );\n\n    /// @notice Emitted when supply cap guardian is changed\n    event NewSupplyCapGuardian(\n        address oldSupplyCapGuardian,\n        address newSupplyCapGuardian\n    );\n\n    /// @notice Emitted when reward distributor is changed\n    event NewRewardDistributor(\n        address oldRewardDistributor,\n        address newRewardDistributor\n    );\n\n    // closeFactorMantissa must be strictly greater than this value\n    uint256 internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n\n    // closeFactorMantissa must not exceed this value\n    uint256 internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n\n    // No collateralFactorMantissa may exceed this value\n    uint256 internal constant collateralFactorMaxMantissa = 0.95e18; // 0.95\n\n    constructor() {\n        admin = msg.sender;\n    }\n\n    /*** Assets You Are In ***/\n\n    /**\n     * @notice Returns the assets an account has entered\n     * @param account The address of the account to pull assets for\n     * @return A dynamic list with the assets the account has entered\n     */\n    function getAssetsIn(\n        address account\n    ) external view returns (CToken[] memory) {\n        CToken[] memory assetsIn = accountAssets[account];\n\n        return assetsIn;\n    }\n\n    /**\n     * @notice Returns whether the given account is entered in the given asset\n     * @param account The address of the account to check\n     * @param cToken The cToken to check\n     * @return True if the account is in the asset, otherwise false.\n     */\n    function checkMembership(\n        address account,\n        CToken cToken\n    ) external view returns (bool) {\n        return markets[address(cToken)].accountMembership[account];\n    }\n\n    /**\n     * @notice Add assets to be included in account liquidity calculation\n     * @param cTokens The list of addresses of the cToken markets to be enabled\n     * @return Success indicator for whether each corresponding market was entered\n     */\n    function enterMarkets(\n        address[] memory cTokens\n    ) public override returns (uint256[] memory) {\n        uint256 len = cTokens.length;\n\n        uint256[] memory results = new uint256[](len);\n        for (uint256 i = 0; i < len; i++) {\n            CToken cToken = CToken(cTokens[i]);\n\n            results[i] = uint256(addToMarketInternal(cToken, msg.sender));\n        }\n\n        return results;\n    }\n\n    /**\n     * @notice Add the market to the borrower's \"assets in\" for liquidity calculations\n     * @param cToken The market to enter\n     * @param borrower The address of the account to modify\n     * @return Success indicator for whether the market was entered\n     */\n    function addToMarketInternal(\n        CToken cToken,\n        address borrower\n    ) internal returns (Error) {\n        Market storage marketToJoin = markets[address(cToken)];\n\n        if (!marketToJoin.isListed) {\n            // market is not listed, cannot join\n            return Error.MARKET_NOT_LISTED;\n        }\n\n        if (marketToJoin.accountMembership[borrower] == true) {\n            // already joined\n            return Error.NO_ERROR;\n        }\n\n        // survived the gauntlet, add to list\n        // NOTE: we store these somewhat redundantly as a significant optimization\n        //  this avoids having to iterate through the list for the most common use cases\n        //  that is, only when we need to perform liquidity checks\n        //  and not whenever we want to check if an account is in a particular market\n        marketToJoin.accountMembership[borrower] = true;\n        accountAssets[borrower].push(cToken);\n\n        emit MarketEntered(cToken, borrower);\n\n        return Error.NO_ERROR;\n    }\n\n    /**\n     * @notice Removes asset from sender's account liquidity calculation\n     * @dev Sender must not have an outstanding borrow balance in the asset,\n     *  or be providing necessary collateral for an outstanding borrow.\n     * @param cTokenAddress The address of the asset to be removed\n     * @return Whether or not the account successfully exited the market\n     */\n    function exitMarket(\n        address cTokenAddress\n    ) external override returns (uint256) {\n        CToken cToken = CToken(cTokenAddress);\n        /* Get sender tokensHeld and amountOwed underlying from the cToken */\n        (uint256 oErr, uint256 tokensHeld, uint256 amountOwed, ) = cToken\n            .getAccountSnapshot(msg.sender);\n        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\n\n        /* Fail if the sender has a borrow balance */\n        if (amountOwed != 0) {\n            return\n                fail(\n                    Error.NONZERO_BORROW_BALANCE,\n                    FailureInfo.EXIT_MARKET_BALANCE_OWED\n                );\n        }\n\n        /* Fail if the sender is not permitted to redeem all of their tokens */\n        uint256 allowed = redeemAllowedInternal(\n            cTokenAddress,\n            msg.sender,\n            tokensHeld\n        );\n        if (allowed != 0) {\n            return\n                failOpaque(\n                    Error.REJECTION,\n                    FailureInfo.EXIT_MARKET_REJECTION,\n                    allowed\n                );\n        }\n\n        Market storage marketToExit = markets[address(cToken)];\n\n        /* Return true if the sender is not already ‘in’ the market */\n        if (!marketToExit.accountMembership[msg.sender]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Set cToken account membership to false */\n        delete marketToExit.accountMembership[msg.sender];\n\n        /* Delete cToken from the account’s list of assets */\n        // load into memory for faster iteration\n        CToken[] memory userAssetList = accountAssets[msg.sender];\n        uint256 len = userAssetList.length;\n        uint256 assetIndex = len;\n        for (uint256 i = 0; i < len; i++) {\n            if (userAssetList[i] == cToken) {\n                assetIndex = i;\n                break;\n            }\n        }\n\n        // We *must* have found the asset in the list or our redundant data structure is broken\n        assert(assetIndex < len);\n\n        // copy last item in list to location of item to be removed, reduce length by 1\n        CToken[] storage storedList = accountAssets[msg.sender];\n        storedList[assetIndex] = storedList[storedList.length - 1];\n        storedList.pop();\n\n        emit MarketExited(cToken, msg.sender);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /*** Policy Hooks ***/\n\n    /**\n     * @notice Checks if the account should be allowed to mint tokens in the given market\n     * @param cToken The market to verify the mint against\n     * @param minter The account which would get the minted tokens\n     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint256 mintAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!mintGuardianPaused[cToken], \"mint is paused\");\n\n        // Shh - currently unused\n        minter;\n        mintAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // @shoebill: - mint -> enterMarket\n        Error err = addToMarketInternal(CToken(msg.sender), minter);\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, minter);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates mint and reverts on rejection. May emit logs.\n     * @param cToken Asset being minted\n     * @param minter The address minting the tokens\n     * @param actualMintAmount The amount of the underlying asset being minted\n     * @param mintTokens The number of tokens being minted\n     */\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint256 actualMintAmount,\n        uint256 mintTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        minter;\n        actualMintAmount;\n        mintTokens;\n\n        uint256 supplyCap = supplyCaps[cToken];\n        // Supply cap of 0 corresponds to unlimited borrowing\n        if (supplyCap != 0) {\n            uint256 totalSupply = CToken(cToken).totalSupply();\n            Exp memory exchangeRate = Exp({\n                mantissa: CToken(cToken).exchangeRateStored()\n            });\n            uint256 totalAmount = mul_ScalarTruncate(exchangeRate, totalSupply);\n            require(totalAmount <= supplyCap, \"market supply cap reached\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to redeem tokens in the given market\n     * @param cToken The market to verify the redeem against\n     * @param redeemer The account which would redeem the tokens\n     * @param redeemTokens The number of cTokens to exchange for the underlying asset in the market\n     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) external override returns (uint256) {\n        uint256 allowed = redeemAllowedInternal(cToken, redeemer, redeemTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, redeemer);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function redeemAllowedInternal(\n        address cToken,\n        address redeemer,\n        uint256 redeemTokens\n    ) internal view returns (uint256) {\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n        if (!markets[cToken].accountMembership[redeemer]) {\n            return uint256(Error.NO_ERROR);\n        }\n\n        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n                redeemer,\n                CToken(cToken),\n                redeemTokens,\n                0\n            );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates redeem and reverts on rejection. May emit logs.\n     * @param cToken Asset being redeemed\n     * @param redeemer The address redeeming the tokens\n     * @param redeemAmount The amount of the underlying asset being redeemed\n     * @param redeemTokens The number of tokens being redeemed\n     */\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint256 redeemAmount,\n        uint256 redeemTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        redeemer;\n\n        // Require tokens is zero or amount is also zero\n        if (redeemTokens == 0 && redeemAmount > 0) {\n            revert(\"redeemTokens zero\");\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n     * @param cToken The market to verify the borrow against\n     * @param borrower The account which would borrow the asset\n     * @param borrowAmount The amount of underlying the account would borrow\n     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!borrowGuardianPaused[cToken], \"borrow is paused\");\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (!markets[cToken].accountMembership[borrower]) {\n            // only cTokens may call borrowAllowed if borrower not in market\n            require(msg.sender == cToken, \"sender must be cToken\");\n\n            // attempt to add borrower to the market\n            Error err = addToMarketInternal(CToken(msg.sender), borrower);\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            // it should be impossible to break the important invariant\n            assert(markets[cToken].accountMembership[borrower]);\n        }\n\n        if (oracle.getUnderlyingPrice(CToken(cToken)) == 0) {\n            return uint256(Error.PRICE_ERROR);\n        }\n\n        uint256 borrowCap = borrowCaps[cToken];\n        // Borrow cap of 0 corresponds to unlimited borrowing\n        if (borrowCap != 0) {\n            uint256 totalBorrows = CToken(cToken).totalBorrows();\n            uint256 nextTotalBorrows = add_(totalBorrows, borrowAmount);\n            require(nextTotalBorrows < borrowCap, \"market borrow cap reached\");\n        }\n\n        (\n            Error err,\n            ,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n                borrower,\n                CToken(cToken),\n                0,\n                borrowAmount\n            );\n        if (err != Error.NO_ERROR) {\n            return uint256(err);\n        }\n        if (shortfall > 0) {\n            return uint256(Error.INSUFFICIENT_LIQUIDITY);\n        }\n\n        // Keep the flywheel moving\n        updateCompBorrowIndex(cToken);\n        distributeBorrowerComp(cToken, borrower);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates borrow and reverts on rejection. May emit logs.\n     * @param cToken Asset whose underlying is being borrowed\n     * @param borrower The address borrowing the underlying\n     * @param borrowAmount The amount of the underlying asset requested to borrow\n     */\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint256 borrowAmount\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        borrower;\n        borrowAmount;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            oracle = oracle;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to repay a borrow in the given market\n     * @param cToken The market to verify the repay against\n     * @param payer The account which would repay the asset\n     * @param borrower The account which would borrowed the asset\n     * @param repayAmount The amount of the underlying asset the account would repay\n     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) external override returns (uint256) {\n        // Shh - currently unused\n        payer;\n        borrower;\n        repayAmount;\n\n        if (!markets[cToken].isListed) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        // Keep the flywheel moving\n        updateCompBorrowIndex(cToken);\n        distributeBorrowerComp(cToken, borrower);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates repayBorrow and reverts on rejection. May emit logs.\n     * @param cToken Asset being repaid\n     * @param payer The address repaying the borrow\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 borrowerIndex\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        payer;\n        borrower;\n        actualRepayAmount;\n        borrowerIndex;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            oracle = oracle;\n        }\n    }\n\n    /**\n     * @notice Checks if the liquidation should be allowed to occur\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param repayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 repayAmount\n    ) external override returns (uint256) {\n        // Shh - currently unused\n        liquidator;\n\n        if (\n            !markets[cTokenBorrowed].isListed ||\n            !markets[cTokenCollateral].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        uint256 borrowBalance = CToken(cTokenBorrowed).borrowBalanceStored(\n            borrower\n        );\n\n        /* allow accounts to be liquidated if the market is deprecated */\n        if (isDeprecated(CToken(cTokenBorrowed))) {\n            require(\n                borrowBalance >= repayAmount,\n                \"Can not repay more than the total borrow\"\n            );\n        } else {\n            /* The borrower must have shortfall in order to be liquidatable */\n            (Error err, , uint256 shortfall) = getAccountLiquidityInternal(\n                borrower\n            );\n            if (err != Error.NO_ERROR) {\n                return uint256(err);\n            }\n\n            if (shortfall == 0) {\n                return uint256(Error.INSUFFICIENT_SHORTFALL);\n            }\n\n            /* The liquidator may not repay more than what is allowed by the closeFactor */\n            uint256 maxClose = mul_ScalarTruncate(\n                Exp({mantissa: closeFactorMantissa}),\n                borrowBalance\n            );\n            if (repayAmount > maxClose) {\n                return uint256(Error.TOO_MUCH_REPAY);\n            }\n        }\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates liquidateBorrow and reverts on rejection. May emit logs.\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param actualRepayAmount The amount of underlying being repaid\n     */\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint256 actualRepayAmount,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenBorrowed;\n        cTokenCollateral;\n        liquidator;\n        borrower;\n        actualRepayAmount;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            oracle = oracle;\n        }\n    }\n\n    /**\n     * @notice Checks if the seizing of assets should be allowed to occur\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!seizeGuardianPaused, \"seize is paused\");\n\n        // Shh - currently unused\n        seizeTokens;\n\n        if (\n            !markets[cTokenCollateral].isListed ||\n            !markets[cTokenBorrowed].isListed\n        ) {\n            return uint256(Error.MARKET_NOT_LISTED);\n        }\n\n        if (\n            CToken(cTokenCollateral).comptroller() !=\n            CToken(cTokenBorrowed).comptroller()\n        ) {\n            return uint256(Error.COMPTROLLER_MISMATCH);\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cTokenCollateral);\n        distributeSupplierComp(cTokenCollateral, borrower);\n        distributeSupplierComp(cTokenCollateral, liquidator);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates seize and reverts on rejection. May emit logs.\n     * @param cTokenCollateral Asset which was used as collateral and will be seized\n     * @param cTokenBorrowed Asset which was borrowed by the borrower\n     * @param liquidator The address repaying the borrow and seizing the collateral\n     * @param borrower The address of the borrower\n     * @param seizeTokens The number of collateral tokens to seize\n     */\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override {\n        // Shh - currently unused\n        cTokenCollateral;\n        cTokenBorrowed;\n        liquidator;\n        borrower;\n        seizeTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            oracle = oracle;\n        }\n    }\n\n    /**\n     * @notice Checks if the account should be allowed to transfer tokens in the given market\n     * @param cToken The market to verify the transfer against\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n     */\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override returns (uint256) {\n        // Pausing is a very serious situation - we revert to sound the alarms\n        require(!transferGuardianPaused, \"transfer is paused\");\n\n        // Currently the only consideration is whether or not\n        //  the src is allowed to redeem this many tokens\n        uint256 allowed = redeemAllowedInternal(cToken, src, transferTokens);\n        if (allowed != uint256(Error.NO_ERROR)) {\n            return allowed;\n        }\n\n        // Keep the flywheel moving\n        updateCompSupplyIndex(cToken);\n        distributeSupplierComp(cToken, src);\n        distributeSupplierComp(cToken, dst);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Validates transfer and reverts on rejection. May emit logs.\n     * @param cToken Asset being transferred\n     * @param src The account which sources the tokens\n     * @param dst The account which receives the tokens\n     * @param transferTokens The number of cTokens to transfer\n     */\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint256 transferTokens\n    ) external override {\n        // Shh - currently unused\n        cToken;\n        src;\n        dst;\n        transferTokens;\n\n        // Shh - we don't ever want this hook to be marked pure\n        if (false) {\n            oracle = oracle;\n        }\n    }\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    /**\n     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n     *  Note that `cTokenBalance` is the number of cTokens the account owns in the market,\n     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n     */\n    struct AccountLiquidityLocalVars {\n        uint256 sumCollateral;\n        uint256 sumBorrowPlusEffects;\n        uint256 cTokenBalance;\n        uint256 borrowBalance;\n        uint256 exchangeRateMantissa;\n        uint256 oraclePriceMantissa;\n        Exp collateralFactor;\n        Exp exchangeRate;\n        Exp oraclePrice;\n        Exp tokensToDenom;\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code (semi-opaque),\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidity(\n        address account\n    ) public view returns (uint256, uint256, uint256) {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine the current account liquidity wrt collateral requirements\n     * @return (possible error code,\n                account liquidity in excess of collateral requirements,\n     *          account shortfall below collateral requirements)\n     */\n    function getAccountLiquidityInternal(\n        address account\n    ) internal view returns (Error, uint256, uint256) {\n        return\n            getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(address(0)),\n                0,\n                0\n            );\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @return (possible error code (semi-opaque),\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidity(\n        address account,\n        address cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    ) public view returns (uint256, uint256, uint256) {\n        (\n            Error err,\n            uint256 liquidity,\n            uint256 shortfall\n        ) = getHypotheticalAccountLiquidityInternal(\n                account,\n                CToken(cTokenModify),\n                redeemTokens,\n                borrowAmount\n            );\n        return (uint256(err), liquidity, shortfall);\n    }\n\n    /**\n     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n     * @param cTokenModify The market to hypothetically redeem/borrow in\n     * @param account The account to determine liquidity for\n     * @param redeemTokens The number of tokens to hypothetically redeem\n     * @param borrowAmount The amount of underlying to hypothetically borrow\n     * @dev Note that we calculate the exchangeRateStored for each collateral cToken using stored data,\n     *  without calculating accumulated interest.\n     * @return (possible error code,\n                hypothetical account liquidity in excess of collateral requirements,\n     *          hypothetical account shortfall below collateral requirements)\n     */\n    function getHypotheticalAccountLiquidityInternal(\n        address account,\n        CToken cTokenModify,\n        uint256 redeemTokens,\n        uint256 borrowAmount\n    ) internal view returns (Error, uint256, uint256) {\n        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n        uint256 oErr;\n\n        // For each asset the account is in\n        CToken[] memory assets = accountAssets[account];\n        for (uint256 i = 0; i < assets.length; i++) {\n            CToken asset = assets[i];\n\n            // Read the balances and exchange rate from the cToken\n            (\n                oErr,\n                vars.cTokenBalance, // 1e8\n                vars.borrowBalance, // 1e18\n                vars.exchangeRateMantissa // 1e28\n            ) = asset.getAccountSnapshot(account);\n            if (oErr != 0) {\n                // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n                return (Error.SNAPSHOT_ERROR, 0, 0);\n            }\n            vars.collateralFactor = Exp({\n                mantissa: markets[address(asset)].collateralFactorMantissa\n            });\n            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n\n            // Get the normalized price of the asset\n            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n            if (vars.oraclePriceMantissa == 0) {\n                return (Error.PRICE_ERROR, 0, 0);\n            }\n            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n\n            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n            vars.tokensToDenom = mul_(\n                mul_(vars.collateralFactor, vars.exchangeRate),\n                vars.oraclePrice\n            );\n\n            // sumCollateral += tokensToDenom * cTokenBalance\n            vars.sumCollateral = mul_ScalarTruncateAddUInt(\n                vars.tokensToDenom, // shouldbe 1e28\n                vars.cTokenBalance, // 1e8\n                vars.sumCollateral\n            );\n\n            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n            vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                vars.oraclePrice, // 1e18\n                vars.borrowBalance, // 1e18\n                vars.sumBorrowPlusEffects\n            );\n\n            // Calculate effects of interacting with cTokenModify\n            if (asset == cTokenModify) {\n                // redeem effect\n                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                    vars.tokensToDenom,\n                    redeemTokens,\n                    vars.sumBorrowPlusEffects\n                );\n\n                // borrow effect\n                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n                vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(\n                    vars.oraclePrice,\n                    borrowAmount,\n                    vars.sumBorrowPlusEffects\n                );\n            }\n        }\n\n        // These are safe, as the underflow condition is checked first\n        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n            return (\n                Error.NO_ERROR,\n                vars.sumCollateral - vars.sumBorrowPlusEffects,\n                0\n            );\n        } else {\n            return (\n                Error.NO_ERROR,\n                0,\n                vars.sumBorrowPlusEffects - vars.sumCollateral\n            );\n        }\n    }\n\n    /**\n     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n     * @dev Used in liquidation (called in cToken.liquidateBorrowFresh)\n     * @param cTokenBorrowed The address of the borrowed cToken\n     * @param cTokenCollateral The address of the collateral cToken\n     * @param actualRepayAmount The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens\n     * @return (errorCode, number of cTokenCollateral tokens to be seized in a liquidation)\n     */\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint256 actualRepayAmount\n    ) external view override returns (uint256, uint256) {\n        /* Read oracle prices for borrowed and collateral markets */\n        uint256 priceBorrowedMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenBorrowed)\n        );\n        uint256 priceCollateralMantissa = oracle.getUnderlyingPrice(\n            CToken(cTokenCollateral)\n        );\n        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n            return (uint256(Error.PRICE_ERROR), 0);\n        }\n\n        /*\n         * Get the exchange rate and calculate the number of collateral tokens to seize:\n         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n         *  seizeTokens = seizeAmount / exchangeRate\n         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n         */\n        uint256 exchangeRateMantissa = CToken(cTokenCollateral)\n            .exchangeRateStored(); // Note: reverts on error\n        uint256 seizeTokens;\n        Exp memory numerator;\n        Exp memory denominator;\n        Exp memory ratio;\n\n        numerator = mul_(\n            Exp({mantissa: liquidationIncentiveMantissa}),\n            Exp({mantissa: priceBorrowedMantissa})\n        );\n        denominator = mul_(\n            Exp({mantissa: priceCollateralMantissa}),\n            Exp({mantissa: exchangeRateMantissa})\n        );\n        ratio = div_(numerator, denominator);\n\n        seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\n\n        return (uint256(Error.NO_ERROR), seizeTokens);\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Sets a new price oracle for the comptroller\n     * @dev Admin function to set a new price oracle\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPriceOracle(PriceOracle newOracle) public returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK\n                );\n        }\n\n        // Track the old oracle for the comptroller\n        PriceOracle oldOracle = oracle;\n\n        // Set comptroller's oracle to newOracle\n        oracle = newOracle;\n\n        // Emit NewPriceOracle(oldOracle, newOracle)\n        emit NewPriceOracle(oldOracle, newOracle);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the closeFactor used when liquidating borrows\n     * @dev Admin function to set closeFactor\n     * @param newCloseFactorMantissa New close factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure\n     */\n    function _setCloseFactor(\n        uint256 newCloseFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        require(msg.sender == admin, \"only admin can set close factor\");\n        require(\n            newCloseFactorMantissa <= closeFactorMaxMantissa,\n            \"new close factor is too large\"\n        );\n        require(\n            newCloseFactorMantissa >= closeFactorMinMantissa,\n            \"new close factor is too small\"\n        );\n\n        uint256 oldCloseFactorMantissa = closeFactorMantissa;\n        closeFactorMantissa = newCloseFactorMantissa;\n        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets the collateralFactor for a market\n     * @dev Admin function to set per-market collateralFactor\n     * @param cToken The market to set the factor on\n     * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setCollateralFactor(\n        CToken cToken,\n        uint256 newCollateralFactorMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK\n                );\n        }\n\n        // Verify market is listed\n        Market storage market = markets[address(cToken)];\n        if (!market.isListed) {\n            return\n                fail(\n                    Error.MARKET_NOT_LISTED,\n                    FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS\n                );\n        }\n\n        Exp memory newCollateralFactorExp = Exp({\n            mantissa: newCollateralFactorMantissa\n        });\n\n        // Check collateral factor <= 0.95\n        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n            return\n                fail(\n                    Error.INVALID_COLLATERAL_FACTOR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION\n                );\n        }\n\n        // If collateral factor != 0, fail if price == 0\n        if (\n            newCollateralFactorMantissa != 0 &&\n            oracle.getUnderlyingPrice(cToken) == 0\n        ) {\n            return\n                fail(\n                    Error.PRICE_ERROR,\n                    FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE\n                );\n        }\n\n        // Set market's collateral factor to new collateral factor, remember old value\n        uint256 oldCollateralFactorMantissa = market.collateralFactorMantissa;\n        market.collateralFactorMantissa = newCollateralFactorMantissa;\n\n        // Emit event with asset, old collateral factor, and new collateral factor\n        emit NewCollateralFactor(\n            cToken,\n            oldCollateralFactorMantissa,\n            newCollateralFactorMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sets liquidationIncentive\n     * @dev Admin function to set liquidationIncentive\n     * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n     * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n     */\n    function _setLiquidationIncentive(\n        uint256 newLiquidationIncentiveMantissa\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK\n                );\n        }\n\n        // Save current value for use in log\n        uint256 oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n\n        // Set liquidation incentive to new incentive\n        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n\n        // Emit event with old incentive, new incentive\n        emit NewLiquidationIncentive(\n            oldLiquidationIncentiveMantissa,\n            newLiquidationIncentiveMantissa\n        );\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Add the market to the markets mapping and set it as listed\n     * @dev Admin function to set isListed and add support for the market\n     * @param cToken The address of the market (token) to list\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _supportMarket(CToken cToken) external returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SUPPORT_MARKET_OWNER_CHECK\n                );\n        }\n\n        if (markets[address(cToken)].isListed) {\n            return\n                fail(\n                    Error.MARKET_ALREADY_LISTED,\n                    FailureInfo.SUPPORT_MARKET_EXISTS\n                );\n        }\n\n        cToken.isCToken(); // Sanity check to make sure its really a CToken\n\n        // Note that isComped is not in active use anymore\n        Market storage newMarket = markets[address(cToken)];\n        newMarket.isListed = true;\n        newMarket.isComped = false;\n        newMarket.collateralFactorMantissa = 0;\n\n        _addMarketInternal(address(cToken));\n\n        emit MarketListed(cToken);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _addMarketInternal(address cToken) internal {\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            require(allMarkets[i] != CToken(cToken), \"market already added\");\n        }\n        allMarkets.push(CToken(cToken));\n    }\n\n    /**\n     * @notice Set the given borrow caps for the given cToken markets. Borrowing that brings total borrows to or above borrow cap will revert.\n     * @dev Admin or borrowCapGuardian function to set the borrow caps. A borrow cap of 0 corresponds to unlimited borrowing.\n     * @param cTokens The addresses of the markets (tokens) to change the borrow caps for\n     * @param newBorrowCaps The new borrow cap values in underlying to be set. A value of 0 corresponds to unlimited borrowing.\n     */\n    function _setMarketBorrowCaps(\n        CToken[] calldata cTokens,\n        uint256[] calldata newBorrowCaps\n    ) external {\n        require(\n            msg.sender == admin || msg.sender == borrowCapGuardian,\n            \"only admin or borrow cap guardian can set borrow caps\"\n        );\n\n        uint256 numMarkets = cTokens.length;\n        uint256 numBorrowCaps = newBorrowCaps.length;\n\n        require(\n            numMarkets != 0 && numMarkets == numBorrowCaps,\n            \"invalid input\"\n        );\n\n        for (uint256 i = 0; i < numMarkets; i++) {\n            borrowCaps[address(cTokens[i])] = newBorrowCaps[i];\n            emit NewBorrowCap(cTokens[i], newBorrowCaps[i]);\n        }\n    }\n\n    /**\n     * @notice Set the given supply caps for the given cToken markets. Supplying that brings total supply to or above supply cap will revert.\n     * @dev Admin or supplyCapGuardian function to set the supply caps. A supply cap of 0 corresponds to unlimited supplying.\n     * @param cTokens The addresses of the markets (tokens) to change the supply caps for\n     * @param newSupplyCaps The new supply cap values in underlying to be set. A value of 0 corresponds to unlimited supplying.\n     */\n    function _setMarketSupplyCaps(\n        CToken[] calldata cTokens,\n        uint256[] calldata newSupplyCaps\n    ) external {\n        require(\n            msg.sender == admin || msg.sender == supplyCapGuardian,\n            \"only admin or supply cap guardian can set supply caps\"\n        );\n\n        uint256 numMarkets = cTokens.length;\n        uint256 numSupplyCaps = newSupplyCaps.length;\n\n        require(\n            numMarkets != 0 && numMarkets == numSupplyCaps,\n            \"invalid input\"\n        );\n\n        for (uint256 i = 0; i < numMarkets; i++) {\n            supplyCaps[address(cTokens[i])] = newSupplyCaps[i];\n            emit NewSupplyCap(cTokens[i], newSupplyCaps[i]);\n        }\n    }\n\n    /**\n     * @notice Admin function to change the Borrow Cap Guardian\n     * @param newBorrowCapGuardian The address of the new Borrow Cap Guardian\n     */\n    function _setBorrowCapGuardian(address newBorrowCapGuardian) external {\n        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\n\n        // Save current value for inclusion in log\n        address oldBorrowCapGuardian = borrowCapGuardian;\n\n        // Store borrowCapGuardian with value newBorrowCapGuardian\n        borrowCapGuardian = newBorrowCapGuardian;\n\n        // Emit NewBorrowCapGuardian(OldBorrowCapGuardian, NewBorrowCapGuardian)\n        emit NewBorrowCapGuardian(oldBorrowCapGuardian, newBorrowCapGuardian);\n    }\n\n    /**\n     * @notice Admin function to change the Supply Cap Guardian\n     * @param newSupplyCapGuardian The address of the new Supply Cap Guardian\n     */\n    function _setSupplyCapGuardian(address newSupplyCapGuardian) external {\n        require(msg.sender == admin, \"only admin can set supply cap guardian\");\n\n        // Save current value for inclusion in log\n        address oldSupplyCapGuardian = supplyCapGuardian;\n\n        // Store supplyCapGuardian with value newSupplyCapGuardian\n        supplyCapGuardian = newSupplyCapGuardian;\n\n        // Emit NewSupplyCapGuardian(OldSupplyCapGuardian, NewSupplyCapGuardian)\n        emit NewSupplyCapGuardian(oldSupplyCapGuardian, newSupplyCapGuardian);\n    }\n\n    /**\n     * @notice Admin function to change the Pause Guardian\n     * @param newPauseGuardian The address of the new Pause Guardian\n     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n     */\n    function _setPauseGuardian(\n        address newPauseGuardian\n    ) public returns (uint256) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK\n                );\n        }\n\n        // Save current value for inclusion in log\n        address oldPauseGuardian = pauseGuardian;\n\n        // Store pauseGuardian with value newPauseGuardian\n        pauseGuardian = newPauseGuardian;\n\n        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n\n        return uint256(Error.NO_ERROR);\n    }\n\n    function _setMintPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        mintGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Mint\", state);\n        return state;\n    }\n\n    function _setBorrowPaused(CToken cToken, bool state) public returns (bool) {\n        require(\n            markets[address(cToken)].isListed,\n            \"cannot pause a market that is not listed\"\n        );\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        borrowGuardianPaused[address(cToken)] = state;\n        emit ActionPaused(cToken, \"Borrow\", state);\n        return state;\n    }\n\n    function _setTransferPaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        transferGuardianPaused = state;\n        emit ActionPaused(\"Transfer\", state);\n        return state;\n    }\n\n    function _setSeizePaused(bool state) public returns (bool) {\n        require(\n            msg.sender == pauseGuardian || msg.sender == admin,\n            \"only pause guardian and admin can pause\"\n        );\n        require(msg.sender == admin || state == true, \"only admin can unpause\");\n\n        seizeGuardianPaused = state;\n        emit ActionPaused(\"Seize\", state);\n        return state;\n    }\n\n    /**\n     * @notice Admin function to change the Reward Distributor\n     * @param newRewardDistributor The address of the new Reward Distributor\n     */\n    function _setRewardDistributor(address newRewardDistributor) external {\n        require(msg.sender == admin, \"only admin can set reward distributor\");\n\n        // Save current value for inclusion in log\n        address oldRewardDistributor = rewardDistributor;\n\n        // Store rewardDistributor with value newRewardDistributor\n        rewardDistributor = newRewardDistributor;\n\n        // Emit NewRewardDistributor(OldRewardDistributor, NewRewardDistributor)\n        emit NewRewardDistributor(oldRewardDistributor, newRewardDistributor);\n    }\n\n    function _become(Unitroller unitroller) public {\n        require(\n            msg.sender == unitroller.admin(),\n            \"only unitroller admin can change brains\"\n        );\n        require(\n            unitroller._acceptImplementation() == 0,\n            \"change not authorized\"\n        );\n    }\n\n    /*** Reward Distributor Notifications ***/\n\n    /**\n     * @notice Notify reward distributor for supply index update\n     * @param cToken The market whose supply index to update\n     */\n    function updateCompSupplyIndex(address cToken) internal {\n        RewardDistributor(rewardDistributor).notifySupplyIndex(cToken);\n    }\n\n    /**\n     * @notice Notify reward distributor for borrow index update\n     * @param cToken The market whose borrow index to update\n     */\n    function updateCompBorrowIndex(address cToken) internal {\n        RewardDistributor(rewardDistributor).notifyBorrowIndex(cToken);\n    }\n\n    /**\n     * @notice Notify reward distributor for supplier update\n     * @param cToken The market in which the supplier is interacting\n     * @param supplier The address of the supplier to distribute COMP to\n     */\n    function distributeSupplierComp(address cToken, address supplier) internal {\n        RewardDistributor(rewardDistributor).notifySupplier(cToken, supplier);\n    }\n\n    /**\n     * @notice Notify reward distributor for borrower update\n     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n     * @param cToken The market in which the borrower is interacting\n     * @param borrower The address of the borrower to distribute COMP to\n     */\n    function distributeBorrowerComp(address cToken, address borrower) internal {\n        RewardDistributor(rewardDistributor).notifyBorrower(cToken, borrower);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in all markets\n     * @param holder The address to claim COMP for\n     */\n    function claimComp(address holder) public {\n        return claimComp(holder, allMarkets);\n    }\n\n    /**\n     * @notice Claim all the comp accrued by holder in the specified markets\n     * @param holder The address to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     */\n    function claimComp(address holder, CToken[] memory cTokens) public {\n        address[] memory holders = new address[](1);\n        holders[0] = holder;\n        claimComp(holders, cTokens, true, true);\n    }\n\n    /**\n     * @notice Claim all comp accrued by the holders\n     * @param holders The addresses to claim COMP for\n     * @param cTokens The list of markets to claim COMP in\n     * @param borrowers Whether or not to claim COMP earned by borrowing\n     * @param suppliers Whether or not to claim COMP earned by supplying\n     */\n    function claimComp(\n        address[] memory holders,\n        CToken[] memory cTokens,\n        bool borrowers,\n        bool suppliers\n    ) public {\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            CToken cToken = cTokens[i];\n            require(markets[address(cToken)].isListed, \"market must be listed\");\n            if (borrowers == true) {\n                updateCompBorrowIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeBorrowerComp(address(cToken), holders[j]);\n                }\n            }\n            if (suppliers == true) {\n                updateCompSupplyIndex(address(cToken));\n                for (uint256 j = 0; j < holders.length; j++) {\n                    distributeSupplierComp(address(cToken), holders[j]);\n                }\n            }\n        }\n\n        RewardDistributor(rewardDistributor).claim(holders);\n    }\n\n    /**\n     * @notice Return all of the markets\n     * @dev The automatic getter may be used to access an individual market.\n     * @return The list of market addresses\n     */\n    function getAllMarkets() public view returns (CToken[] memory) {\n        return allMarkets;\n    }\n\n    /**\n     * @notice Returns true if the given cToken market has been deprecated\n     * @dev All borrows in a deprecated cToken market can be immediately liquidated\n     * @param cToken The market to check if deprecated\n     */\n    function isDeprecated(CToken cToken) public view returns (bool) {\n        return\n            markets[address(cToken)].collateralFactorMantissa == 0 &&\n            borrowGuardianPaused[address(cToken)] == true &&\n            cToken.reserveFactorMantissa() == 1e18;\n    }\n\n    function getBlockNumber() public view virtual returns (uint256) {\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/ComptrollerInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nabstract contract ComptrollerInterface {\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\n    bool public constant isComptroller = true;\n\n    /*** Assets You Are In ***/\n\n    function enterMarkets(\n        address[] calldata cTokens\n    ) external virtual returns (uint[] memory);\n\n    function exitMarket(address cToken) external virtual returns (uint);\n\n    /*** Policy Hooks ***/\n\n    function mintAllowed(\n        address cToken,\n        address minter,\n        uint mintAmount\n    ) external virtual returns (uint);\n\n    function mintVerify(\n        address cToken,\n        address minter,\n        uint mintAmount,\n        uint mintTokens\n    ) external virtual;\n\n    function redeemAllowed(\n        address cToken,\n        address redeemer,\n        uint redeemTokens\n    ) external virtual returns (uint);\n\n    function redeemVerify(\n        address cToken,\n        address redeemer,\n        uint redeemAmount,\n        uint redeemTokens\n    ) external virtual;\n\n    function borrowAllowed(\n        address cToken,\n        address borrower,\n        uint borrowAmount\n    ) external virtual returns (uint);\n\n    function borrowVerify(\n        address cToken,\n        address borrower,\n        uint borrowAmount\n    ) external virtual;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount\n    ) external virtual returns (uint);\n\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount,\n        uint borrowerIndex\n    ) external virtual;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount\n    ) external virtual returns (uint);\n\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount,\n        uint seizeTokens\n    ) external virtual;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens\n    ) external virtual returns (uint);\n\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens\n    ) external virtual;\n\n    function transferAllowed(\n        address cToken,\n        address src,\n        address dst,\n        uint transferTokens\n    ) external virtual returns (uint);\n\n    function transferVerify(\n        address cToken,\n        address src,\n        address dst,\n        uint transferTokens\n    ) external virtual;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint repayAmount\n    ) external view virtual returns (uint, uint);\n}\n"
    },
    "contracts/ComptrollerStorage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CToken.sol\";\nimport \"./PriceOracle.sol\";\n\ncontract UnitrollerAdminStorage {\n    /**\n     * @notice Administrator for this contract\n     */\n    address public admin;\n\n    /**\n     * @notice Pending administrator for this contract\n     */\n    address public pendingAdmin;\n\n    /**\n     * @notice Active brains of Unitroller\n     */\n    address public comptrollerImplementation;\n\n    /**\n     * @notice Pending brains of Unitroller\n     */\n    address public pendingComptrollerImplementation;\n}\n\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\n    /**\n     * @notice Oracle which gives the price of any given asset\n     */\n    PriceOracle public oracle;\n\n    /**\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n     */\n    uint256 public closeFactorMantissa;\n\n    /**\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\n     */\n    uint256 public liquidationIncentiveMantissa;\n\n    /**\n     * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n     */\n    mapping(address => CToken[]) public accountAssets;\n\n    struct Market {\n        // Whether or not this market is listed\n        bool isListed;\n        //  Multiplier representing the most one can borrow against their collateral in this market.\n        //  For instance, 0.9 to allow borrowing 90% of collateral value.\n        //  Must be between 0 and 1, and stored as a mantissa.\n        uint256 collateralFactorMantissa;\n        // Per-market mapping of \"accounts in this asset\"\n        mapping(address => bool) accountMembership;\n        // Whether or not this market receives COMP\n        bool isComped;\n    }\n\n    /**\n     * @notice Official mapping of cTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n    /**\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n     *  Actions which allow users to remove their own assets cannot be paused.\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\n     */\n    address public pauseGuardian;\n    bool public transferGuardianPaused;\n    bool public seizeGuardianPaused;\n    mapping(address => bool) public mintGuardianPaused;\n    mapping(address => bool) public borrowGuardianPaused;\n\n    /// @notice A list of all markets\n    CToken[] public allMarkets;\n\n    // @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n    address public borrowCapGuardian;\n\n    // @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n    mapping(address => uint256) public borrowCaps;\n\n    // @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying on the given market.\n    address public supplyCapGuardian;\n\n    // @notice Supply caps enforced by supplyAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\n    mapping(address => uint256) public supplyCaps;\n\n    // @notice Reward Distributor to markets supply and borrow (including protocol token)\n    address public rewardDistributor;\n}\n"
    },
    "contracts/CToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./CTokenInterfaces.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"./ExponentialNoError.sol\";\n\n/**\n * @title  CToken Contract\n * @notice Abstract base for CTokens\n */\nabstract contract CToken is\n    CTokenInterface,\n    ExponentialNoError,\n    TokenErrorReporter\n{\n    /**\n     * @notice Initialize the money market\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ EIP-20 name of this token\n     * @param symbol_ EIP-20 symbol of this token\n     * @param decimals_ EIP-20 decimal precision of this token\n     */\n    function initialize(\n        ComptrollerInterface comptroller_,\n        InterestRateModel interestRateModel_,\n        uint256 initialExchangeRateMantissa_,\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(\n            accrualBlockNumber == 0 && borrowIndex == 0,\n            \"market may only be initialized once\"\n        );\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(\n            initialExchangeRateMantissa > 0,\n            \"initial exchange rate must be greater than zero.\"\n        );\n\n        // Set the comptroller\n        uint256 err = _setComptroller(comptroller_);\n        require(err == NO_ERROR, \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == NO_ERROR, \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }\n\n    /**\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n     * @dev Called by both `transfer` and `transferFrom` internally\n     * @param spender The address of the account performing the transfer\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param tokens The number of tokens to transfer\n     * @return 0 if the transfer succeeded, else revert\n     */\n    function transferTokens(\n        address spender,\n        address src,\n        address dst,\n        uint256 tokens\n    ) internal returns (uint256) {\n        /* Fail if transfer not allowed */\n        uint256 allowed = comptroller.transferAllowed(\n            address(this),\n            src,\n            dst,\n            tokens\n        );\n        if (allowed != 0) {\n            revert TransferComptrollerRejection(allowed);\n        }\n\n        /* Do not allow self-transfers */\n        if (src == dst) {\n            revert TransferNotAllowed();\n        }\n\n        /* Get the allowance, infinite for the account owner */\n        uint256 startingAllowance = 0;\n        if (spender == src) {\n            startingAllowance = type(uint256).max;\n        } else {\n            startingAllowance = transferAllowances[src][spender];\n        }\n\n        /* Do the calculations, checking for {under,over}flow */\n        uint256 allowanceNew = startingAllowance - tokens;\n        uint256 srcTokensNew = accountTokens[src] - tokens;\n        uint256 dstTokensNew = accountTokens[dst] + tokens;\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        accountTokens[src] = srcTokensNew;\n        accountTokens[dst] = dstTokensNew;\n\n        /* Eat some of the allowance (if necessary) */\n        if (startingAllowance != type(uint256).max) {\n            transferAllowances[src][spender] = allowanceNew;\n        }\n\n        /* We emit a Transfer event */\n        emit Transfer(src, dst, tokens);\n\n        // unused function\n        // comptroller.transferVerify(address(this), src, dst, tokens);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(\n        address dst,\n        uint256 amount\n    ) external override nonReentrant returns (bool) {\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override nonReentrant returns (bool) {\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) external override returns (bool) {\n        address src = msg.sender;\n        transferAllowances[src][spender] = amount;\n        emit Approval(src, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view override returns (uint256) {\n        return transferAllowances[owner][spender];\n    }\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view override returns (uint256) {\n        return accountTokens[owner];\n    }\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(\n        address owner\n    ) external override returns (uint256) {\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\n        return mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\n    }\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param account Address of the account to snapshot\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n     */\n    function getAccountSnapshot(\n        address account\n    ) external view override returns (uint256, uint256, uint256, uint256) {\n        return (\n            NO_ERROR,\n            accountTokens[account],\n            borrowBalanceStoredInternal(account),\n            exchangeRateStoredInternal()\n        );\n    }\n\n    /**\n     * @dev Function to simply retrieve block number\n     *  This exists mainly for inheriting test contracts to stub this result.\n     */\n    function getBlockNumber() internal view virtual returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view override returns (uint256) {\n        return\n            interestRateModel.getBorrowRate(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves\n            );\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view override returns (uint256) {\n        return\n            interestRateModel.getSupplyRate(\n                getCashPrior(),\n                totalBorrows,\n                totalReserves,\n                reserveFactorMantissa\n            );\n    }\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent()\n        external\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        accrueInterest();\n        return totalBorrows;\n    }\n\n    /**\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n     * @param account The address whose balance should be calculated after updating borrowIndex\n     * @return The calculated balance\n     */\n    function borrowBalanceCurrent(\n        address account\n    ) external override nonReentrant returns (uint256) {\n        accrueInterest();\n        return borrowBalanceStored(account);\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return The calculated balance\n     */\n    function borrowBalanceStored(\n        address account\n    ) public view override returns (uint256) {\n        return borrowBalanceStoredInternal(account);\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\n     */\n    function borrowBalanceStoredInternal(\n        address account\n    ) internal view returns (uint256) {\n        /* Get borrowBalance and borrowIndex */\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n         */\n        if (borrowSnapshot.principal == 0) {\n            return 0;\n        }\n\n        /* Calculate new borrow balance using the interest index:\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\n         */\n        uint256 principalTimesIndex = borrowSnapshot.principal * borrowIndex;\n        return principalTimesIndex / borrowSnapshot.interestIndex;\n    }\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent()\n        public\n        override\n        nonReentrant\n        returns (uint256)\n    {\n        accrueInterest();\n        return exchangeRateStored();\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() public view override returns (uint256) {\n        return exchangeRateStoredInternal();\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStoredInternal()\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        uint256 _totalSupply = totalSupply;\n        if (_totalSupply == 0) {\n            /*\n             * If there are no tokens minted:\n             *  exchangeRate = initialExchangeRate\n             */\n            return initialExchangeRateMantissa;\n        } else {\n            /*\n             * Otherwise:\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n             */\n            uint256 totalCash = getCashPrior();\n            uint256 cashPlusBorrowsMinusReserves = totalCash +\n                totalBorrows -\n                totalReserves;\n            uint256 exchangeRate = (cashPlusBorrowsMinusReserves * expScale) /\n                _totalSupply;\n\n            return exchangeRate;\n        }\n    }\n\n    /**\n     * @notice Get cash balance of this cToken in the underlying asset\n     * @return The quantity of underlying asset owned by this contract\n     */\n    function getCash() external view override returns (uint256) {\n        return getCashPrior();\n    }\n\n    /**\n     * @notice Applies accrued interest to total borrows and reserves\n     * @dev This calculates interest accrued from the last checkpointed block\n     *   up to the current block and writes new checkpoint to storage.\n     */\n    function accrueInterest() public virtual override returns (uint256) {\n        /* Remember the initial block number */\n        uint256 currentBlockNumber = getBlockNumber();\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\n\n        /* Short-circuit accumulating 0 interest */\n        if (accrualBlockNumberPrior == currentBlockNumber) {\n            return NO_ERROR;\n        }\n\n        /* Read the previous values out of storage */\n        uint256 cashPrior = getCashPrior();\n        uint256 borrowsPrior = totalBorrows;\n        uint256 reservesPrior = totalReserves;\n        uint256 borrowIndexPrior = borrowIndex;\n\n        /* Calculate the current borrow interest rate */\n        uint256 borrowRateMantissa = interestRateModel.getBorrowRate(\n            cashPrior,\n            borrowsPrior,\n            reservesPrior\n        );\n        require(\n            borrowRateMantissa <= borrowRateMaxMantissa,\n            \"borrow rate is absurdly high\"\n        );\n\n        /* Calculate the number of blocks elapsed since the last accrual */\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\n\n        /*\n         * Calculate the interest accumulated into borrows and reserves and the new index:\n         *  simpleInterestFactor = borrowRate * blockDelta\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n         */\n\n        Exp memory simpleInterestFactor = mul_(\n            Exp({mantissa: borrowRateMantissa}),\n            blockDelta\n        );\n        uint256 interestAccumulated = mul_ScalarTruncate(\n            simpleInterestFactor,\n            borrowsPrior\n        );\n        uint256 totalBorrowsNew = interestAccumulated + borrowsPrior;\n        uint256 totalReservesNew = mul_ScalarTruncateAddUInt(\n            Exp({mantissa: reserveFactorMantissa}),\n            interestAccumulated,\n            reservesPrior\n        );\n        uint256 borrowIndexNew = mul_ScalarTruncateAddUInt(\n            simpleInterestFactor,\n            borrowIndexPrior,\n            borrowIndexPrior\n        );\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We write the previously calculated values into storage */\n        accrualBlockNumber = currentBlockNumber;\n        borrowIndex = borrowIndexNew;\n        totalBorrows = totalBorrowsNew;\n        totalReserves = totalReservesNew;\n\n        /* We emit an AccrueInterest event */\n        emit AccrueInterest(\n            cashPrior,\n            interestAccumulated,\n            borrowIndexNew,\n            totalBorrowsNew\n        );\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     */\n    function mintInternal(uint256 mintAmount) internal nonReentrant {\n        accrueInterest();\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\n        mintFresh(msg.sender, mintAmount);\n    }\n\n    /**\n     * @notice User supplies assets into the market and receives cTokens in exchange\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param minter The address of the account which is supplying the assets\n     * @param mintAmount The amount of the underlying asset to supply\n     */\n    function mintFresh(address minter, uint256 mintAmount) internal {\n        /* Fail if mint not allowed */\n        uint256 allowed = comptroller.mintAllowed(\n            address(this),\n            minter,\n            mintAmount\n        );\n        if (allowed != 0) {\n            revert MintComptrollerRejection(allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert MintFreshnessCheck();\n        }\n\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         *  We call `doTransferIn` for the minter and the mintAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n         *  side-effects occurred. The function returns the amount actually transferred,\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\n         *  of cash.\n         */\n        uint256 actualMintAmount = doTransferIn(minter, mintAmount);\n\n        /*\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\n         *  mintTokens = actualMintAmount / exchangeRate\n         */\n\n        uint256 mintTokens = div_(actualMintAmount, exchangeRate);\n\n        /*\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\n         *  totalSupplyNew = totalSupply + mintTokens\n         *  accountTokensNew = accountTokens[minter] + mintTokens\n         * And write them into storage\n         */\n        totalSupply = totalSupply + mintTokens;\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\n\n        /* We emit a Mint event, and a Transfer event */\n        emit Mint(minter, actualMintAmount, mintTokens);\n        emit Transfer(address(this), minter, mintTokens);\n\n        /* We call the defense hook */\n\n        comptroller.mintVerify(\n            address(this),\n            minter,\n            actualMintAmount,\n            mintTokens\n        );\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     */\n    function redeemInternal(uint256 redeemTokens) internal nonReentrant {\n        accrueInterest();\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n     */\n    function redeemUnderlyingInternal(\n        uint256 redeemAmount\n    ) internal nonReentrant {\n        accrueInterest();\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\n    }\n\n    /**\n     * @notice User redeems cTokens in exchange for the underlying asset\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param redeemer The address of the account which is redeeming the tokens\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     */\n    function redeemFresh(\n        address payable redeemer,\n        uint256 redeemTokensIn,\n        uint256 redeemAmountIn\n    ) internal {\n        require(\n            redeemTokensIn == 0 || redeemAmountIn == 0,\n            \"one of redeemTokensIn or redeemAmountIn must be zero\"\n        );\n\n        /* exchangeRate = invoke Exchange Rate Stored() */\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\n\n        uint256 redeemTokens;\n        uint256 redeemAmount;\n        /* If redeemTokensIn > 0: */\n        if (redeemTokensIn > 0) {\n            /*\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n             *  redeemTokens = redeemTokensIn\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n             */\n            redeemTokens = redeemTokensIn;\n            redeemAmount = mul_ScalarTruncate(exchangeRate, redeemTokensIn);\n        } else {\n            /*\n             * We get the current exchange rate and calculate the amount to be redeemed:\n             *  redeemTokens = redeemAmountIn / exchangeRate\n             *  redeemAmount = redeemAmountIn\n             */\n            redeemTokens = div_(redeemAmountIn, exchangeRate);\n            redeemAmount = redeemAmountIn;\n        }\n\n        /* Fail if redeem not allowed */\n        uint256 allowed = comptroller.redeemAllowed(\n            address(this),\n            redeemer,\n            redeemTokens\n        );\n        if (allowed != 0) {\n            revert RedeemComptrollerRejection(allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert RedeemFreshnessCheck();\n        }\n\n        /* Fail gracefully if protocol has insufficient cash */\n        if (getCashPrior() < redeemAmount) {\n            revert RedeemTransferOutNotPossible();\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We write the previously calculated values into storage.\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\n         */\n        totalSupply = totalSupply - redeemTokens;\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\n\n        /*\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken has redeemAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(redeemer, redeemAmount);\n\n        /* We emit a Transfer event, and a Redeem event */\n        emit Transfer(redeemer, address(this), redeemTokens);\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\n\n        /* We call the defense hook */\n        comptroller.redeemVerify(\n            address(this),\n            redeemer,\n            redeemAmount,\n            redeemTokens\n        );\n    }\n\n    /**\n     * @notice Sender borrows assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     */\n    function borrowInternal(uint256 borrowAmount) internal nonReentrant {\n        accrueInterest();\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\n        borrowFresh(payable(msg.sender), borrowAmount);\n    }\n\n    /**\n     * @notice Users borrow assets from the protocol to their own address\n     * @param borrowAmount The amount of the underlying asset to borrow\n     */\n    function borrowFresh(\n        address payable borrower,\n        uint256 borrowAmount\n    ) internal {\n        /* Fail if borrow not allowed */\n        uint256 allowed = comptroller.borrowAllowed(\n            address(this),\n            borrower,\n            borrowAmount\n        );\n        if (allowed != 0) {\n            revert BorrowComptrollerRejection(allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert BorrowFreshnessCheck();\n        }\n\n        /* Fail gracefully if protocol has insufficient underlying cash */\n        if (getCashPrior() < borrowAmount) {\n            revert BorrowCashNotAvailable();\n        }\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on overflow:\n         *  accountBorrowNew = accountBorrow + borrowAmount\n         *  totalBorrowsNew = totalBorrows + borrowAmount\n         */\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\n        uint256 accountBorrowsNew = accountBorrowsPrev + borrowAmount;\n        uint256 totalBorrowsNew = totalBorrows + borrowAmount;\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We write the previously calculated values into storage.\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\n        `*/\n        accountBorrows[borrower].principal = accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = totalBorrowsNew;\n\n        /*\n         * We invoke doTransferOut for the borrower and the borrowAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken borrowAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(borrower, borrowAmount);\n\n        /* We emit a Borrow event */\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     */\n    function repayBorrowInternal(uint256 repayAmount) internal nonReentrant {\n        accrueInterest();\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\n     */\n    function repayBorrowBehalfInternal(\n        address borrower,\n        uint256 repayAmount\n    ) internal nonReentrant {\n        accrueInterest();\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\n    }\n\n    /**\n     * @notice Borrows are repaid by another user (possibly the borrower).\n     * @param payer the account paying off the borrow\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\n     * @return (uint) the actual repayment amount.\n     */\n    function repayBorrowFresh(\n        address payer,\n        address borrower,\n        uint256 repayAmount\n    ) internal returns (uint256) {\n        /* Fail if repayBorrow not allowed */\n        uint256 allowed = comptroller.repayBorrowAllowed(\n            address(this),\n            payer,\n            borrower,\n            repayAmount\n        );\n        if (allowed != 0) {\n            revert RepayBorrowComptrollerRejection(allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert RepayBorrowFreshnessCheck();\n        }\n\n        /* We fetch the amount the borrower owes, with accumulated interest */\n        uint256 accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\n\n        /* If repayAmount == -1, repayAmount = accountBorrows */\n        uint256 repayAmountFinal = repayAmount == type(uint256).max\n            ? accountBorrowsPrev\n            : repayAmount;\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the payer and the repayAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional repayAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *   it returns the amount actually transferred, in case of a fee.\n         */\n        uint256 actualRepayAmount = doTransferIn(payer, repayAmountFinal);\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on underflow:\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\n         */\n        uint256 accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\n        uint256 totalBorrowsNew = totalBorrows - actualRepayAmount;\n\n        /* We write the previously calculated values into storage */\n        accountBorrows[borrower].principal = accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = totalBorrowsNew;\n\n        /* We emit a RepayBorrow event */\n        emit RepayBorrow(\n            payer,\n            borrower,\n            actualRepayAmount,\n            accountBorrowsNew,\n            totalBorrowsNew\n        );\n\n        return actualRepayAmount;\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     */\n    function liquidateBorrowInternal(\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) internal nonReentrant {\n        accrueInterest();\n\n        uint256 error = cTokenCollateral.accrueInterest();\n        if (error != NO_ERROR) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n            revert LiquidateAccrueCollateralInterestFailed(error);\n        }\n\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n        liquidateBorrowFresh(\n            msg.sender,\n            borrower,\n            repayAmount,\n            cTokenCollateral\n        );\n    }\n\n    /**\n     * @notice The liquidator liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param liquidator The address repaying the borrow and seizing collateral\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     */\n    function liquidateBorrowFresh(\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        CTokenInterface cTokenCollateral\n    ) internal {\n        /* Fail if liquidate not allowed */\n        uint256 allowed = comptroller.liquidateBorrowAllowed(\n            address(this),\n            address(cTokenCollateral),\n            liquidator,\n            borrower,\n            repayAmount\n        );\n        if (allowed != 0) {\n            revert LiquidateComptrollerRejection(allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert LiquidateFreshnessCheck();\n        }\n\n        /* Verify cTokenCollateral market's block number equals current block number */\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\n            revert LiquidateCollateralFreshnessCheck();\n        }\n\n        /* Fail if borrower = liquidator */\n        if (borrower == liquidator) {\n            revert LiquidateLiquidatorIsBorrower();\n        }\n\n        /* Fail if repayAmount = 0 */\n        if (repayAmount == 0) {\n            revert LiquidateCloseAmountIsZero();\n        }\n\n        /* Fail if repayAmount = -1 */\n        if (repayAmount == type(uint256).max) {\n            revert LiquidateCloseAmountIsUintMax();\n        }\n\n        /* Fail if repayBorrow fails */\n        uint256 actualRepayAmount = repayBorrowFresh(\n            liquidator,\n            borrower,\n            repayAmount\n        );\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We calculate the number of collateral tokens that will be seized */\n        (uint256 amountSeizeError, uint256 seizeTokens) = comptroller\n            .liquidateCalculateSeizeTokens(\n                address(this),\n                address(cTokenCollateral),\n                actualRepayAmount\n            );\n        require(\n            amountSeizeError == NO_ERROR,\n            \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\"\n        );\n\n        /* Revert if borrower collateral token balance < seizeTokens */\n        require(\n            cTokenCollateral.balanceOf(borrower) >= seizeTokens,\n            \"LIQUIDATE_SEIZE_TOO_MUCH\"\n        );\n\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\n        if (address(cTokenCollateral) == address(this)) {\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\n        } else {\n            require(\n                cTokenCollateral.seize(liquidator, borrower, seizeTokens) ==\n                    NO_ERROR,\n                \"token seizure failed\"\n            );\n        }\n\n        /* We emit a LiquidateBorrow event */\n        emit LiquidateBorrow(\n            liquidator,\n            borrower,\n            actualRepayAmount,\n            address(cTokenCollateral),\n            seizeTokens\n        );\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Will fail unless called by another cToken during the process of liquidation.\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external override nonReentrant returns (uint256) {\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     */\n    function seizeInternal(\n        address seizerToken,\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) internal {\n        /* Fail if seize not allowed */\n        uint256 allowed = comptroller.seizeAllowed(\n            address(this),\n            seizerToken,\n            liquidator,\n            borrower,\n            seizeTokens\n        );\n        if (allowed != 0) {\n            revert LiquidateSeizeComptrollerRejection(allowed);\n        }\n\n        /* Fail if borrower = liquidator */\n        if (borrower == liquidator) {\n            revert LiquidateSeizeLiquidatorIsBorrower();\n        }\n\n        /*\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n         */\n        uint256 protocolSeizeTokens = mul_(\n            seizeTokens,\n            Exp({mantissa: protocolSeizeShareMantissa})\n        );\n        uint256 liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateStoredInternal()});\n        uint256 protocolSeizeAmount = mul_ScalarTruncate(\n            exchangeRate,\n            protocolSeizeTokens\n        );\n        uint256 totalReservesNew = totalReserves + protocolSeizeAmount;\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We write the calculated values into storage */\n        totalReserves = totalReservesNew;\n        totalSupply = totalSupply - protocolSeizeTokens;\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\n        accountTokens[liquidator] =\n            accountTokens[liquidator] +\n            liquidatorSeizeTokens;\n\n        /* Emit a Transfer event */\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\n        emit ReservesAdded(\n            address(this),\n            protocolSeizeAmount,\n            totalReservesNew\n        );\n    }\n\n    /*** Admin Functions ***/\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @param newPendingAdmin New pending admin.\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPendingAdmin(\n        address payable newPendingAdmin\n    ) external override returns (uint256) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            revert SetPendingAdminOwnerCheck();\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptAdmin() external override returns (uint256) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            revert AcceptAdminPendingAdminCheck();\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = payable(address(0));\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Sets a new comptroller for the market\n     * @dev Admin function to set a new comptroller\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setComptroller(\n        ComptrollerInterface newComptroller\n    ) public override returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            revert SetComptrollerOwnerCheck();\n        }\n\n        ComptrollerInterface oldComptroller = comptroller;\n        // Ensure invoke comptroller.isComptroller() returns true\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n        // Set market's comptroller to newComptroller\n        comptroller = newComptroller;\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n        emit NewComptroller(oldComptroller, newComptroller);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n     * @dev Admin function to accrue interest and set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactor(\n        uint256 newReserveFactorMantissa\n    ) external override nonReentrant returns (uint256) {\n        accrueInterest();\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n    }\n\n    /**\n     * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n     * @dev Admin function to set a new reserve factor\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveFactorFresh(\n        uint256 newReserveFactorMantissa\n    ) internal returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            revert SetReserveFactorAdminCheck();\n        }\n\n        // Verify market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert SetReserveFactorFreshCheck();\n        }\n\n        // Check newReserveFactor ≤ maxReserveFactor\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n            revert SetReserveFactorBoundsCheck();\n        }\n\n        uint256 oldReserveFactorMantissa = reserveFactorMantissa;\n        reserveFactorMantissa = newReserveFactorMantissa;\n\n        emit NewReserveFactor(\n            oldReserveFactorMantissa,\n            newReserveFactorMantissa\n        );\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\n     * @param addAmount Amount of addition to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReservesInternal(\n        uint256 addAmount\n    ) internal nonReentrant returns (uint256) {\n        accrueInterest();\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n        _addReservesFresh(addAmount);\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Add reserves by transferring from caller\n     * @dev Requires fresh interest accrual\n     * @param addAmount Amount of addition to reserves\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\n     */\n    function _addReservesFresh(\n        uint256 addAmount\n    ) internal returns (uint256, uint256) {\n        // totalReserves + actualAddAmount\n        uint256 totalReservesNew;\n        uint256 actualAddAmount;\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert AddReservesFactorFreshCheck(actualAddAmount);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the caller and the addAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional addAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *  it returns the amount actually transferred, in case of a fee.\n         */\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n        totalReservesNew = totalReserves + actualAddAmount;\n\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\n        totalReserves = totalReservesNew;\n\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n        /* Return (NO_ERROR, actualAddAmount) */\n        return (NO_ERROR, actualAddAmount);\n    }\n\n    /**\n     * @notice Admin function to set new reserve guardian\n     * @param newReserveGuardian New reserve guardian address\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setReserveGuardian(\n        address payable newReserveGuardian\n    ) external returns (uint256) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            revert SetReserveGuardianOwnerCheck();\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldReserveGuardian = reserveGuardian;\n\n        // Set market's reserveGuardian to newReserveGuardian\n        reserveGuardian = newReserveGuardian;\n\n        emit NewReserveGuardian(oldReserveGuardian, newReserveGuardian);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring to admin\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReserves(\n        uint256 reduceAmount\n    ) external override nonReentrant returns (uint256) {\n        accrueInterest();\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n        return _reduceReservesFresh(reduceAmount);\n    }\n\n    /**\n     * @notice Reduces reserves by transferring to admin\n     * @dev Requires fresh interest accrual\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReservesFresh(\n        uint256 reduceAmount\n    ) internal returns (uint256) {\n        // totalReserves - reduceAmount\n        uint256 totalReservesNew;\n\n        // Check caller is admin\n        // TODO: Fix\n        if (msg.sender != admin && msg.sender != reserveGuardian) {\n            revert ReduceReservesAdminCheck();\n        }\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert ReduceReservesFreshCheck();\n        }\n\n        // Fail gracefully if protocol has insufficient underlying cash\n        if (getCashPrior() < reduceAmount) {\n            revert ReduceReservesCashNotAvailable();\n        }\n\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\n        if (reduceAmount > totalReserves) {\n            revert ReduceReservesCashValidation();\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        totalReservesNew = totalReserves - reduceAmount;\n\n        // Store reserves[n+1] = reserves[n] - reduceAmount\n        totalReserves = totalReservesNew;\n\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n        doTransferOut(payable(msg.sender), reduceAmount);\n\n        emit ReservesReduced(msg.sender, reduceAmount, totalReservesNew);\n\n        return NO_ERROR;\n    }\n\n    /**\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n     * @dev Admin function to accrue interest and update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModel(\n        InterestRateModel newInterestRateModel\n    ) public override returns (uint256) {\n        accrueInterest();\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n        return _setInterestRateModelFresh(newInterestRateModel);\n    }\n\n    /**\n     * @notice updates the interest rate model (*requires fresh interest accrual)\n     * @dev Admin function to update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModelFresh(\n        InterestRateModel newInterestRateModel\n    ) internal returns (uint256) {\n        // Used to store old model for use in the event that is emitted on success\n        InterestRateModel oldInterestRateModel;\n\n        // Check caller is admin\n        if (msg.sender != admin) {\n            revert SetInterestRateModelOwnerCheck();\n        }\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            revert SetInterestRateModelFreshCheck();\n        }\n\n        // Track the market's current interest rate model\n        oldInterestRateModel = interestRateModel;\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n        require(\n            newInterestRateModel.isInterestRateModel(),\n            \"marker method returned false\"\n        );\n\n        // Set the interest rate model to newInterestRateModel\n        interestRateModel = newInterestRateModel;\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n        emit NewMarketInterestRateModel(\n            oldInterestRateModel,\n            newInterestRateModel\n        );\n\n        return NO_ERROR;\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying owned by this contract\n     */\n    function getCashPrior() internal view virtual returns (uint256);\n\n    /**\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n     *  This may revert due to insufficient balance or insufficient allowance.\n     */\n    function doTransferIn(\n        address from,\n        uint256 amount\n    ) internal virtual returns (uint256);\n\n    /**\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n     */\n    function doTransferOut(address payable to, uint256 amount) internal virtual;\n\n    /*** Reentrancy Guard ***/\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     */\n    modifier nonReentrant() {\n        require(_notEntered, \"re-entered\");\n        _notEntered = false;\n        _;\n        _notEntered = true; // get a gas-refund post-Istanbul\n    }\n}\n"
    },
    "contracts/CTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./InterestRateModel.sol\";\nimport \"./EIP20NonStandardInterface.sol\";\nimport \"./ErrorReporter.sol\";\n\ncontract CTokenStorage {\n    /**\n     * @dev Guard variable for re-entrancy checks\n     */\n    bool internal _notEntered;\n\n    /**\n     * @notice EIP-20 token name for this token\n     */\n    string public name;\n\n    /**\n     * @notice EIP-20 token symbol for this token\n     */\n    string public symbol;\n\n    /**\n     * @notice EIP-20 token decimals for this token\n     */\n    uint8 public decimals;\n\n    // Maximum borrow rate that can ever be applied (.0005% / block)\n    uint internal constant borrowRateMaxMantissa = 0.00005e16;\n\n    // Maximum fraction of interest that can be set aside for reserves\n    uint internal constant reserveFactorMaxMantissa = 1e18;\n\n    /**\n     * @notice Administrator for this contract\n     */\n    address payable public admin;\n\n    /**\n     * @notice Pending administrator for this contract\n     */\n    address payable public pendingAdmin;\n\n    /**\n     * @notice Contract which oversees inter-cToken operations\n     */\n    ComptrollerInterface public comptroller;\n\n    /**\n     * @notice Model which tells what the current interest rate should be\n     */\n    InterestRateModel public interestRateModel;\n\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n    uint internal initialExchangeRateMantissa;\n\n    /**\n     * @notice Fraction of interest currently set aside for reserves\n     */\n    uint public reserveFactorMantissa;\n\n    /**\n     * @notice Block number that interest was last accrued at\n     */\n    uint public accrualBlockNumber;\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the opening of the market\n     */\n    uint public borrowIndex;\n\n    /**\n     * @notice Total amount of outstanding borrows of the underlying in this market\n     */\n    uint public totalBorrows;\n\n    /**\n     * @notice Total amount of reserves of the underlying held in this market\n     */\n    uint public totalReserves;\n\n    /**\n     * @notice Total number of tokens in circulation\n     */\n    uint public totalSupply;\n\n    // Official record of token balances for each account\n    mapping(address => uint) internal accountTokens;\n\n    // Approved token transfer amounts on behalf of others\n    mapping(address => mapping(address => uint)) internal transferAllowances;\n\n    /**\n     * @notice Container for borrow balance information\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n     */\n    struct BorrowSnapshot {\n        uint principal;\n        uint interestIndex;\n    }\n\n    // Mapping of account addresses to outstanding borrow balances\n    mapping(address => BorrowSnapshot) internal accountBorrows;\n\n    /**\n     * @notice Share of seized collateral that is added to reserves\n     */\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\n\n    /**\n     * @notice The reserve guardian can reduce the reserves of the market\n     */\n    address payable public reserveGuardian;\n}\n\nabstract contract CTokenInterface is CTokenStorage {\n    /**\n     * @notice Indicator that this is a CToken contract (for inspection)\n     */\n    bool public constant isCToken = true;\n\n    /*** Market Events ***/\n\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(\n        uint cashPrior,\n        uint interestAccumulated,\n        uint borrowIndex,\n        uint totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Mint(address minter, uint mintAmount, uint mintTokens);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(\n        address borrower,\n        uint borrowAmount,\n        uint accountBorrows,\n        uint totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(\n        address payer,\n        address borrower,\n        uint repayAmount,\n        uint accountBorrows,\n        uint totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(\n        address liquidator,\n        address borrower,\n        uint repayAmount,\n        address cTokenCollateral,\n        uint seizeTokens\n    );\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Event emitted when comptroller is changed\n     */\n    event NewComptroller(\n        ComptrollerInterface oldComptroller,\n        ComptrollerInterface newComptroller\n    );\n\n    /**\n     * @notice Event emitted when reserve guardian is changed\n     */\n    event NewReserveGuardian(\n        address oldReserveGuardian,\n        address newReserveGuardian\n    );\n\n    /**\n     * @notice Event emitted when interestRateModel is changed\n     */\n    event NewMarketInterestRateModel(\n        InterestRateModel oldInterestRateModel,\n        InterestRateModel newInterestRateModel\n    );\n\n    /**\n     * @notice Event emitted when the reserve factor is changed\n     */\n    event NewReserveFactor(\n        uint oldReserveFactorMantissa,\n        uint newReserveFactorMantissa\n    );\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(\n        address benefactor,\n        uint addAmount,\n        uint newTotalReserves\n    );\n\n    /**\n     * @notice Event emitted when the reserves are reduced\n     */\n    event ReservesReduced(\n        address admin,\n        uint reduceAmount,\n        uint newTotalReserves\n    );\n\n    /**\n     * @notice EIP20 Transfer event\n     */\n    event Transfer(address indexed from, address indexed to, uint amount);\n\n    /**\n     * @notice EIP20 Approval event\n     */\n    event Approval(address indexed owner, address indexed spender, uint amount);\n\n    /*** User Interface ***/\n\n    function transfer(address dst, uint amount) external virtual returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint amount\n    ) external virtual returns (bool);\n\n    function approve(\n        address spender,\n        uint amount\n    ) external virtual returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view virtual returns (uint);\n\n    function balanceOf(address owner) external view virtual returns (uint);\n\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\n\n    function getAccountSnapshot(\n        address account\n    ) external view virtual returns (uint, uint, uint, uint);\n\n    function borrowRatePerBlock() external view virtual returns (uint);\n\n    function supplyRatePerBlock() external view virtual returns (uint);\n\n    function totalBorrowsCurrent() external virtual returns (uint);\n\n    function borrowBalanceCurrent(\n        address account\n    ) external virtual returns (uint);\n\n    function borrowBalanceStored(\n        address account\n    ) external view virtual returns (uint);\n\n    function exchangeRateCurrent() external virtual returns (uint);\n\n    function exchangeRateStored() external view virtual returns (uint);\n\n    function getCash() external view virtual returns (uint);\n\n    function accrueInterest() external virtual returns (uint);\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint seizeTokens\n    ) external virtual returns (uint);\n\n    /*** Admin Functions ***/\n\n    function _setPendingAdmin(\n        address payable newPendingAdmin\n    ) external virtual returns (uint);\n\n    function _acceptAdmin() external virtual returns (uint);\n\n    function _setComptroller(\n        ComptrollerInterface newComptroller\n    ) external virtual returns (uint);\n\n    function _setReserveFactor(\n        uint newReserveFactorMantissa\n    ) external virtual returns (uint);\n\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\n\n    function _setInterestRateModel(\n        InterestRateModel newInterestRateModel\n    ) external virtual returns (uint);\n}\n\ncontract CErc20Storage {\n    /**\n     * @notice Underlying asset for this CToken\n     */\n    address public underlying;\n}\n\nabstract contract CErc20Interface is CErc20Storage {\n    /*** User Interface ***/\n\n    function mint(uint mintAmount) external virtual returns (uint);\n\n    function redeem(uint redeemTokens) external virtual returns (uint);\n\n    function redeemUnderlying(\n        uint redeemAmount\n    ) external virtual returns (uint);\n\n    function borrow(uint borrowAmount) external virtual returns (uint);\n\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\n\n    function repayBorrowBehalf(\n        address borrower,\n        uint repayAmount\n    ) external virtual returns (uint);\n\n    function liquidateBorrow(\n        address borrower,\n        uint repayAmount,\n        CTokenInterface cTokenCollateral\n    ) external virtual returns (uint);\n\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\n\n    /*** Admin Functions ***/\n\n    function _addReserves(uint addAmount) external virtual returns (uint);\n}\n\ncontract CDelegationStorage {\n    /**\n     * @notice Implementation address for this contract\n     */\n    address public implementation;\n}\n\nabstract contract CDelegatorInterface is CDelegationStorage {\n    /**\n     * @notice Emitted when implementation is changed\n     */\n    event NewImplementation(\n        address oldImplementation,\n        address newImplementation\n    );\n\n    /**\n     * @notice Called by the admin to update the implementation of the delegator\n     * @param implementation_ The address of the new implementation for delegation\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n     */\n    function _setImplementation(\n        address implementation_,\n        bool allowResign,\n        bytes memory becomeImplementationData\n    ) external virtual;\n}\n\nabstract contract CDelegateInterface is CDelegationStorage {\n    /**\n     * @notice Called by the delegator on a delegate to initialize it for duty\n     * @dev Should revert if any issues arise which make it unfit for delegation\n     * @param data The encoded bytes data for any initialization\n     */\n    function _becomeImplementation(bytes memory data) external virtual;\n\n    /**\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\n     */\n    function _resignImplementation() external virtual;\n}\n"
    },
    "contracts/EIP20Interface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\n/**\n * @title ERC 20 Token Standard Interface\n *  https://eips.ethereum.org/EIPS/eip-20\n */\ninterface EIP20Interface {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @return The supply of tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return balance The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return success Whether or not the transfer succeeded\n     */\n    function transfer(\n        address dst,\n        uint256 amount\n    ) external returns (bool success);\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return success Whether or not the transfer succeeded\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool success);\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return success Whether or not the approval succeeded\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) external returns (bool success);\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n}\n"
    },
    "contracts/EIP20NonStandardInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\n/**\n * @title EIP20NonStandardInterface\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n */\ninterface EIP20NonStandardInterface {\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @return The supply of tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return balance The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     */\n    function transfer(address dst, uint256 amount) external;\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     */\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved\n     * @return success Whether or not the approval succeeded\n     */\n    function approve(\n        address spender,\n        uint256 amount\n    ) external returns (bool success);\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return remaining The number of tokens allowed to be spent\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n}\n"
    },
    "contracts/ErrorReporter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\ncontract ComptrollerErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        COMPTROLLER_MISMATCH,\n        INSUFFICIENT_SHORTFALL,\n        INSUFFICIENT_LIQUIDITY,\n        INVALID_CLOSE_FACTOR,\n        INVALID_COLLATERAL_FACTOR,\n        INVALID_LIQUIDATION_INCENTIVE,\n        MARKET_NOT_ENTERED, // no longer possible\n        MARKET_NOT_LISTED,\n        MARKET_ALREADY_LISTED,\n        MATH_ERROR,\n        NONZERO_BORROW_BALANCE,\n        PRICE_ERROR,\n        REJECTION,\n        SNAPSHOT_ERROR,\n        TOO_MANY_ASSETS,\n        TOO_MUCH_REPAY\n    }\n\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n        EXIT_MARKET_BALANCE_OWED,\n        EXIT_MARKET_REJECTION,\n        SET_CLOSE_FACTOR_OWNER_CHECK,\n        SET_CLOSE_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n        SET_IMPLEMENTATION_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n        SET_PRICE_ORACLE_OWNER_CHECK,\n        SUPPORT_MARKET_EXISTS,\n        SUPPORT_MARKET_OWNER_CHECK,\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\n    }\n\n    /**\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n     **/\n    event Failure(uint error, uint info, uint detail);\n\n    /**\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n     */\n    function fail(Error err, FailureInfo info) internal returns (uint) {\n        emit Failure(uint(err), uint(info), 0);\n\n        return uint(err);\n    }\n\n    /**\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n     */\n    function failOpaque(\n        Error err,\n        FailureInfo info,\n        uint opaqueError\n    ) internal returns (uint) {\n        emit Failure(uint(err), uint(info), opaqueError);\n\n        return uint(err);\n    }\n}\n\ncontract TokenErrorReporter {\n    uint public constant NO_ERROR = 0; // support legacy return codes\n\n    error TransferComptrollerRejection(uint256 errorCode);\n    error TransferNotAllowed();\n    error TransferNotEnough();\n    error TransferTooMuch();\n\n    error MintComptrollerRejection(uint256 errorCode);\n    error MintFreshnessCheck();\n\n    error RedeemComptrollerRejection(uint256 errorCode);\n    error RedeemFreshnessCheck();\n    error RedeemTransferOutNotPossible();\n\n    error BorrowComptrollerRejection(uint256 errorCode);\n    error BorrowFreshnessCheck();\n    error BorrowCashNotAvailable();\n\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\n    error RepayBorrowFreshnessCheck();\n\n    error LiquidateComptrollerRejection(uint256 errorCode);\n    error LiquidateFreshnessCheck();\n    error LiquidateCollateralFreshnessCheck();\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\n    error LiquidateLiquidatorIsBorrower();\n    error LiquidateCloseAmountIsZero();\n    error LiquidateCloseAmountIsUintMax();\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\n\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\n    error LiquidateSeizeLiquidatorIsBorrower();\n\n    error AcceptAdminPendingAdminCheck();\n\n    error SetComptrollerOwnerCheck();\n    error SetPendingAdminOwnerCheck();\n\n    error SetReserveFactorAdminCheck();\n    error SetReserveFactorFreshCheck();\n    error SetReserveFactorBoundsCheck();\n\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\n\n    error SetReserveGuardianOwnerCheck();\n\n    error ReduceReservesAdminCheck();\n    error ReduceReservesFreshCheck();\n    error ReduceReservesCashNotAvailable();\n    error ReduceReservesCashValidation();\n\n    error SetInterestRateModelOwnerCheck();\n    error SetInterestRateModelFreshCheck();\n}\n"
    },
    "contracts/ExponentialNoError.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract ExponentialNoError {\n    uint constant expScale = 1e18;\n    uint constant doubleScale = 1e36;\n    uint constant halfExpScale = expScale / 2;\n    uint constant mantissaOne = expScale;\n\n    struct Exp {\n        uint mantissa;\n    }\n\n    struct Double {\n        uint mantissa;\n    }\n\n    /**\n     * @dev Truncates the given exp to a whole number value.\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n     */\n    function truncate(Exp memory exp) internal pure returns (uint) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return exp.mantissa / expScale;\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mul_ScalarTruncate(\n        Exp memory a,\n        uint scalar\n    ) internal pure returns (uint) {\n        Exp memory product = mul_(a, scalar);\n        return truncate(product);\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mul_ScalarTruncateAddUInt(\n        Exp memory a,\n        uint scalar,\n        uint addend\n    ) internal pure returns (uint) {\n        Exp memory product = mul_(a, scalar);\n        return add_(truncate(product), addend);\n    }\n\n    /**\n     * @dev Checks if first Exp is less than second Exp.\n     */\n    function lessThanExp(\n        Exp memory left,\n        Exp memory right\n    ) internal pure returns (bool) {\n        return left.mantissa < right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp <= right Exp.\n     */\n    function lessThanOrEqualExp(\n        Exp memory left,\n        Exp memory right\n    ) internal pure returns (bool) {\n        return left.mantissa <= right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp > right Exp.\n     */\n    function greaterThanExp(\n        Exp memory left,\n        Exp memory right\n    ) internal pure returns (bool) {\n        return left.mantissa > right.mantissa;\n    }\n\n    /**\n     * @dev returns true if Exp is exactly zero\n     */\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\n        return value.mantissa == 0;\n    }\n\n    function safe224(\n        uint n,\n        string memory errorMessage\n    ) internal pure returns (uint224) {\n        require(n < 2 ** 224, errorMessage);\n        return uint224(n);\n    }\n\n    function safe32(\n        uint n,\n        string memory errorMessage\n    ) internal pure returns (uint32) {\n        require(n < 2 ** 32, errorMessage);\n        return uint32(n);\n    }\n\n    function add_(\n        Exp memory a,\n        Exp memory b\n    ) internal pure returns (Exp memory) {\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(\n        Double memory a,\n        Double memory b\n    ) internal pure returns (Double memory) {\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(uint a, uint b) internal pure returns (uint) {\n        return a + b;\n    }\n\n    function sub_(\n        Exp memory a,\n        Exp memory b\n    ) internal pure returns (Exp memory) {\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(\n        Double memory a,\n        Double memory b\n    ) internal pure returns (Double memory) {\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(uint a, uint b) internal pure returns (uint) {\n        return a - b;\n    }\n\n    function mul_(\n        Exp memory a,\n        Exp memory b\n    ) internal pure returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n    }\n\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\n        return mul_(a, b.mantissa) / expScale;\n    }\n\n    function mul_(\n        Double memory a,\n        Double memory b\n    ) internal pure returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n    }\n\n    function mul_(\n        Double memory a,\n        uint b\n    ) internal pure returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\n        return mul_(a, b.mantissa) / doubleScale;\n    }\n\n    function mul_(uint a, uint b) internal pure returns (uint) {\n        return a * b;\n    }\n\n    function div_(\n        Exp memory a,\n        Exp memory b\n    ) internal pure returns (Exp memory) {\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n    }\n\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\n        return Exp({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\n        return div_(mul_(a, expScale), b.mantissa);\n    }\n\n    function div_(\n        Double memory a,\n        Double memory b\n    ) internal pure returns (Double memory) {\n        return\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n    }\n\n    function div_(\n        Double memory a,\n        uint b\n    ) internal pure returns (Double memory) {\n        return Double({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Double memory b) internal pure returns (uint) {\n        return div_(mul_(a, doubleScale), b.mantissa);\n    }\n\n    function div_(uint a, uint b) internal pure returns (uint) {\n        return a / b;\n    }\n\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\n    }\n}\n"
    },
    "contracts/GCKLAYWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ninterface IGCKLAY is IERC20 {\n    function sharesOf(address account) external view returns (uint256);\n\n    function totalShares() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n}\n\ncontract GCKLAYWrapper is Initializable, ERC20Upgradeable {\n    IGCKLAY public token;\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        IGCKLAY token_\n    ) public initializer {\n        string memory namePrefix = \"wrapped \";\n        string memory symbolPrefix = \"w\";\n        name_ = string.concat(namePrefix, name_);\n        symbol_ = string.concat(symbolPrefix, symbol_);\n\n        __ERC20_init(name_, symbol_);\n        token = token_;\n    }\n\n    function wrap(uint256 amount) external returns (uint256 wrappedAmount) {\n        require(amount > 0, \"amount > 0\");\n        wrappedAmount = getWrappedAmount(amount);\n\n        _mint(_msgSender(), wrappedAmount);\n\n        bool success = token.transferFrom(_msgSender(), address(this), amount);\n        require(success, \"wgcKlay:: transfer failed\");\n    }\n\n    function unwrap(uint256 amount) external returns (uint256 unwrappedAmount) {\n        require(amount > 0, \"amount > 0\");\n        unwrappedAmount = getUnwrappedAmount(amount);\n\n        _burn(_msgSender(), amount);\n\n        bool success = token.transfer(_msgSender(), unwrappedAmount);\n        require(success, \"wgcKlay:: transfer failed\");\n    }\n\n    function getWrappedAmount(\n        uint256 amount\n    ) public view returns (uint256 wrappedAmount) {\n        wrappedAmount = (amount * normarlizeShares()) / token.totalSupply();\n    }\n\n    function getUnwrappedAmount(\n        uint256 amount\n    ) public view returns (uint256 unwrappedAmount) {\n        unwrappedAmount = (token.totalSupply() * amount) / normarlizeShares();\n    }\n\n    function normarlizeShares() public view returns (uint256) {\n        return token.totalShares() / 1e27; // 1e45 -> 1e18\n    }\n}\n"
    },
    "contracts/Governance/AdminTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/governance/TimelockController.sol\";\n\ncontract AdminTimelock is TimelockController {\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors,\n        address admin\n    ) TimelockController(minDelay, proposers, executors, admin) {}\n}\n"
    },
    "contracts/Governance/MultiSigWallet.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract MultiSigWallet {\n    event Deposit(address indexed sender, uint amount, uint balance);\n    event Transfer(\n        address indexed sender,\n        address indexed receiver,\n        uint amount\n    );\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\n    event SubmitTransaction(\n        address indexed owner,\n        uint indexed txIndex,\n        address indexed to,\n        uint value,\n        bytes data\n    );\n    event SetNumConfirmationsRequired(uint indexed numConfirmationsRequired);\n    event Pause();\n    event Unpause();\n    event Recovery(address indexed oldAccount, address indexed newAccount);\n\n    mapping(address => bool) public isOwner;\n    mapping(uint256 => mapping(address => bool)) public isConfirmed;\n\n    address[] public owners;\n    Transaction[] public transactions;\n\n    uint256 public numConfirmationsRequired;\n    uint256 public emergencyWithdrawalTime;\n    bool paused;\n\n    struct Transaction {\n        address payable to;\n        uint value;\n        bytes data;\n        bool executed;\n        uint256 numConfirmations;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender] = true, \"Avaiable to Owners\");\n        _;\n    }\n    modifier txExists(uint256 _txIndex) {\n        require(_txIndex < transactions.length, \"Tx does not exist\");\n        _;\n    }\n    modifier notConfirmed(uint256 _txIndex) {\n        require(!isConfirmed[_txIndex][msg.sender], \"Tx already comfirmed\");\n        _;\n    }\n    modifier notExecuted(uint256 _txIndex) {\n        require(!transactions[_txIndex].executed, \"Tx already executed\");\n        _;\n    }\n    modifier whenNotPaused() {\n        require(!paused, \"Wallet is paused\");\n        _;\n    }\n\n    /**\n     * constructor function is used to create a new instance of the contract and set the initial owners and number of required confirmations.\n     *\n     * @param _owners: An array of addresses representing the initial owners of the wallet\n     * @param _numConfirmationsRequired: The number of required confirmations for a transaction to be executed\n     */\n    constructor(address[] memory _owners, uint256 _numConfirmationsRequired) {\n        require(_owners.length > 0, \"Invalid number of member\");\n        require(\n            _numConfirmationsRequired > 0 &&\n                _numConfirmationsRequired < _owners.length,\n            \"invalid number of required confirmations\"\n        );\n\n        for (uint256 i; i < _owners.length; i++) {\n            address owner = _owners[i];\n            require(owner != address(0), \"Invalid Address\");\n            require(!isOwner[owner], \"owner is not unique\");\n\n            isOwner[owner] = true;\n            owners.push(owner);\n        }\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    /**\n     * addOwner: This function allows an existing owner to add a new owner to the wallet.\n     *\n     * @param _account: The address of the new owner\n     *\n     * Requirements\n     *  The caller must be an existing owner of the wallet\n     *  The new owner's address must not already be an owner of the wallet\n     */\n    function addOwner(address _account) external onlyOwner {\n        require(!isOwner[_account], \"Address already exist\");\n        require(_account != address(0), \"Invalid Address\");\n        isOwner[_account] = true;\n        owners.push(_account);\n        // numConfirmations is incremented when new members are added.\n        numConfirmationsRequired++;\n    }\n\n    /**\n     * removeOwner: This function allows an existing owner to remove an existing owner from the wallet.\n     *\n     * @param _account: The address of the owner to remove\n     *\n     * Requirements\n     *  The caller must be an existing owner of the wallet\n     *  The owner to remove must be an existing owner of the wallet\n     *  The wallet must have more than one owner\n     */\n    function removeOwner(address _account) external onlyOwner {\n        bool findMember;\n        uint256 indexedMember;\n        require(owners.length > 1, \"Cannot remove all owner of the wallet\");\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (_account == owners[i]) {\n                findMember = true;\n                indexedMember = i;\n                break;\n            }\n        }\n        require(findMember, \"Not an owner of the wallet\");\n        isOwner[owners[indexedMember]] = false;\n        owners[indexedMember] = owners[owners.length - 1];\n        owners.pop();\n        // numConfirmations is decremented when new members are removed.\n        numConfirmationsRequired--;\n    }\n\n    /**\n     * submitTransaction: This function allows an owner to submit a transaction to be executed by the wallet.\n     *\n     * @param _to: The address of the recipient of the transaction\n     * @param _data: Additional data to include in the transaction\n     *\n     * Requirements\n     *  The caller must be an owner of the wallet\n     *  The wallet must not be paused\n     */\n    function submitTransaction(\n        address payable _to,\n        bytes memory _data\n    ) public payable whenNotPaused onlyOwner {\n        uint txIndex = (transactions.length - 1);\n        require(msg.value > 0, \"insufficient balance\");\n\n        transactions.push(\n            Transaction({\n                to: _to,\n                value: msg.value,\n                data: _data,\n                executed: false,\n                numConfirmations: 0\n            })\n        );\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, msg.value, _data);\n    }\n\n    /**\n     * confirmTransaction: This function allows an owner to confirm a transaction.\n     * @param _txIndex: The index of the transaction to confirm\n     *\n     * Requirements\n     *  The caller must be an owner of the wallet\n     *  The transaction must not already have been confirmed by the caller\n     *  The transaction must not already have been executed.\n     *  The transaction must exist\n     *  The wallet must not be paused\n     */\n    function confirmTransaction(\n        uint _txIndex\n    )\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n        notConfirmed(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n        transaction.numConfirmations += 1;\n        isConfirmed[_txIndex][msg.sender] = true;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n    }\n\n    /**\n     * executeTransaction: This function allows an owner to execute a confirmed transaction.\n     * @param _txIndex: The index of the transaction to confirm\n     *\n     * Requirements\n     *  The caller must be an owner of the wallet\n     *  The transaction must not already have been executed\n     *  The transaction must exist\n     *  The wallet must not be paused\n     *  The numConfirmations greater or equal to numConfirmationsRequired\n     */\n    function executeTransaction(\n        uint _txIndex\n    ) public onlyOwner txExists(_txIndex) whenNotPaused notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(\n            transaction.numConfirmations >= numConfirmationsRequired,\n            \"cannot execute tx\"\n        );\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call{value: transaction.value}(\n            transaction.data\n        );\n        require(success, \"tx failed\");\n\n        emit ExecuteTransaction(msg.sender, _txIndex);\n        emit Transfer(msg.sender, transaction.to, transaction.value);\n    }\n\n    /**\n     * revokeConfirmation: This function allows an owner to revoke\n     *  their confirmation for a transaction.\n     *  If a transaction does not have enough confirmations after one is revoked,\n     *  it cannot be executed.\n     *\n     * @param _txIndex: The index of the transaction to confirm\n     *\n     * Requirements\n     *  The caller must be an owner of the wallet\n     *  The transaction must not already have been confirmed by the caller\n     *  The transaction must not already have been executed.\n     *  The transaction must exist\n     */\n    function revokeConfirmation(\n        uint _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\n\n        transaction.numConfirmations -= 1;\n        isConfirmed[_txIndex][msg.sender] = false;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    // This function allows an owner to pause the wallet\n    function pause() external onlyOwner {\n        require(!paused, \"Wallet is already paused\");\n        paused = true;\n        emit Pause();\n    }\n\n    // This function allows an owner to unpause the wallet\n    function unpause() external onlyOwner {\n        require(paused, \"Wallet is not paused\");\n        paused = false;\n        emit Unpause();\n    }\n\n    function setEmergencyWithdrawalTime() public onlyOwner {\n        emergencyWithdrawalTime = block.timestamp + 24 hours;\n    }\n\n    // The emergencyWithdrawal function in this smart contract allows an owner of the contract\n    // to perform a withdrawal of all the funds stored in the contract in case of an emergency.\n\n    // The user has to setEmergencyWithdrawalTime which will automatically\n    // add 24 hours to the current block.timestamp,\n    // then the owner has to wait for the time to elapse.\n    function emergencyWithdrawal(address payable _to) external {\n        require(\n            isOwner[msg.sender],\n            \"Only an owner can perform an emergency withdrawal\"\n        );\n        require(address(this).balance > 0, \"Insufficient Balance\");\n\n        require(\n            block.timestamp >= emergencyWithdrawalTime,\n            \"Emergency withdrawal period has not started\"\n        );\n        _to.transfer(address(this).balance);\n    }\n\n    function setNumConfirmationsRequired(\n        uint256 _numConfirmationsRequired\n    ) external onlyOwner {\n        require(\n            _numConfirmationsRequired > 0 &&\n                _numConfirmationsRequired <= owners.length,\n            \"Invalid number of required confirmations\"\n        );\n        numConfirmationsRequired = _numConfirmationsRequired;\n\n        emit SetNumConfirmationsRequired(_numConfirmationsRequired);\n    }\n\n    function changeOwner(\n        address _oldOwner,\n        address _newOwner\n    ) external onlyOwner {\n        // Check that the old owner is an existing owner of the wallet\n        require(isOwner[_oldOwner], \"Old owner is not an owner of the wallet\");\n\n        // Check that the new owner is not an existing owner of the wallet\n        require(\n            !isOwner[_newOwner],\n            \"New owner is already an owner of the wallet\"\n        );\n\n        // Check that the new owner is not the zero address\n        require(_newOwner != address(0), \"Invalid new owner address\");\n\n        // Update the mapping to reflect the change in ownership\n        isOwner[_oldOwner] = false;\n        isOwner[_newOwner] = true;\n\n        // Update the owners array to reflect the change in ownership\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (owners[i] == _oldOwner) {\n                owners[i] = _newOwner;\n                break;\n            }\n        }\n\n        emit Recovery(_oldOwner, _newOwner);\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return (address(this)).balance;\n    }\n\n    function getOwners() public view returns (address[] memory) {\n        return owners;\n    }\n\n    function getTransactionCount() public view returns (uint) {\n        return transactions.length;\n    }\n\n    function getTransaction(\n        uint _txIndex\n    )\n        public\n        view\n        returns (\n            address to,\n            uint value,\n            bytes memory data,\n            bool executed,\n            uint256 numConfirmations\n        )\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.value,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations\n        );\n    }\n\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n}\n"
    },
    "contracts/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\n/**\n * @title InterestRateModel Interface\n */\nabstract contract InterestRateModel {\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint cash,\n        uint borrows,\n        uint reserves\n    ) external view virtual returns (uint);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint cash,\n        uint borrows,\n        uint reserves,\n        uint reserveFactorMantissa\n    ) external view virtual returns (uint);\n}\n"
    },
    "contracts/JumpRateModelV4.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./InterestRateModel.sol\";\nimport \"./SafeMath.sol\";\nimport \"./Ownership/Ownable.sol\";\n\n/**\n * @title Compound's JumpRateModel Contract V3\n * @author Compound (modified by Dharma Labs)\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\n * @notice Version 3 includes Ownable and have updatable blocksPerYear.\n * @notice Version 4 moves blocksPerYear to the constructor.\n */\ncontract JumpRateModelV4 is InterestRateModel, Ownable {\n    using SafeMath for uint256;\n\n    event NewInterestParams(\n        uint256 baseRatePerBlock,\n        uint256 multiplierPerBlock,\n        uint256 jumpMultiplierPerBlock,\n        uint256 kink\n    );\n\n    /**\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\n     */\n    uint256 public blocksPerYear;\n\n    /**\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\n     */\n    uint256 public multiplierPerBlock;\n\n    /**\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\n     */\n    uint256 public baseRatePerBlock;\n\n    /**\n     * @notice The multiplierPerBlock after hitting a specified utilization point\n     */\n    uint256 public jumpMultiplierPerBlock;\n\n    /**\n     * @notice The utilization point at which the jump multiplier is applied\n     */\n    uint256 public kink;\n\n    /**\n     * @notice A name for user-friendliness, e.g. WBTC\n     */\n    string public name;\n\n    /**\n     * @notice Construct an interest rate model\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     * @param owner_ Sets the owner of the contract to someone other than msgSender\n     * @param name_ User-friendly name for the new contract\n     */\n    constructor(\n        uint256 blocksPerYear_,\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_,\n        address owner_,\n        string memory name_\n    ) {\n        blocksPerYear = blocksPerYear_;\n        name = name_;\n        _transferOwnership(owner_);\n        updateJumpRateModelInternal(\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_\n        );\n    }\n\n    /**\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     */\n    function updateJumpRateModel(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_\n    ) external onlyOwner {\n        updateJumpRateModelInternal(\n            baseRatePerYear,\n            multiplierPerYear,\n            jumpMultiplierPerYear,\n            kink_\n        );\n    }\n\n    /**\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market (currently unused)\n     * @return The utilization rate as a mantissa between [0, 1e18]\n     */\n    function utilizationRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public pure returns (uint256) {\n        // Utilization rate is 0 when there are no borrows\n        if (borrows == 0) {\n            return 0;\n        }\n\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\n    }\n\n    /**\n     * @notice Updates the blocksPerYear in order to make interest calculations simpler\n     * @param blocksPerYear_ The new estimated eth blocks per year.\n     */\n    function updateBlocksPerYear(uint256 blocksPerYear_) external onlyOwner {\n        blocksPerYear = blocksPerYear_;\n    }\n\n    /**\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) public view override returns (uint256) {\n        uint256 util = utilizationRate(cash, borrows, reserves);\n\n        if (util <= kink) {\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\n        } else {\n            uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(\n                baseRatePerBlock\n            );\n            uint256 excessUtil = util.sub(kink);\n            return\n                excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(\n                    normalRate\n                );\n        }\n    }\n\n    /**\n     * @notice Calculates the current supply rate per block\n     * @param cash The amount of cash in the market\n     * @param borrows The amount of borrows in the market\n     * @param reserves The amount of reserves in the market\n     * @param reserveFactorMantissa The current reserve factor for the market\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) public view override returns (uint256) {\n        uint256 oneMinusReserveFactor = uint256(1e18).sub(\n            reserveFactorMantissa\n        );\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\n        uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\n        return\n            utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\n    }\n\n    /**\n     * @notice Internal function to update the parameters of the interest rate model\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\n     * @param kink_ The utilization point at which the jump multiplier is applied\n     */\n    function updateJumpRateModelInternal(\n        uint256 baseRatePerYear,\n        uint256 multiplierPerYear,\n        uint256 jumpMultiplierPerYear,\n        uint256 kink_\n    ) internal {\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(\n            blocksPerYear.mul(kink_)\n        );\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\n        kink = kink_;\n\n        emit NewInterestParams(\n            baseRatePerBlock,\n            multiplierPerBlock,\n            jumpMultiplierPerBlock,\n            kink\n        );\n    }\n}\n"
    },
    "contracts/Lens/BasicLens.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"../EIP20Interface.sol\";\nimport \"../PriceOracle.sol\";\n\nimport \"../RewardDistributor.sol\";\nimport \"../CToken.sol\";\nimport \"../Comptroller.sol\";\n\nimport \"hardhat/console.sol\";\n\ninterface ComptrollerLensInterface {\n    function claimComp(address) external;\n\n    function rewardDistributor() external view returns (address);\n}\n\ncontract BasicLens {\n    constructor() {\n        address rds = 0x9dD10b2269709F7369dfBF7bbAe2AD3aA53b16C7;\n        address sbp = 0x2F471205AC647Dd11d3de04dB3C9A7FEDBAA66d6;\n        address user = 0x5B78ace197872A4C90bb137D0643aA3755DBC1A0;\n        // const\n        uint256 beforeBalances = EIP20Interface(sbp).balanceOf(user);\n        uint256 rdsBal = EIP20Interface(sbp).balanceOf(rds);\n        console.log(\"beforeBalances: %s\", beforeBalances);\n        console.log(\"rdsBal: %s\", rdsBal);\n\n        address[] memory holders = new address[](1);\n        holders[0] = user;\n        uint256 tmp = rewardsAccruedSimulate(\n            RewardDistributor(rds),\n            user,\n            holders,\n            sbp\n        );\n        console.log(\"tmp: %s\", tmp);\n        RewardDistributor(rds).claim(holders);\n        uint256 afterBalances = EIP20Interface(sbp).balanceOf(user);\n        console.log(\"afterBalances: %s\", afterBalances);\n    }\n\n    function rewardsAccruedSimulate(\n        RewardDistributor rewardDistributor,\n        address account,\n        address[] memory holders,\n        address rewardToken\n    ) public returns (uint256) {\n        uint256 beforeBalances = EIP20Interface(rewardToken).balanceOf(account);\n\n        rewardDistributor.claim(holders);\n\n        uint256 afterBalances = EIP20Interface(rewardToken).balanceOf(account);\n\n        return afterBalances - beforeBalances;\n    }\n\n    function rewardsAccrued(\n        ComptrollerLensInterface comptroller,\n        address account\n    )\n        external\n        returns (address[] memory rewardTokens, uint256[] memory accrued)\n    {\n        address externalRewardDistributor = comptroller.rewardDistributor();\n\n        rewardTokens = RewardDistributor(externalRewardDistributor)\n            .getRewardTokens();\n\n        uint256[] memory beforeBalances = getBalancesInternal(\n            rewardTokens,\n            account\n        );\n\n        comptroller.claimComp(account);\n\n        uint256[] memory afterBalances = getBalancesInternal(\n            rewardTokens,\n            account\n        );\n\n        accrued = new uint256[](rewardTokens.length);\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            accrued[i] = afterBalances[i] - beforeBalances[i];\n        }\n    }\n\n    function getBalancesInternal(\n        address[] memory tokens,\n        address account\n    ) internal view returns (uint256[] memory balances) {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; i++) {\n            balances[i] = EIP20Interface(tokens[i]).balanceOf(account);\n        }\n    }\n}\n"
    },
    "contracts/Lens/ProtocolLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.16;\n\nimport \"./BasicLens.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../CErc20.sol\";\nimport \"../JumpRateModelV4.sol\";\n\ncontract ProtocolLens is BasicLens {\n    string public constant mainSymbol = \"ETH\";\n    string public constant mainCTokenSymbol = \"sbETH\";\n\n    struct CTokenInfo {\n        address underlyingAssetAddress;\n        uint256 underlyingDecimals;\n        address contractAddress;\n        uint256 poolBalance;\n        string underlyingSymbol;\n        string symbol;\n        uint8 decimals;\n        bool isNative;\n        uint256 supplyRatePerBlock;\n        uint256 borrowRatePerBlock;\n        uint256 totalSupply;\n        uint256 totalBorrows;\n        uint256 collateralFactor;\n        uint256 oraclePrice;\n        uint256 totalReserves;\n        uint256 cash;\n        uint256 reserveFactorMantissa;\n        uint256 exchangeRateCurrent;\n        uint256 multiplierPerBlock;\n        uint256 kink;\n        uint256 baseRatePerBlock;\n        uint256 jumpMultiplierPerBlock;\n        bool isMintPaused;\n        bool isBorrowPaused;\n        bool isSeizePaused;\n        bool isTransferPaused;\n        uint256 borrowCap;\n        uint256 supplyCap;\n    }\n\n    // returns CTokenInfo\n    // call using callStatic to avoid gas fee\n    function getCTokenInfo(\n        CToken cToken,\n        Comptroller comptroller\n    ) public returns (CTokenInfo memory) {\n        address underlyingAssetAddress;\n        uint256 underlyingDecimals;\n        bool isNative = compareStrings(cToken.symbol(), mainCTokenSymbol);\n        CTokenInfo memory cTokenInfo;\n\n        if (isNative) {\n            underlyingAssetAddress = address(0);\n            underlyingDecimals = 18;\n            cTokenInfo.underlyingSymbol = mainSymbol;\n        } else {\n            CErc20 cErc20 = CErc20(address(cToken));\n            underlyingAssetAddress = cErc20.underlying();\n            underlyingDecimals = EIP20Interface(cErc20.underlying()).decimals();\n            cTokenInfo.underlyingSymbol = EIP20Interface(cErc20.underlying())\n                .symbol();\n        }\n\n        cTokenInfo.isNative = isNative;\n\n        address contractAddress = address(cToken);\n\n        cTokenInfo.underlyingAssetAddress = underlyingAssetAddress;\n        cTokenInfo.underlyingDecimals = underlyingDecimals;\n        cTokenInfo.contractAddress = contractAddress;\n        cTokenInfo.poolBalance = isNative\n            ? contractAddress.balance\n            : IERC20(underlyingAssetAddress).balanceOf(contractAddress);\n        cTokenInfo.symbol = cToken.symbol();\n        cTokenInfo.decimals = cToken.decimals();\n        cTokenInfo.supplyRatePerBlock = cToken.supplyRatePerBlock();\n        cTokenInfo.borrowRatePerBlock = cToken.borrowRatePerBlock();\n        cTokenInfo.totalSupply = cToken.totalSupply();\n        cTokenInfo.totalBorrows = cToken.totalBorrows();\n        (, cTokenInfo.collateralFactor, ) = comptroller.markets(\n            contractAddress\n        );\n\n        cTokenInfo.oraclePrice = getOraclePrice(cToken, comptroller);\n\n        cTokenInfo.totalReserves = cToken.totalReserves();\n        cTokenInfo.cash = cToken.getCash();\n        cTokenInfo.reserveFactorMantissa = cToken.reserveFactorMantissa();\n        cTokenInfo.exchangeRateCurrent = cToken.exchangeRateCurrent();\n\n        JumpRateModelV4 interestRateModel = JumpRateModelV4(\n            address(cToken.interestRateModel())\n        );\n\n        cTokenInfo.multiplierPerBlock = interestRateModel.multiplierPerBlock();\n        cTokenInfo.kink = interestRateModel.kink();\n        cTokenInfo.baseRatePerBlock = interestRateModel.baseRatePerBlock();\n        cTokenInfo.jumpMultiplierPerBlock = interestRateModel\n            .jumpMultiplierPerBlock();\n\n        cTokenInfo.isMintPaused = comptroller.mintGuardianPaused(\n            contractAddress\n        );\n        cTokenInfo.isBorrowPaused = comptroller.borrowGuardianPaused(\n            contractAddress\n        );\n        cTokenInfo.isSeizePaused = comptroller.seizeGuardianPaused();\n        cTokenInfo.isTransferPaused = comptroller.transferGuardianPaused();\n\n        cTokenInfo.borrowCap = comptroller.borrowCaps(contractAddress);\n        cTokenInfo.supplyCap = comptroller.supplyCaps(contractAddress);\n        return cTokenInfo;\n    }\n\n    struct AccountInfo {\n        uint256 mySuppliedBalance;\n        uint256 myBorrowedBalance;\n        uint256 myCTokenBalance;\n        // uint256 mySupplyPrincipalBalance;\n        // uint256 myBorrowPrincipalBalance;\n        uint256 myRealTokenBalance;\n        // uint256 incentiveTokenSupplierIndex;\n        // uint256 incentiveTokenBorrowerIndex;\n        uint256 allowance;\n    }\n\n    // returns AccountInfo\n    function getAccountInfo(\n        CToken cToken,\n        address payable account\n    ) public returns (AccountInfo memory) {\n        AccountInfo memory accountInfo;\n\n        address underlyingAssetAddress;\n        address contractAddress = address(cToken);\n\n        bool isNative = compareStrings(cToken.symbol(), mainCTokenSymbol);\n        if (isNative) {\n            underlyingAssetAddress = address(0);\n            accountInfo.allowance = type(uint256).max;\n        } else {\n            CErc20 cErc20 = CErc20(address(cToken));\n            underlyingAssetAddress = cErc20.underlying();\n            accountInfo.allowance = EIP20Interface(underlyingAssetAddress)\n                .allowance(account, contractAddress);\n        }\n\n        accountInfo.mySuppliedBalance = cToken.balanceOfUnderlying(account);\n        accountInfo.myBorrowedBalance = cToken.borrowBalanceCurrent(account);\n        accountInfo.myCTokenBalance = cToken.balanceOf(account);\n        // accountInfo.mySupplyPrincipalBalance = cToken.supplyPrincipal(account);\n        // accountInfo.myBorrowPrincipalBalance = cToken.borrowPrincipal(account);\n        accountInfo.myRealTokenBalance = isNative\n            ? account.balance\n            : IERC20(underlyingAssetAddress).balanceOf(account);\n        // accountInfo.incentiveTokenSupplierIndex = controller\n        //     .incentiveTokenSupplierIndex(contractAddress, account);\n        // accountInfo.incentiveTokenBorrowerIndex = controller\n        //     .incentiveTokenBorrowerIndex(contractAddress, account);\n\n        return accountInfo;\n    }\n\n    // get cToken's underlying price\n    function getOraclePrice(\n        CToken cToken,\n        Comptroller comptroller\n    ) public view returns (uint256) {\n        PriceOracle oracle = comptroller.oracle();\n\n        return oracle.getPrice(cToken);\n    }\n\n    struct CTokenMetaData {\n        CTokenInfo cTokenInfo;\n        AccountInfo accountInfo;\n    }\n\n    function cTokenMetaDataList(\n        Comptroller comptroller\n    ) external returns (CTokenMetaData[] memory) {\n        CToken[] memory allMarkets = comptroller.getAllMarkets();\n        CTokenMetaData[] memory result = new CTokenMetaData[](\n            allMarkets.length\n        );\n\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            result[i].cTokenInfo = getCTokenInfo(allMarkets[i], comptroller);\n        }\n        return result;\n    }\n\n    function cTokenMetaDataListAuth(\n        address payable account,\n        Comptroller comptroller\n    ) external returns (CTokenMetaData[] memory) {\n        CToken[] memory allMarkets = comptroller.getAllMarkets();\n        CTokenMetaData[] memory result = new CTokenMetaData[](\n            allMarkets.length\n        );\n\n        for (uint256 i = 0; i < allMarkets.length; i++) {\n            result[i].cTokenInfo = getCTokenInfo(allMarkets[i], comptroller);\n            result[i].accountInfo = getAccountInfo(allMarkets[i], account);\n        }\n        return result;\n    }\n\n    /* internal functions  */\n    function compareStrings(\n        string memory a,\n        string memory b\n    ) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) ==\n            keccak256(abi.encodePacked((b))));\n    }\n}\n"
    },
    "contracts/Liquidator/IWeswapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.16;\n\ninterface IWeswapRouter {\n    event Receive(address indexed who, uint256 value);\n\n    function factory() external view returns (address);\n\n    function WWEMIX() external view returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityWEMIX(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountWEMIXMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (uint256 amountToken, uint256 amountWEMIX, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityWEMIX(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountWEMIXMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountWEMIX);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityWEMIXWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountWEMIXMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountWEMIX);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactWEMIXForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactWEMIX(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForWEMIX(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapWEMIXForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n    event AddLiquidityReturn(\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n    event RemoveLiquidityReturn(uint256 amountA, uint256 amountB);\n}\n"
    },
    "contracts/Liquidator/Liquidator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {CEther} from \"../CEther.sol\";\nimport {IERC20} from \"../Swap/IERC20.sol\";\n\nabstract contract Liquidator {\n    address payable public cether;\n\n    address public owner;\n\n    constructor(address payable _cether) {\n        cether = _cether;\n        owner = msg.sender;\n    }\n\n    function swapToBorrowingAsset(address from, address to) public virtual {}\n\n    function liquidate(\n        address borrower,\n        uint256 repayAmount,\n        address cTokenCollateral\n    ) external payable virtual;\n\n    function claim(address token) external {\n        require(msg.sender == owner, \"only owner can claim\");\n        _claim(token);\n    }\n\n    function _claim(address token) internal {\n        if (token == address(0)) {\n            (bool suc, ) = payable(owner).call{value: address(this).balance}(\n                \"\"\n            );\n            if (!suc) {\n                CEther(cether).mint{value: address(this).balance}();\n            }\n        } else {\n            uint256 bal = IERC20(token).balanceOf(address(this));\n            require(token.code.length > 0, \"SafeERC20: invalid token\");\n            (bool success, bytes memory data) = token.call(\n                abi.encodeWithSelector(IERC20.transfer.selector, owner, bal)\n            );\n            require(\n                success && (data.length == 0 || abi.decode(data, (bool))),\n                \"SafeERC20: transfer failed\"\n            );\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/Liquidator/LiquidatorWemix.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {Liquidator} from \"./Liquidator.sol\";\nimport {IWeswapRouter} from \"./IWeswapRouter.sol\";\nimport {IERC20} from \"../Swap/IERC20.sol\";\n\nimport \"hardhat/console.sol\";\n\ninterface IRedeem {\n    function redeem(uint256 redeemTokens) external returns (uint256);\n}\n\ninterface ICether {\n    function liquidateBorrow(\n        address borrower,\n        address cTokenCollateral\n    ) external payable;\n}\n\ncontract LiquidatorWemix is Liquidator {\n    IWeswapRouter public router =\n        IWeswapRouter(0x80a5A916FB355A8758f0a3e47891dc288DAC2665);\n\n    address public weth = 0x7D72b22a74A216Af4a002a1095C8C707d6eC1C5f;\n    address public stwemix = 0x9B377bd7Db130E8bD2f3641E0E161cB613DA93De;\n\n    constructor(address payable _cether) Liquidator(_cether) {\n        IERC20(stwemix).approve(address(router), type(uint256).max);\n    }\n\n    function swapToBorrowingAsset(address from, address to) public override {\n        if (from != address(0)) {\n            uint256 bal = IERC20(from).balanceOf(address(this));\n            if (bal > 0) {\n                address[] memory path = new address[](2);\n                path[0] = from;\n                path[1] = to;\n\n                console.log(\"try swap from\", from);\n                console.log(\"to\", to);\n                console.log(\"amount\", bal);\n\n                router.swapExactTokensForWEMIX(\n                    bal,\n                    1,\n                    path,\n                    address(this),\n                    block.timestamp + 100\n                );\n            }\n        }\n    }\n\n    function unwrap(address collateralCToken) internal {\n        uint256 bal = IERC20(collateralCToken).balanceOf(address(this));\n        if (bal > 0) {\n            IRedeem(collateralCToken).redeem(bal);\n        }\n    }\n\n    function liquidate(\n        address borrower,\n        uint256 repayAmount,\n        address cTokenCollateral\n    ) external payable override {\n        swapToBorrowingAsset(stwemix, weth);\n\n        console.log(\"balance\", address(this).balance);\n\n        uint256 inputBal = address(this).balance > repayAmount\n            ? repayAmount\n            : address(this).balance;\n        console.log(\"try to liquidate\", inputBal);\n        ICether(cether).liquidateBorrow{value: inputBal}(\n            borrower,\n            cTokenCollateral\n        );\n\n        console.log(\"left value\", address(this).balance);\n        console.log(\n            \"left cToken\",\n            IERC20(cTokenCollateral).balanceOf(address(this))\n        );\n\n        unwrap(cTokenCollateral);\n\n        console.log(\"left stwemix\", IERC20(stwemix).balanceOf(address(this)));\n\n        swapToBorrowingAsset(stwemix, weth);\n\n        console.log(\"last value\", address(this).balance);\n        console.log(owner);\n        _claim(address(0));\n\n        console.log(\"after claim, left value\", address(this).balance);\n    }\n}\n"
    },
    "contracts/Lockdrop/InterfacesLockdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWemixLockdropFactory {\n    function lockdropStartTime() external view returns (uint256);\n    function lockdropFinishTime() external view returns (uint256);\n    function CWemix() external view returns (IWemixMint);\n    function dev() external view returns (address);\n    function referralPool() external view returns (address);\n    function shoebillPoint() external view returns (address);\n    function commitReferralReward(address _user, uint256 _lockAmount) external;\n}\n\ninterface IWemixMint is IERC20 {\n    function mint() external payable;\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n\n    // function balanceOf(address owner) external view returns (uint);\n    function balanceOfUnderlying(address owner) external returns (uint);\n}\n\ninterface IComptrollerClaim {\n    function claimComp(address holder) external;\n}\n"
    },
    "contracts/Lockdrop/ReferralPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./InterfacesLockdrop.sol\";\n\ncontract ReferralPool {\n    address public dev;\n    address public factory;\n\n    struct ReferralInfo {\n        address referrer;\n        uint256 referralRewardStored;\n        uint256 totalRefereeLockAmount;\n        uint256 totalRefereeCount;\n        address[] referees;\n    }\n\n    uint256 public devPoolStored;\n    uint256 public referralRatio = 5000; // 50%\n    mapping(address => ReferralInfo) public referralInfo;\n\n    bool public claimPaused = true;\n\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"only factory\");\n        _;\n    }\n\n    constructor(address _dev) {\n        dev = _dev;\n        factory = msg.sender;\n    }\n\n    function registerReferral(\n        address _user,\n        address _referrer,\n        uint256 _lockAmount\n    ) external onlyFactory {\n        ReferralInfo storage user = referralInfo[_user];\n\n        // already registered  or no referrer\n        if (user.referrer != address(0) || _referrer == address(0)) {\n            return;\n        }\n\n        user.referrer = _referrer;\n\n        referralInfo[_referrer].totalRefereeCount += 1;\n        referralInfo[_referrer].referees.push(_user);\n\n        referralInfo[_referrer].totalRefereeLockAmount += _lockAmount;\n    }\n\n    function commitReferralReward(\n        address _user,\n        uint256 _lockAmount\n    ) external onlyFactory {\n        if (_user == address(0)) {\n            devPoolStored += _lockAmount;\n        } else {\n            ReferralInfo storage user = referralInfo[_user];\n\n            if (user.referrer == address(0)) {\n                devPoolStored += _lockAmount;\n            } else {\n                ReferralInfo storage referrer = referralInfo[user.referrer];\n                referrer.referralRewardStored += _lockAmount;\n            }\n        }\n    }\n\n    function claimReferralReward() external {\n        require(!claimPaused, \"claim paused\");\n        ReferralInfo storage user = referralInfo[msg.sender];\n\n        uint256 amount = user.referralRewardStored;\n        user.referralRewardStored = 0;\n\n        if (amount > 0) {\n            uint256 referralReward = (amount * referralRatio) / 10000;\n            uint256 devReward = amount - referralReward;\n\n            if (referralReward > 0) {\n                IWemixLockdropFactory(factory).CWemix().transfer(\n                    user.referrer,\n                    referralReward\n                );\n            }\n\n            if (devReward > 0) {\n                IWemixLockdropFactory(factory).CWemix().transfer(\n                    dev,\n                    devReward\n                );\n            }\n        }\n    }\n\n    function claimDevPool() external {\n        require(!claimPaused, \"claim paused\");\n        require(msg.sender == dev, \"only dev\");\n\n        uint256 amount = devPoolStored;\n        devPoolStored = 0;\n\n        if (amount > 0) {\n            IWemixLockdropFactory(factory).CWemix().transfer(dev, amount);\n        }\n    }\n\n    function setClaimPaused(bool _claimPaused) external {\n        require(msg.sender == dev, \"only dev\");\n        claimPaused = _claimPaused;\n    }\n\n    function setReferralRatio(uint256 _referralRatio) external {\n        require(msg.sender == dev, \"only dev\");\n        referralRatio = _referralRatio;\n    }\n\n    function setDev(address _dev) external {\n        require(msg.sender == dev, \"only dev\");\n        dev = _dev;\n    }\n}\n"
    },
    "contracts/Lockdrop/WemixLockdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./InterfacesLockdrop.sol\";\n\ncontract WemixLockdrop {\n    IWemixLockdropFactory public factory;\n\n    address public immutable maker;\n\n    uint256 public depositAmount;\n\n    constructor(address _maker) {\n        factory = IWemixLockdropFactory(msg.sender);\n        maker = _maker;\n    }\n\n    modifier onlyFactory() {\n        require(msg.sender == address(factory), \"only factory\");\n        _;\n    }\n\n    function lock() external payable onlyFactory {\n        IWemixMint cWemix = factory.CWemix();\n\n        cWemix.mint{value: msg.value}();\n\n        depositAmount += msg.value;\n    }\n\n    function unlock(uint256 _amount) external onlyFactory {\n        IWemixMint cWemix = factory.CWemix();\n        cWemix.redeemUnderlying(_amount);\n\n        (bool suc, ) = maker.call{value: _amount}(\"\");\n        require(suc, \"transfer failed\");\n\n        uint256 cYield = cWemix.balanceOf(address(this));\n\n        cWemix.transfer(factory.referralPool(), cYield);\n        factory.commitReferralReward(maker, cYield);\n    }\n\n    function claimComptrollerReward(address _comptroller) external {\n        require(\n            msg.sender == address(factory) || msg.sender == maker,\n            \"invalid sender\"\n        );\n\n        IComptrollerClaim(_comptroller).claimComp(address(this));\n\n        address sbp = factory.shoebillPoint();\n        IERC20(sbp).transfer(maker, IERC20(sbp).balanceOf(address(this)));\n    }\n\n    function recoverToken(address _token, uint256 _amount) external {\n        require(msg.sender == factory.dev(), \"invalid sender\");\n\n        if (_token == address(0)) {\n            (bool suc, ) = factory.dev().call{value: _amount}(\"\");\n            require(suc, \"transfer failed\");\n        } else {\n            IERC20(_token).transfer(factory.dev(), _amount);\n        }\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/Lockdrop/WemixLockdropFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./WemixLockdrop.sol\";\nimport \"./ReferralPool.sol\";\n\ncontract WemixLockdropFactory is Initializable {\n    IWemixMint public CWemix;\n\n    uint256 public lockdropStartTime;\n    uint256 public lockdropFinishTime;\n\n    uint256 public totalDeposit;\n    uint256 public totalDepositCap;\n    uint256 public individualDepositCap;\n\n    address public dev;\n\n    uint256 public lockState;\n\n    address public referralPool;\n    address public shoebillPoint;\n\n    struct UserInfo {\n        WemixLockdrop lockdropInstance;\n        uint256 depositAmount;\n    }\n\n    mapping(address => UserInfo) public userInfo;\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    modifier lock() {\n        require(lockState == 1, \"lock is not locked\");\n        lockState = 2;\n        _;\n        lockState = 1;\n    }\n\n    // token Reward => lock user\n    // lockdrop reward => lock user\n    // supply apy => distribute between refferer and lock user\n    function initialize(\n        IWemixMint _cWemix,\n        uint256 _lockdropStartTime,\n        uint256 _lockdropFinishTime,\n        uint256 _totalDepositCap,\n        uint256 _individualDepositCap,\n        address _shoebillPoint\n    ) external initializer {\n        CWemix = _cWemix;\n        lockdropStartTime = _lockdropStartTime;\n        lockdropFinishTime = _lockdropFinishTime;\n\n        totalDepositCap = _totalDepositCap;\n        individualDepositCap = _individualDepositCap;\n\n        referralPool = address(new ReferralPool(msg.sender));\n        shoebillPoint = _shoebillPoint;\n\n        dev = msg.sender;\n\n        lockState = 1;\n    }\n\n    function deposit(address _referrer) external payable lock {\n        require(\n            block.timestamp >= lockdropStartTime,\n            \"lockdrop is not started\"\n        );\n        require(block.timestamp < lockdropFinishTime, \"lockdrop is finished\");\n        require(msg.value > 0, \"invalid amount\");\n        require(_referrer != msg.sender, \"self referrer\");\n\n        UserInfo storage user = userInfo[msg.sender];\n\n        require(\n            user.depositAmount + msg.value <= individualDepositCap,\n            \"exceed individual deposit cap\"\n        );\n        require(\n            totalDeposit + msg.value <= totalDepositCap,\n            \"exceed total deposit cap\"\n        );\n\n        ReferralPool(referralPool).registerReferral(\n            msg.sender,\n            _referrer,\n            msg.value\n        );\n\n        if (address(user.lockdropInstance) == address(0)) {\n            WemixLockdrop lockdrop = new WemixLockdrop(msg.sender);\n            user.lockdropInstance = lockdrop;\n        }\n\n        user.lockdropInstance.lock{value: msg.value}();\n        user.depositAmount += msg.value;\n        totalDeposit += msg.value;\n    }\n\n    function releaseByDev(address _user) external {\n        require(msg.sender == dev, \"only dev\");\n        require(\n            block.timestamp >= lockdropFinishTime,\n            \"lockdrop is not finished\"\n        );\n\n        UserInfo storage user = userInfo[_user];\n        require(user.depositAmount > 0, \"invalid user\");\n\n        // set deposit amount to 0\n        uint256 amount = user.depositAmount;\n        user.depositAmount = 0;\n\n        // return principal\n        user.lockdropInstance.unlock(amount);\n    }\n\n    function release() external lock {\n        require(\n            block.timestamp >= lockdropFinishTime,\n            \"lockdrop is not finished\"\n        );\n\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.depositAmount > 0, \"invalid user\");\n\n        // set deposit amount to 0\n        uint256 amount = user.depositAmount;\n        user.depositAmount = 0;\n\n        // return principal\n        user.lockdropInstance.unlock(amount);\n    }\n\n    function commitReferralReward(address _user, uint256 _cYield) external {\n        require(\n            msg.sender == address(userInfo[_user].lockdropInstance),\n            \"invalid lockdrop instance\"\n        );\n        ReferralPool(referralPool).commitReferralReward(_user, _cYield);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/MantaShoebillPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// daily 10000 point in reward distributor\ncontract MantaShoebillPoint is ERC20 {\n    address public dev;\n\n    constructor() ERC20(\"Manta Shoebill Point\", \"m.SBP\") {\n        dev = msg.sender;\n    }\n\n    function devBurn(address target, uint256 amount) external {\n        require(msg.sender == dev, \"dev: wut?\");\n        _burn(target, amount);\n    }\n\n    function devMint(address target, uint256 amount) external {\n        require(msg.sender == dev, \"dev: wut?\");\n        _mint(target, amount);\n    }\n\n    function setDev(address _dev) external {\n        require(msg.sender == dev, \"dev: wut?\");\n        dev = _dev;\n    }\n}\n"
    },
    "contracts/Ownership/Ownable.sol": {
      "content": "pragma solidity ^0.8.10;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./CToken.sol\";\n\nabstract contract PriceOracle {\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n    bool public constant isPriceOracle = true;\n\n    /**\n     * @notice Get the underlying price of a cToken asset\n     * @param cToken The cToken to get the underlying price of\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable.\n     */\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view virtual returns (uint);\n\n    function getPrice(CToken cToken) external view virtual returns (uint256);\n}\n"
    },
    "contracts/PriceOracle/ChainlinkPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport \"../PriceOracle.sol\";\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ninterface ICToken {\n    function underlying() external view returns (address);\n}\n\ncontract ChainlinkPriceOracle is PriceOracle {\n    mapping(string => IAggregatorV3) public priceFeeds;\n    mapping(string => uint256) public baseUnits;\n\n    constructor(\n        string[] memory symbols_,\n        IAggregatorV3[] memory feeds_,\n        uint256[] memory baseUnits_\n    ) {\n        for (uint256 i = 0; i < symbols_.length; i++) {\n            priceFeeds[symbols_[i]] = feeds_[i];\n            baseUnits[symbols_[i]] = baseUnits_[i];\n        }\n    }\n\n    // price in 18 decimals\n    function getPrice(CToken cToken) public view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = priceFeeds[symbol].decimals();\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n\n        return price * 10 ** (18 - feedDecimals);\n    }\n\n    // price is extended for comptroller usage based on decimals of exchangeRate\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = priceFeeds[symbol].decimals();\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n        return (price * (10 ** (36 - feedDecimals))) / baseUnits[symbol];\n    }\n\n    function _getLatestPrice(\n        string memory symbol\n    ) internal view returns (uint256, uint256) {\n        require(address(priceFeeds[symbol]) != address(0), \"missing priceFeed\");\n\n        (\n            ,\n            //uint80 roundID\n            int256 price, //uint256 startedAt\n            ,\n            uint256 timeStamp, //uint80 answeredInRound\n\n        ) = priceFeeds[symbol].latestRoundData();\n\n        require(price > 0, \"price cannot be zero\");\n        uint256 uPrice = uint256(price);\n\n        return (uPrice, timeStamp);\n    }\n}\n"
    },
    "contracts/PriceOracle/MantaOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../PriceOracle.sol\";\n\ninterface IPriceCalculator {\n    struct ReferenceData {\n        uint256 lastData;\n        uint256 lastUpdated;\n    }\n\n    // return 18 decimals of precision\n    function priceOf(address asset) external view returns (uint256);\n\n    function priceOfETH() external view returns (uint256);\n}\n\ninterface IStone {\n    function tokenPrice() external view returns (uint256);\n}\n\ncontract MantaOracle is IPriceCalculator, PriceOracle, OwnableUpgradeable {\n    uint256 private THRESHOLD;\n    IPriceCalculator public fallBackPriceCalculator; // fallback oracle\n\n    mapping(address => ReferenceData) public references; // 18 decimals of precision\n    mapping(address => bool) public isReporter;\n\n    mapping(string => uint256) public baseUnits; // cTokenSymbol => baseUnit usdc = 1e6\n    mapping(string => address) public underlying; // cTokenSymbol => underlying address\n\n    address public stone;\n\n    modifier onlyReporter() {\n        require(\n            isReporter[msg.sender],\n            \"ShoebillOracle: caller is not the reporter\"\n        );\n        _;\n    }\n\n    function initialize(\n        address _fallBackPriceCalculator,\n        string[] memory _cTokenSymbols,\n        uint256[] memory _baseUnits,\n        address[] memory _underlying\n    ) external initializer {\n        __Ownable_init();\n\n        fallBackPriceCalculator = IPriceCalculator(_fallBackPriceCalculator);\n\n        isReporter[msg.sender] = true;\n        THRESHOLD = 45 minutes;\n\n        stone = 0xEc901DA9c68E90798BbBb74c11406A32A70652C3;\n\n        for (uint256 i = 0; i < _cTokenSymbols.length; i++) {\n            baseUnits[_cTokenSymbols[i]] = _baseUnits[i];\n            underlying[_cTokenSymbols[i]] = _underlying[i];\n        }\n    }\n\n    function setReporter(address reporter, bool status) external onlyOwner {\n        isReporter[reporter] = status;\n    }\n\n    function priceOfETH() public view override returns (uint256) {\n        ReferenceData memory referenceToken = references[address(0)];\n\n        if (block.timestamp - referenceToken.lastUpdated < THRESHOLD) {\n            return referenceToken.lastData;\n        }\n        return fallBackPriceCalculator.priceOfETH();\n    }\n\n    function priceOf(address asset) public view returns (uint) {\n        if (asset == address(0)) {\n            return priceOfETH();\n        }\n        if (asset == stone) {\n            return (getStoneExchangeRate() * priceOfETH()) / 1e18;\n        }\n\n        ReferenceData memory referenceToken = references[asset];\n\n        if (block.timestamp - referenceToken.lastUpdated < THRESHOLD) {\n            return referenceToken.lastData;\n        }\n\n        return fallBackPriceCalculator.priceOf(asset);\n    }\n\n    function setPrice(address asset, uint256 price) external onlyReporter {\n        references[asset] = ReferenceData(price, block.timestamp);\n    }\n\n    function setPrices(\n        address[] calldata assets,\n        uint256[] calldata prices\n    ) external onlyReporter {\n        for (uint256 i = 0; i < assets.length; i++) {\n            references[assets[i]] = ReferenceData(prices[i], block.timestamp);\n        }\n    }\n\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view virtual override returns (uint) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = 18;\n        address feedSource = underlying[symbol];\n        uint256 price = priceOf(feedSource);\n\n        return (price * (10 ** (36 - feedDecimals))) / baseUnits[symbol];\n    }\n\n    function getPrice(\n        CToken cToken\n    ) external view virtual override returns (uint256) {\n        string memory symbol = cToken.symbol();\n\n        address feedSource = underlying[symbol];\n\n        uint256 price = priceOf(feedSource);\n\n        return price;\n    }\n\n    function getStoneExchangeRate() public view returns (uint256) {\n        return IStone(stone).tokenPrice();\n    }\n}\n"
    },
    "contracts/PriceOracle/OraklePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport \"../PriceOracle.sol\";\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n\ninterface ICToken {\n    function underlying() external view returns (address);\n}\n\ncontract OraklePriceOracle is PriceOracle {\n    mapping(string => IAggregatorV3) public priceFeeds;\n    mapping(string => uint256) public baseUnits;\n\n    // KLAY-USDT PROXY: 0x33D6ee12D4ADE244100F09b280e159659fe0ACE0\n    constructor(\n        string[] memory symbols_,\n        IAggregatorV3[] memory feeds_,\n        uint256[] memory baseUnits_\n    ) {\n        for (uint256 i = 0; i < symbols_.length; i++) {\n            priceFeeds[symbols_[i]] = feeds_[i];\n            baseUnits[symbols_[i]] = baseUnits_[i];\n        }\n    }\n\n    // price in 18 decimals\n    function getPrice(CToken cToken) public view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = priceFeeds[symbol].decimals();\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n\n        return price * 10 ** (18 - feedDecimals);\n    }\n\n    // price is extended for comptroller usage based on decimals of exchangeRate\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = priceFeeds[symbol].decimals();\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n        return (price * (10 ** (36 - feedDecimals))) / baseUnits[symbol];\n    }\n\n    function _getLatestPrice(\n        string memory symbol\n    ) internal view returns (uint256, uint256) {\n        require(address(priceFeeds[symbol]) != address(0), \"missing priceFeed\");\n\n        (\n            ,\n            //uint80 roundID\n            int256 price, //uint256 startedAt\n            ,\n            uint256 timeStamp, //uint80 answeredInRound\n\n        ) = priceFeeds[symbol].latestRoundData();\n\n        require(price > 0, \"price cannot be zero\");\n        uint256 uPrice = uint256(price);\n\n        return (uPrice, timeStamp);\n    }\n}\n"
    },
    "contracts/PriceOracle/PythPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\nimport \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\";\nimport \"../PriceOracle.sol\";\nimport \"../StWemixInterface.sol\";\n\ninterface IWemixFiOracle {\n    function getUnderlyingPrice(bytes32 symbol) external view returns (uint256);\n}\n\ninterface ILiquidWonderStaking {\n    function ncpPid() external view returns (uint256);\n    function fee() external view returns (uint256);\n    function tresury() external view returns (address);\n    function gov() external view returns (address);\n    function deposit() external payable returns (uint256);\n    function withdraw(\n        uint256 shares\n    ) external returns (uint256 amount, uint256 tokenId);\n    function withdrawAll() external returns (uint256 amount, uint256 tokenId);\n    function getTotalWEMIX() external returns (uint256);\n    function compound() external;\n    function amountToShares(\n        uint256 amount\n    ) external view returns (uint256 shares);\n    function sharesToAmount(\n        uint256 shares\n    ) external view returns (uint256 amount);\n}\n\ncontract PythPriceOracle is PriceOracle {\n    mapping(string => IPyth) public priceFeeds;\n    mapping(string => uint256) public baseUnits;\n    mapping(string => bytes32) public priceIds;\n\n    string public constant stWEMIXSymbol = \"sbstWEMIX\";\n    string public constant lwsWEMIXSymbol = \"sblwsWEMIX\";\n\n    address public constant stWEMIX =\n        0x9B377bd7Db130E8bD2f3641E0E161cB613DA93De;\n    address public constant lwsWEMIX =\n        0x9B377bd7Db130E8bD2f3641E0E161cB613DA93De;\n    uint256 public constant age = 60 * 15;\n\n    IWemixFiOracle public constant fallbackOracle =\n        IWemixFiOracle(0x7B00FA72288e7C43236ba4A6C17c4fC8086Bf20d);\n\n    constructor(\n        string[] memory symbols_,\n        IPyth[] memory feeds_,\n        uint256[] memory baseUnits_,\n        bytes32[] memory priceIds_\n    ) {\n        for (uint256 i = 0; i < symbols_.length; i++) {\n            priceFeeds[symbols_[i]] = feeds_[i];\n            baseUnits[symbols_[i]] = baseUnits_[i];\n            priceIds[symbols_[i]] = priceIds_[i];\n        }\n    }\n\n    // price in 18 decimals\n    function getPrice(CToken cToken) public view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n\n        return price * 10 ** 10;\n    }\n\n    // price is extended for comptroller usage based on decimals of exchangeRate\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = 8;\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n\n        return (price * (10 ** (36 - feedDecimals))) / baseUnits[symbol];\n    }\n\n    function _getLatestPrice(\n        string memory symbol\n    ) internal view returns (uint256, uint256) {\n        require(address(priceFeeds[symbol]) != address(0), \"missing priceFeed\");\n\n        PythStructs.Price memory priceData;\n\n        try\n            priceFeeds[symbol].getPriceNoOlderThan(priceIds[symbol], age)\n        returns (PythStructs.Price memory _priceData) {\n            priceData = _priceData;\n        } catch {\n            revert(\"failed to get price\");\n            // uint256 fallbackPrice = getFallbackOraclePrice(symbol);\n            // priceData.price = int64(uint64(fallbackPrice));\n        }\n\n        require(priceData.price > 0, \"price cannot be zero\");\n        uint256 uPrice = uint256(uint64(priceData.price));\n\n        if (compareString(symbol, stWEMIXSymbol)) {\n            uPrice = (uPrice * _calcStWemix()) / 1e8;\n        }\n        if (compareString(symbol, lwsWEMIXSymbol)) {\n            uPrice = (uPrice * _calcLwsWemix()) / 1e8;\n        }\n\n        return (uPrice, priceData.publishTime);\n    }\n\n    function _calcStWemix() internal view returns (uint256) {\n        uint256 rate = StWemixInterface(stWEMIX).getPooledWEMIXBySharesWithFee(\n            1e8\n        );\n\n        require(rate > 1e8, \"invalid stWEMIX rate\");\n\n        return rate;\n    }\n\n    function _calcLwsWemix() internal view returns (uint256) {\n        uint256 rate = ILiquidWonderStaking(lwsWEMIX).sharesToAmount(1e8);\n\n        require(rate > 1e8, \"invalid lwsWEMIX rate\");\n\n        return rate;\n    }\n\n    function getFallbackOraclePrice(\n        string memory symbol\n    ) public view returns (uint256 _price) {\n        // TODO need to left pad or retrieve from a mapping\n        // utils.hexlify(utils.padZeros(utils.toUtf8Bytes('stWEMIX'), 64))\n        bytes32 symbolHash = bytes32(abi.encodePacked(symbol));\n\n        // fallback oracle has 18 decimals so we need to divide by 1e10 to make it 8 decimals\n        _price = fallbackOracle.getUnderlyingPrice(symbolHash) / 1e10;\n\n        // require(_price > 1e8, \"invalid fallback price\");\n    }\n}\n\nfunction compareString(string memory a, string memory b) pure returns (bool) {\n    return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\n}\n"
    },
    "contracts/PriceOracle/SimplePriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../PriceOracle.sol\";\n\ncontract SimplePriceOracle is Ownable, PriceOracle {\n    // token => price (18 decimals)\n    mapping(address => uint256) public prices;\n\n    address public sbWEMIX = 0xD13bE8b716b18265e294831FCb1330d170840BB3;\n\n    constructor() {}\n\n    /**\n     * @notice Set the price of the cToken\n     * @param tokens_ token addresses\n     * @param prices_ prices of token in 18 decimals\n     */\n    function setPrices(\n        address[] memory tokens_,\n        uint256[] memory prices_\n    ) external onlyOwner {\n        require(\n            tokens_.length == prices_.length,\n            \"tokens and prices length mismatch\"\n        );\n\n        for (uint256 i = 0; i < tokens_.length; i++) {\n            prices[tokens_[i]] = prices_[i];\n        }\n    }\n\n    // price in 18 decimals\n    function getPrice(CToken cToken) public view override returns (uint256) {\n        if (address(cToken) == sbWEMIX) {\n            return prices[address(0)];\n        }\n\n        address underlying = CErc20Interface(address(cToken)).underlying();\n        return prices[underlying];\n    }\n\n    // price is extended for comptroller usage based on decimals of exchangeRate\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view virtual override returns (uint) {\n        if (address(cToken) == sbWEMIX) {\n            return prices[address(0)];\n        }\n        address underlying = CErc20Interface(address(cToken)).underlying();\n        uint256 underlyingDecimals = EIP20Interface(underlying).decimals();\n        return prices[underlying] * (10 ** (18 - underlyingDecimals));\n    }\n}\n"
    },
    "contracts/PriceOracle/UniswapPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.10;\n\nimport \"../PriceOracle.sol\";\n\ninterface IStaticOracle {\n    function quoteSpecificPoolsWithTimePeriod(\n        uint128 _baseAmount,\n        address _baseToken,\n        address _quoteToken,\n        address[] calldata _pools,\n        uint32 _period\n    ) external view returns (uint256 _quoteAmount);\n}\n\ncontract UniswapPriceOracle is PriceOracle {\n    IStaticOracle public staticOracle;\n\n    // cToken => quoteToken\n    mapping(CToken => address) public quoteTokens;\n\n    // cToken => quotePool\n    mapping(CToken => address) public quotePools;\n\n    constructor(\n        IStaticOracle staticOracle_,\n        CToken[] memory cTokens,\n        address[] memory quoteTokens_,\n        address[] memory quotePools_\n    ) {\n        staticOracle = staticOracle_;\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            quoteTokens[cTokens[i]] = quoteTokens_[i];\n            quotePools[cTokens[i]] = quotePools_[i];\n        }\n    }\n\n    // price in 18 decimals\n    function getPrice(CToken cToken) public view override returns (uint256) {\n        return _getLatestPrice(cToken, false);\n    }\n\n    // price is extended for comptroller usage based on decimals of exchangeRate\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view override returns (uint256) {\n        return _getLatestPrice(cToken, true);\n    }\n\n    function _getLatestPrice(\n        CToken cToken,\n        bool underlyingPrice\n    ) internal view returns (uint256) {\n        uint256 period = 1800; // 30 minutes\n        address baseToken = CErc20Interface(address(cToken)).underlying();\n        uint256 baseTokenDecimals = EIP20Interface(baseToken).decimals();\n        uint256 baseAmount = 10 ** baseTokenDecimals;\n\n        address quoteToken = quoteTokens[cToken];\n        uint256 quoteTokenDecimals = EIP20Interface(quoteToken).decimals();\n\n        address quotePool = quotePools[cToken];\n        address[] memory pools = new address[](1);\n        pools[0] = quotePool;\n\n        uint256 quoteAmount = staticOracle.quoteSpecificPoolsWithTimePeriod(\n            uint128(baseAmount),\n            baseToken,\n            quoteToken,\n            pools,\n            uint32(period)\n        );\n\n        if (underlyingPrice) {\n            uint256 price = quoteAmount *\n                (10 ** (36 - baseTokenDecimals - quoteTokenDecimals));\n            return price;\n        } else {\n            uint256 price = quoteAmount * (10 ** (18 - baseTokenDecimals));\n            return price;\n        }\n    }\n}\n"
    },
    "contracts/PriceOracle/WitnetPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"witnet-solidity-bridge/contracts/interfaces/IWitnetPriceFeed.sol\";\n\nimport \"../PriceOracle.sol\";\n\ncontract WitnetPriceOracle is PriceOracle {\n    mapping(string => IWitnetPriceFeed) public priceFeeds;\n    mapping(string => uint256) public priceDecimals;\n    mapping(string => uint256) public baseUnits;\n\n    constructor(\n        string[] memory symbols_,\n        IWitnetPriceFeed[] memory feeds_,\n        uint256[] memory priceDecimals_,\n        uint256[] memory baseUnits_\n    ) {\n        for (uint256 i = 0; i < symbols_.length; i++) {\n            priceFeeds[symbols_[i]] = feeds_[i];\n            priceDecimals[symbols_[i]] = priceDecimals_[i];\n            baseUnits[symbols_[i]] = baseUnits_[i];\n        }\n    }\n\n    // price in 18 decimals\n    function getPrice(CToken cToken) public view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = priceDecimals[symbol];\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n\n        return price * 10 ** (18 - feedDecimals);\n    }\n\n    // price is extended for comptroller usage based on decimals of exchangeRate\n    function getUnderlyingPrice(\n        CToken cToken\n    ) external view override returns (uint256) {\n        string memory symbol = cToken.symbol();\n        uint256 feedDecimals = priceDecimals[symbol];\n\n        (uint256 price, ) = _getLatestPrice(symbol);\n        return (price * (10 ** (36 - feedDecimals))) / baseUnits[symbol];\n    }\n\n    function _getLatestPrice(\n        string memory symbol\n    ) internal view returns (uint256, uint256) {\n        require(address(priceFeeds[symbol]) != address(0), \"missing priceFeed\");\n\n        (int256 price, uint256 timeStamp, , ) = priceFeeds[symbol].lastValue();\n\n        require(price > 0, \"price cannot be zero\");\n        uint256 uPrice = uint256(price);\n\n        return (uPrice, timeStamp);\n    }\n}\n"
    },
    "contracts/PrincipalPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {CEther} from \"./CEther.sol\";\n\n/// @title PrincipalPool\n/// @author Shoebill\n/// @notice Claim interests earned from the cToken\n/// @dev Will be used if get grant from any governance.\n\ncontract PrincipalPool {\n    address payable public immutable cToken;\n\n    address public immutable depositor;\n    address public immutable interestReceiver;\n\n    uint256 public principal;\n    uint256 public sharing = 10000;\n    uint256 public denominator = 10000;\n\n    constructor(\n        address payable _cToken,\n        address _depositer,\n        address _interestReceiver\n    ) {\n        require(_cToken != address(0), \"cToken is zero address\");\n        require(_depositer != address(0), \"depositer is zero address\");\n        require(\n            _interestReceiver != address(0),\n            \"interestReceiver is zero address\"\n        );\n\n        cToken = _cToken;\n        depositor = _depositer;\n        interestReceiver = _interestReceiver;\n    }\n\n    function enter() external payable {\n        CEther(cToken).mint{value: msg.value}();\n\n        principal += msg.value;\n    }\n\n    function _enter() internal {\n        CEther(cToken).mint{value: msg.value}();\n\n        principal += msg.value;\n    }\n\n    function exit(uint256 amount) external {\n        CEther(cToken).redeemUnderlying(amount);\n\n        principal -= amount;\n\n        (bool suc, ) = depositor.call{value: amount}(\"\");\n        require(suc, \"transfer failed\");\n    }\n\n    function exitCToken(uint256 amount) external {\n        uint256 underlyingAmount = (CEther(cToken).exchangeRateCurrent() *\n            amount) / 1e18;\n\n        principal -= underlyingAmount;\n\n        require(CEther(cToken).transfer(depositor, amount), \"transfer failed\");\n    }\n\n    function claim() external {\n        uint256 balance = CEther(cToken).balanceOfUnderlying(address(this));\n        uint256 interest = balance - principal;\n        uint256 interestToShare = (interest * sharing) / denominator;\n\n        uint256 toPrincipal = interest - interestToShare;\n\n        if (toPrincipal > 0) {\n            principal += toPrincipal;\n        }\n\n        CEther(cToken).redeemUnderlying(interestToShare);\n\n        (bool suc, ) = interestReceiver.call{value: interestToShare}(\"\");\n        require(suc, \"transfer failed\");\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/Proxy/TransparentUpgradeableProxyShoebill.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract TransparentUpgradeableProxyShoebill is TransparentUpgradeableProxy {\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/RewardDistributor.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./CTokenInterfaces.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./ExponentialNoError.sol\";\n\nimport \"./Token/IGovSBL.sol\";\nimport \"./Token/IMiningReferral.sol\";\n\nstruct RewardMarketState {\n    /// @notice The supply speed for each market\n    uint256 supplySpeed;\n    /// @notice The supply index for each market\n    uint224 supplyIndex;\n    /// @notice The last block number that Reward accrued for supply\n    uint32 supplyBlock;\n    /// @notice The borrow speed for each market\n    uint256 borrowSpeed;\n    /// @notice The borrow index for each market\n    uint224 borrowIndex;\n    /// @notice The last block number that Reward accrued for borrow\n    uint32 borrowBlock;\n}\n\nstruct RewardAccountState {\n    /// @notice The supply index for each market as of the last time the account accrued Reward\n    mapping(address => uint256) supplierIndex;\n    /// @notice The borrow index for each market as of the last time the account accrued Reward\n    mapping(address => uint256) borrowerIndex;\n    /// @notice Accrued Reward but not yet transferred\n    uint256 rewardAccrued;\n}\n\n/**\n * @title Reward Distributor (version 1)\n * @notice This contract is used to distribute rewards to users for supplying and borrowing assets.\n * Each supply and borrow changing action from comptroller will trigger index update for each reward token.\n */\ncontract RewardDistributor is\n    Initializable,\n    OwnableUpgradeable,\n    ExponentialNoError\n{\n    event RewardAccrued(\n        address indexed rewardToken,\n        address indexed user,\n        uint256 deltaAccrued,\n        uint256 totalAccrued\n    );\n\n    event RewardGranted(\n        address indexed rewardToken,\n        address indexed user,\n        uint256 amount\n    );\n\n    event SupplySpeedUpdated(\n        address indexed rewardToken,\n        address indexed cToken,\n        uint256 supplySpeed\n    );\n\n    event BorrowSpeedUpdated(\n        address indexed rewardToken,\n        address indexed cToken,\n        uint256 borrowSpeed\n    );\n\n    /// @notice The initial reward index for a market\n    uint224 public constant rewardInitialIndex = 1e36;\n\n    /// @notice The comptroller that rewards are distributed to\n    address public comptroller;\n\n    /// @notice The Reward state for each reward token for each market\n    mapping(address => mapping(address => RewardMarketState))\n        public rewardMarketState;\n\n    /// @notice The Reward state for each reward token for each account\n    mapping(address => mapping(address => RewardAccountState))\n        public rewardAccountState;\n\n    /// @notice Added reward tokens\n    address[] public rewardTokens;\n    /// @notice Flag to check if reward token added before\n    mapping(address => bool) public rewardTokenExists;\n\n    // update shoebill boost\n\n    IGovSBL public gShoebillToken;\n    IMiningReferral public miningReferral;\n\n    modifier onlyComptroller() {\n        require(\n            msg.sender == comptroller,\n            \"RewardDistributor: only comptroller can call this function\"\n        );\n        _;\n    }\n\n    function initialize(address comptroller_) public initializer {\n        __Ownable_init();\n\n        comptroller = comptroller_;\n    }\n\n    function setGShoebillToken(address _gShoebillToken) external onlyOwner {\n        gShoebillToken = IGovSBL(_gShoebillToken);\n    }\n\n    function setMiningReferral(address _miningReferral) external onlyOwner {\n        miningReferral = IMiningReferral(_miningReferral);\n    }\n\n    function _whitelistToken(address rewardToken_) public onlyOwner {\n        require(\n            rewardToken_ != address(0),\n            \"RewardDistributor: reward token cannot be zero address\"\n        );\n        require(\n            !rewardTokenExists[rewardToken_],\n            \"RewardDistributor: reward token already exists\"\n        );\n\n        rewardTokens.push(rewardToken_);\n        rewardTokenExists[rewardToken_] = true;\n    }\n\n    function _updateRewardSpeeds(\n        address rewardToken_,\n        address[] memory cTokens,\n        uint256[] memory supplySpeeds,\n        uint256[] memory borrowSpeeds\n    ) public onlyOwner {\n        require(\n            rewardTokenExists[rewardToken_],\n            \"RewardDistributor: reward token does not exist\"\n        );\n        require(\n            cTokens.length == supplySpeeds.length,\n            \"RewardDistributor: supply speed array length mismatch\"\n        );\n        require(\n            cTokens.length == borrowSpeeds.length,\n            \"RewardDistributor: borrow speed array length mismatch\"\n        );\n\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            updateRewardSpeedInternal(\n                rewardToken_,\n                cTokens[i],\n                supplySpeeds[i],\n                borrowSpeeds[i]\n            );\n        }\n    }\n\n    function updateRewardSpeedInternal(\n        address rewardToken,\n        address cToken,\n        uint256 supplySpeed,\n        uint256 borrowSpeed\n    ) internal {\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n\n        if (marketState.supplySpeed != supplySpeed) {\n            if (marketState.supplyIndex == 0) {\n                marketState.supplyIndex = rewardInitialIndex;\n            }\n\n            notifySupplyIndexInternal(rewardToken, cToken);\n            marketState.supplySpeed = supplySpeed;\n            emit SupplySpeedUpdated(rewardToken, cToken, supplySpeed);\n        }\n\n        if (marketState.borrowSpeed != borrowSpeed) {\n            if (marketState.borrowIndex == 0) {\n                marketState.borrowIndex = rewardInitialIndex;\n            }\n\n            notifyBorrowIndexInternal(rewardToken, cToken);\n            marketState.borrowSpeed = borrowSpeed;\n            emit BorrowSpeedUpdated(rewardToken, cToken, borrowSpeed);\n        }\n    }\n\n    function notifySupplyIndex(address cToken) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifySupplyIndexInternal(rewardTokens[i], cToken);\n        }\n    }\n\n    function notifySupplyIndexInternal(\n        address rewardToken,\n        address cToken\n    ) internal {\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n\n        uint32 blockNumber = getBlockNumber();\n\n        if (blockNumber > marketState.supplyBlock) {\n            if (marketState.supplySpeed > 0) {\n                uint256 deltaBlocks = blockNumber - marketState.supplyBlock;\n                uint256 supplyTokens = CTokenInterface(cToken).totalSupply();\n                uint256 accrued = mul_(deltaBlocks, marketState.supplySpeed);\n                Double memory ratio = supplyTokens > 0\n                    ? fraction(accrued, supplyTokens)\n                    : Double({mantissa: 0});\n                marketState.supplyIndex = safe224(\n                    add_(Double({mantissa: marketState.supplyIndex}), ratio)\n                        .mantissa,\n                    \"new index exceeds 224 bits\"\n                );\n            }\n\n            marketState.supplyBlock = blockNumber;\n        }\n    }\n\n    function notifyBorrowIndex(address cToken) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifyBorrowIndexInternal(rewardTokens[i], cToken);\n        }\n    }\n\n    function notifyBorrowIndexInternal(\n        address rewardToken,\n        address cToken\n    ) internal {\n        Exp memory marketBorrowIndex = Exp({\n            mantissa: CTokenInterface(cToken).borrowIndex()\n        });\n\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n\n        uint32 blockNumber = getBlockNumber();\n\n        if (blockNumber > marketState.borrowBlock) {\n            if (marketState.borrowSpeed > 0) {\n                uint256 deltaBlocks = blockNumber - marketState.borrowBlock;\n                uint256 borrowAmount = div_(\n                    CTokenInterface(cToken).totalBorrows(),\n                    marketBorrowIndex\n                );\n                uint256 accrued = mul_(deltaBlocks, marketState.borrowSpeed);\n                Double memory ratio = borrowAmount > 0\n                    ? fraction(accrued, borrowAmount)\n                    : Double({mantissa: 0});\n                marketState.borrowIndex = safe224(\n                    add_(Double({mantissa: marketState.borrowIndex}), ratio)\n                        .mantissa,\n                    \"new index exceeds 224 bits\"\n                );\n            }\n\n            marketState.borrowBlock = blockNumber;\n        }\n    }\n\n    function notifySupplier(\n        address cToken,\n        address supplier\n    ) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifySupplierInternal(rewardTokens[i], cToken, supplier);\n        }\n    }\n\n    function notifySupplierInternal(\n        address rewardToken,\n        address cToken,\n        address supplier\n    ) internal {\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n        RewardAccountState storage accountState = rewardAccountState[\n            rewardToken\n        ][supplier];\n\n        uint256 supplyIndex = marketState.supplyIndex;\n        uint256 supplierIndex = accountState.supplierIndex[cToken];\n\n        // Update supplier's index to the current index since we are distributing accrued Reward\n        accountState.supplierIndex[cToken] = supplyIndex;\n\n        if (supplierIndex == 0 && supplyIndex >= rewardInitialIndex) {\n            supplierIndex = rewardInitialIndex;\n        }\n\n        // Calculate change in the cumulative sum of the Reward per cToken accrued\n        Double memory deltaIndex = Double({\n            mantissa: sub_(supplyIndex, supplierIndex)\n        });\n\n        uint256 supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\n\n        // Calculate Reward accrued: cTokenAmount * accruedPerCToken\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n\n        accountState.rewardAccrued = add_(\n            accountState.rewardAccrued,\n            supplierDelta\n        );\n\n        emit RewardAccrued(\n            rewardToken,\n            supplier,\n            supplierDelta,\n            accountState.rewardAccrued\n        );\n    }\n\n    function notifyBorrower(\n        address cToken,\n        address borrower\n    ) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifyBorrowerInternal(rewardTokens[i], cToken, borrower);\n        }\n    }\n\n    function notifyBorrowerInternal(\n        address rewardToken,\n        address cToken,\n        address borrower\n    ) internal {\n        Exp memory marketBorrowIndex = Exp({\n            mantissa: CTokenInterface(cToken).borrowIndex()\n        });\n\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n        RewardAccountState storage accountState = rewardAccountState[\n            rewardToken\n        ][borrower];\n\n        uint256 borrowIndex = marketState.borrowIndex;\n        uint256 borrowerIndex = accountState.borrowerIndex[cToken];\n\n        // Update borrowers's index to the current index since we are distributing accrued Reward\n        accountState.borrowerIndex[cToken] = borrowIndex;\n\n        if (borrowerIndex == 0 && borrowIndex >= rewardInitialIndex) {\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\n            // Rewards the user with Reward accrued from the start of when borrower rewards were first\n            // set for the market.\n            borrowerIndex = rewardInitialIndex;\n        }\n\n        // Calculate change in the cumulative sum of the Reward per borrowed unit accrued\n        Double memory deltaIndex = Double({\n            mantissa: sub_(borrowIndex, borrowerIndex)\n        });\n\n        uint256 borrowerAmount = div_(\n            CTokenInterface(cToken).borrowBalanceStored(borrower),\n            marketBorrowIndex\n        );\n\n        // Calculate Reward accrued: cTokenAmount * accruedPerBorrowedUnit\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n\n        accountState.rewardAccrued = add_(\n            accountState.rewardAccrued,\n            borrowerDelta\n        );\n\n        emit RewardAccrued(\n            rewardToken,\n            borrower,\n            borrowerDelta,\n            accountState.rewardAccrued\n        );\n    }\n\n    function claim(address[] memory holders) public {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            claimInternal(rewardTokens[i], holders);\n        }\n    }\n\n    function claimInternal(\n        address rewardToken,\n        address[] memory holders\n    ) internal {\n        for (uint256 j = 0; j < holders.length; j++) {\n            RewardAccountState storage accountState = rewardAccountState[\n                rewardToken\n            ][holders[j]];\n\n            accountState.rewardAccrued = grantRewardInternal(\n                rewardToken,\n                holders[j],\n                accountState.rewardAccrued\n            );\n        }\n    }\n\n    function getBlockNumber() public view returns (uint32) {\n        return safe32(block.timestamp, \"block number exceeds 32 bits\");\n    }\n\n    function _grantReward(\n        address token,\n        address user,\n        uint256 amount\n    ) public onlyOwner {\n        require(\n            rewardTokenExists[token],\n            \"RewardDistributor: grant reward token does not exist\"\n        );\n        grantRewardInternal(token, user, amount);\n    }\n\n    /**\n     * @notice Transfer Reward to the user\n     * @dev Note: If there is not enough Reward, we do not perform the transfer all.\n     * @param user The address of the user to transfer Reward to\n     * @param amount The amount of Reward to (possibly) transfer\n     * @return The amount of Reward which was NOT transferred to the user\n     */\n    function grantRewardInternal(\n        address token,\n        address user,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 remaining = EIP20Interface(token).balanceOf(address(this));\n        if (amount > 0 && amount <= remaining) {\n            uint256 amountToSend = amount;\n            if (address(gShoebillToken) != address(0)) {\n                uint256 boostMultiplier = gShoebillToken.getBoostMultiplier(\n                    user\n                );\n                amountToSend = (amount * boostMultiplier) / 10000;\n            }\n            if (address(miningReferral) != address(0)) {\n                address referrer = miningReferral.getReferrer(user);\n                if (referrer != address(0)) {\n                    // 50:50 ratio for referrer and user\n                    uint256 referralAmount = (amount *\n                        (miningReferral.bonusRate(referrer))) / 10000;\n                    SafeERC20.safeTransfer(\n                        IERC20(token),\n                        referrer,\n                        referralAmount\n                    );\n                    miningReferral.recordReferralCommission(\n                        referrer,\n                        referralAmount\n                    );\n\n                    amountToSend = amountToSend + referralAmount;\n                }\n            }\n            SafeERC20.safeTransfer(IERC20(token), user, amountToSend);\n\n            emit RewardGranted(token, user, amountToSend);\n\n            return 0;\n        }\n        return amount;\n    }\n\n    /** Getters */\n    function getRewardTokens() public view returns (address[] memory) {\n        return rewardTokens;\n    }\n}\n"
    },
    "contracts/RewardDistributorV2.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./CTokenInterfaces.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./ExponentialNoError.sol\";\n\nimport \"./Token/IGovSBL.sol\";\nimport \"./Token/IMiningReferral.sol\";\n\nstruct RewardMarketState {\n    /// @notice The supply speed for each market\n    uint256 supplySpeed;\n    /// @notice The supply index for each market\n    uint224 supplyIndex;\n    /// @notice The last block number that Reward accrued for supply\n    uint32 supplyBlock;\n    /// @notice The borrow speed for each market\n    uint256 borrowSpeed;\n    /// @notice The borrow index for each market\n    uint224 borrowIndex;\n    /// @notice The last block number that Reward accrued for borrow\n    uint32 borrowBlock;\n}\n\nstruct RewardAccountState {\n    /// @notice The supply index for each market as of the last time the account accrued Reward\n    mapping(address => uint256) supplierIndex;\n    /// @notice The borrow index for each market as of the last time the account accrued Reward\n    mapping(address => uint256) borrowerIndex;\n    /// @notice Accrued Reward but not yet transferred\n    uint256 rewardAccrued;\n}\n\n/**\n * @title Reward Distributor (version 2)\n * @notice This contract is used to distribute rewards to users for supplying and borrowing assets.\n * Each supply and borrow changing action from comptroller will trigger index update for each reward token.\n * implement delegate stake to grant reward as staked token\n */\ncontract RewardDistributorV2 is\n    Initializable,\n    OwnableUpgradeable,\n    ExponentialNoError\n{\n    event RewardAccrued(\n        address indexed rewardToken,\n        address indexed user,\n        uint256 deltaAccrued,\n        uint256 totalAccrued\n    );\n\n    event RewardGranted(\n        address indexed rewardToken,\n        address indexed user,\n        uint256 amount\n    );\n\n    event SupplySpeedUpdated(\n        address indexed rewardToken,\n        address indexed cToken,\n        uint256 supplySpeed\n    );\n\n    event BorrowSpeedUpdated(\n        address indexed rewardToken,\n        address indexed cToken,\n        uint256 borrowSpeed\n    );\n\n    /// @notice The initial reward index for a market\n    uint224 public constant rewardInitialIndex = 1e36;\n\n    /// @notice The comptroller that rewards are distributed to\n    address public comptroller; // deprecated\n\n    /// @notice The Reward state for each reward token for each market\n    mapping(address => mapping(address => RewardMarketState))\n        public rewardMarketState;\n\n    /// @notice The Reward state for each reward token for each account\n    mapping(address => mapping(address => RewardAccountState))\n        public rewardAccountState;\n\n    /// @notice Added reward tokens\n    address[] public rewardTokens;\n    /// @notice Flag to check if reward token added before\n    mapping(address => bool) public rewardTokenExists;\n\n    // update shoebill boost\n    IGovSBL public gShoebillToken;\n    IMiningReferral public miningReferral;\n\n    // update multiple comptroller markets\n    // update team reward receiver\n    IERC20 public shoebillToken;\n    mapping(address => bool) public isComptroller;\n    mapping(address => uint256) public teamRate;\n    address private teamRewardReceiver;\n\n    modifier onlyComptroller() {\n        require(\n            isComptroller[msg.sender],\n            \"RewardDistributor: only comptroller can call this function\"\n        );\n        _;\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n    }\n\n    function setShoebillToken(address _shoebillToken) external onlyOwner {\n        shoebillToken = IERC20(_shoebillToken);\n    }\n\n    function setComptroller(\n        address _comptroller,\n        bool _bool\n    ) external onlyOwner {\n        isComptroller[_comptroller] = _bool;\n    }\n\n    function setTeamRewardReceiver(\n        address _teamRewardReceiver\n    ) external onlyOwner {\n        teamRewardReceiver = _teamRewardReceiver;\n    }\n\n    function setTeamRate(address _token, uint256 _teamRate) external onlyOwner {\n        teamRate[_token] = _teamRate;\n    }\n\n    function setGShoebillToken(address _gShoebillToken) external onlyOwner {\n        gShoebillToken = IGovSBL(_gShoebillToken);\n    }\n\n    function setMiningReferral(address _miningReferral) external onlyOwner {\n        miningReferral = IMiningReferral(_miningReferral);\n    }\n\n    function _whitelistToken(address rewardToken_) public onlyOwner {\n        require(\n            rewardToken_ != address(0),\n            \"RewardDistributor: reward token cannot be zero address\"\n        );\n        require(\n            !rewardTokenExists[rewardToken_],\n            \"RewardDistributor: reward token already exists\"\n        );\n\n        rewardTokens.push(rewardToken_);\n        rewardTokenExists[rewardToken_] = true;\n    }\n\n    function _updateRewardSpeeds(\n        address rewardToken_,\n        address[] memory cTokens,\n        uint256[] memory supplySpeeds,\n        uint256[] memory borrowSpeeds\n    ) public onlyOwner {\n        require(\n            rewardTokenExists[rewardToken_],\n            \"RewardDistributor: reward token does not exist\"\n        );\n        require(\n            cTokens.length == supplySpeeds.length,\n            \"RewardDistributor: supply speed array length mismatch\"\n        );\n        require(\n            cTokens.length == borrowSpeeds.length,\n            \"RewardDistributor: borrow speed array length mismatch\"\n        );\n\n        for (uint256 i = 0; i < cTokens.length; i++) {\n            updateRewardSpeedInternal(\n                rewardToken_,\n                cTokens[i],\n                supplySpeeds[i],\n                borrowSpeeds[i]\n            );\n        }\n    }\n\n    function updateRewardSpeedInternal(\n        address rewardToken,\n        address cToken,\n        uint256 supplySpeed,\n        uint256 borrowSpeed\n    ) internal {\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n\n        if (marketState.supplySpeed != supplySpeed) {\n            if (marketState.supplyIndex == 0) {\n                marketState.supplyIndex = rewardInitialIndex;\n            }\n\n            notifySupplyIndexInternal(rewardToken, cToken);\n            marketState.supplySpeed = supplySpeed;\n            emit SupplySpeedUpdated(rewardToken, cToken, supplySpeed);\n        }\n\n        if (marketState.borrowSpeed != borrowSpeed) {\n            if (marketState.borrowIndex == 0) {\n                marketState.borrowIndex = rewardInitialIndex;\n            }\n\n            notifyBorrowIndexInternal(rewardToken, cToken);\n            marketState.borrowSpeed = borrowSpeed;\n            emit BorrowSpeedUpdated(rewardToken, cToken, borrowSpeed);\n        }\n    }\n\n    function notifySupplyIndex(address cToken) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifySupplyIndexInternal(rewardTokens[i], cToken);\n        }\n    }\n\n    function notifySupplyIndexInternal(\n        address rewardToken,\n        address cToken\n    ) internal {\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n\n        uint32 blockNumber = getBlockNumber();\n\n        if (blockNumber > marketState.supplyBlock) {\n            if (marketState.supplySpeed > 0) {\n                uint256 deltaBlocks = blockNumber - marketState.supplyBlock;\n                uint256 supplyTokens = CTokenInterface(cToken).totalSupply();\n                uint256 accrued = mul_(deltaBlocks, marketState.supplySpeed);\n                Double memory ratio = supplyTokens > 0\n                    ? fraction(accrued, supplyTokens)\n                    : Double({mantissa: 0});\n                marketState.supplyIndex = safe224(\n                    add_(Double({mantissa: marketState.supplyIndex}), ratio)\n                        .mantissa,\n                    \"new index exceeds 224 bits\"\n                );\n            }\n\n            marketState.supplyBlock = blockNumber;\n        }\n    }\n\n    function notifyBorrowIndex(address cToken) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifyBorrowIndexInternal(rewardTokens[i], cToken);\n        }\n    }\n\n    function notifyBorrowIndexInternal(\n        address rewardToken,\n        address cToken\n    ) internal {\n        Exp memory marketBorrowIndex = Exp({\n            mantissa: CTokenInterface(cToken).borrowIndex()\n        });\n\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n\n        uint32 blockNumber = getBlockNumber();\n\n        if (blockNumber > marketState.borrowBlock) {\n            if (marketState.borrowSpeed > 0) {\n                uint256 deltaBlocks = blockNumber - marketState.borrowBlock;\n                uint256 borrowAmount = div_(\n                    CTokenInterface(cToken).totalBorrows(),\n                    marketBorrowIndex\n                );\n                uint256 accrued = mul_(deltaBlocks, marketState.borrowSpeed);\n                Double memory ratio = borrowAmount > 0\n                    ? fraction(accrued, borrowAmount)\n                    : Double({mantissa: 0});\n                marketState.borrowIndex = safe224(\n                    add_(Double({mantissa: marketState.borrowIndex}), ratio)\n                        .mantissa,\n                    \"new index exceeds 224 bits\"\n                );\n            }\n\n            marketState.borrowBlock = blockNumber;\n        }\n    }\n\n    function notifySupplier(\n        address cToken,\n        address supplier\n    ) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifySupplierInternal(rewardTokens[i], cToken, supplier);\n        }\n    }\n\n    function notifySupplierInternal(\n        address rewardToken,\n        address cToken,\n        address supplier\n    ) internal {\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n        RewardAccountState storage accountState = rewardAccountState[\n            rewardToken\n        ][supplier];\n\n        uint256 supplyIndex = marketState.supplyIndex;\n        uint256 supplierIndex = accountState.supplierIndex[cToken];\n\n        // Update supplier's index to the current index since we are distributing accrued Reward\n        accountState.supplierIndex[cToken] = supplyIndex;\n\n        if (supplierIndex == 0 && supplyIndex >= rewardInitialIndex) {\n            supplierIndex = rewardInitialIndex;\n        }\n\n        // Calculate change in the cumulative sum of the Reward per cToken accrued\n        Double memory deltaIndex = Double({\n            mantissa: sub_(supplyIndex, supplierIndex)\n        });\n\n        uint256 supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\n\n        // Calculate Reward accrued: cTokenAmount * accruedPerCToken\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\n\n        accountState.rewardAccrued = add_(\n            accountState.rewardAccrued,\n            supplierDelta\n        );\n\n        emit RewardAccrued(\n            rewardToken,\n            supplier,\n            supplierDelta,\n            accountState.rewardAccrued\n        );\n    }\n\n    function notifyBorrower(\n        address cToken,\n        address borrower\n    ) external onlyComptroller {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            notifyBorrowerInternal(rewardTokens[i], cToken, borrower);\n        }\n    }\n\n    function notifyBorrowerInternal(\n        address rewardToken,\n        address cToken,\n        address borrower\n    ) internal {\n        Exp memory marketBorrowIndex = Exp({\n            mantissa: CTokenInterface(cToken).borrowIndex()\n        });\n\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\n            cToken\n        ];\n        RewardAccountState storage accountState = rewardAccountState[\n            rewardToken\n        ][borrower];\n\n        uint256 borrowIndex = marketState.borrowIndex;\n        uint256 borrowerIndex = accountState.borrowerIndex[cToken];\n\n        // Update borrowers's index to the current index since we are distributing accrued Reward\n        accountState.borrowerIndex[cToken] = borrowIndex;\n\n        if (borrowerIndex == 0 && borrowIndex >= rewardInitialIndex) {\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\n            // Rewards the user with Reward accrued from the start of when borrower rewards were first\n            // set for the market.\n            borrowerIndex = rewardInitialIndex;\n        }\n\n        // Calculate change in the cumulative sum of the Reward per borrowed unit accrued\n        Double memory deltaIndex = Double({\n            mantissa: sub_(borrowIndex, borrowerIndex)\n        });\n\n        uint256 borrowerAmount = div_(\n            CTokenInterface(cToken).borrowBalanceStored(borrower),\n            marketBorrowIndex\n        );\n\n        // Calculate Reward accrued: cTokenAmount * accruedPerBorrowedUnit\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\n\n        accountState.rewardAccrued = add_(\n            accountState.rewardAccrued,\n            borrowerDelta\n        );\n\n        emit RewardAccrued(\n            rewardToken,\n            borrower,\n            borrowerDelta,\n            accountState.rewardAccrued\n        );\n    }\n\n    function claim(address[] memory holders) public {\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\n            claimInternal(rewardTokens[i], holders);\n        }\n    }\n\n    function claimInternal(\n        address rewardToken,\n        address[] memory holders\n    ) internal {\n        for (uint256 j = 0; j < holders.length; j++) {\n            RewardAccountState storage accountState = rewardAccountState[\n                rewardToken\n            ][holders[j]];\n\n            accountState.rewardAccrued = grantRewardInternal(\n                rewardToken,\n                holders[j],\n                accountState.rewardAccrued\n            );\n        }\n    }\n\n    function getBlockNumber() public view returns (uint32) {\n        return safe32(block.timestamp, \"block number exceeds 32 bits\");\n    }\n\n    function _grantReward(\n        address token,\n        address user,\n        uint256 amount\n    ) public onlyOwner {\n        require(\n            rewardTokenExists[token],\n            \"RewardDistributor: grant reward token does not exist\"\n        );\n        grantRewardInternal(token, user, amount);\n    }\n\n    /**\n     * @notice Transfer Reward to the user\n     * @dev Note: If there is not enough Reward, we do not perform the transfer all.\n     * @param user The address of the user to transfer Reward to\n     * @param amount The amount of Reward to (possibly) transfer\n     * @return The amount of Reward which was NOT transferred to the user\n     */\n    function grantRewardInternal(\n        address token,\n        address user,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 remaining = EIP20Interface(token).balanceOf(address(this));\n        if (amount > 0 && amount <= remaining) {\n            uint256 amountToSend = amount;\n            if (address(gShoebillToken) != address(0)) {\n                uint256 boostMultiplier = gShoebillToken.getBoostMultiplier(\n                    user\n                );\n                amountToSend = (amount * boostMultiplier) / 10000;\n            }\n\n            if (address(miningReferral) != address(0)) {\n                address referrer = miningReferral.getReferrer(user);\n                if (referrer != address(0)) {\n                    // 50:50 ratio for referrer and user\n                    uint256 referralAmount = (amount *\n                        (miningReferral.bonusRate(referrer))) / 10000;\n                    miningReferral.recordReferralCommission(\n                        referrer,\n                        referralAmount\n                    );\n\n                    // 1.send referral reward\n                    _stakeOrTransfer(token, referrer, referralAmount);\n                    // 2. update referee reward\n                    amountToSend = amountToSend + referralAmount;\n                }\n            }\n            // 3. send user reward\n            _stakeOrTransfer(token, user, amountToSend);\n\n            // 4. send team reward\n            uint256 teamReward = (amountToSend * teamRate[token]) / 10000;\n            _stakeOrTransfer(token, teamRewardReceiver, teamReward);\n\n            emit RewardGranted(token, user, amountToSend);\n\n            return 0;\n        }\n        return amount;\n    }\n\n    function _stakeOrTransfer(\n        address token,\n        address user,\n        uint256 amount\n    ) internal {\n        if (token == address(shoebillToken)) {\n            SafeERC20.safeApprove(\n                shoebillToken,\n                address(gShoebillToken),\n                amount\n            );\n            // stake\n            gShoebillToken.stake(user, amount);\n        } else {\n            // transfer\n            SafeERC20.safeTransfer(IERC20(token), user, amount);\n        }\n    }\n\n    /** Getters */\n    function getRewardTokens() public view returns (address[] memory) {\n        return rewardTokens;\n    }\n}\n"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c;\n        unchecked {\n            c = a + b;\n        }\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        uint256 c;\n        unchecked {\n            c = a + b;\n        }\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c;\n        unchecked {\n            c = a * b;\n        }\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c;\n        unchecked {\n            c = a * b;\n        }\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/ShoebillPoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// daily 10000 point in reward distributor\ncontract ShoebillPoint is ERC20 {\n    address public dev;\n\n    constructor() ERC20(\"Shoebill Point\", \"SBP\") {\n        dev = msg.sender;\n    }\n\n    function devBurn(address target, uint256 amount) external {\n        require(msg.sender == dev, \"dev: wut?\");\n        _burn(target, amount);\n    }\n\n    function devMint(address target, uint256 amount) external {\n        require(msg.sender == dev, \"dev: wut?\");\n        _mint(target, amount);\n    }\n\n    function setDev(address _dev) external {\n        require(msg.sender == dev, \"dev: wut?\");\n        dev = _dev;\n    }\n}\n"
    },
    "contracts/Stabilizer/Stabilizer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"../EIP20Interface.sol\";\n\n/**\n * @title Shoebill's Stabilizer Contract\n * @notice Stabilizer which arbitrages between native KLAY and Liquid Staked KLAY to keep the price of the token stable\n * @author Shoebill\n */\nabstract contract Stabilizer {\n    uint256 public allowedPriceDiff = 0.01e18; // 1 %\n\n    address public operator;\n\n    address public stakedToken;\n\n    address public baseToken = address(0);\n\n    constructor() {\n        operator = msg.sender;\n    }\n\n    function swapToUnPegged() external virtual;\n\n    function _unstake(uint256 amount) internal virtual;\n\n    function _redeem() internal virtual;\n\n    function unstake(uint256 amount) external virtual;\n\n    function unstakeAll() external virtual {\n        _unstake(EIP20Interface(stakedToken).balanceOf(address(this)));\n    }\n\n    function setPriceDiff(uint256 _allowedPriceDiff) external {\n        require(msg.sender == operator, \"only operator\");\n\n        allowedPriceDiff = _allowedPriceDiff;\n    }\n\n    function setStakedToken(address _stakedToken) external {\n        require(msg.sender == operator, \"only operator\");\n\n        stakedToken = _stakedToken;\n    }\n}\n"
    },
    "contracts/Stabilizer/StabilizerGcKLAY.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"./Stabilizer.sol\";\n\n/**\n * @title Shoebill's Stabilizer Contract\n * @notice Stabilizer which arbitrages between native KLAY and GCKLAY to keep the price of the token stable\n * @author Shoebill\n * @dev 1% price diff, 1 week unstaking period\n */\ncontract StabilizerGcKLAY is Stabilizer {\n    function swapToUnPegged() external override {}\n\n    function unstake(uint256 amount) external override {}\n\n    function _unstake(uint256 amount) internal override {}\n\n    function _redeem() internal override {}\n}\n"
    },
    "contracts/StWemixInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\ninterface StWemixInterface {\n    function phaseShift() external;\n\n    function feeUpdate(uint256 newFeePhaseTwo) external;\n\n    function feePhaseTwo() external view returns (uint256);\n\n    //=============== View Functions ===============//\n\n    function getTotalPooledWEMIXWithFee() external returns (uint256);\n\n    function rewardOf(\n        address account_\n    ) external view returns (uint256 rewardOf_);\n\n    function fee() external view returns (uint256 fee_);\n\n    function getSharesByPooledWEMIXWithFee(\n        uint256 wemixAmount_\n    ) external view returns (uint256 shareAmount_);\n\n    function getPooledWEMIXBySharesWithFee(\n        uint256 shareAmount_\n    ) external view returns (uint256 wemixAmount_);\n\n    //=============== Deposit & Withdraw ===============//\n\n    function deposit() external payable returns (uint256);\n\n    function withdraw(uint256 amount_) external payable returns (uint256);\n\n    function compound() external;\n}\n"
    },
    "contracts/Swap/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function transfer(address recipient, uint amount) external returns (bool);\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function balanceOf(address) external view returns (uint);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint amount\n    ) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n"
    },
    "contracts/Swap/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IWETH {\n    function deposit() external payable returns (uint);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function withdraw(uint) external returns (uint);\n}\n"
    },
    "contracts/Swap/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nlibrary Math {\n    function max(uint a, uint b) internal pure returns (uint) {\n        return a >= b ? a : b;\n    }\n\n    function min(uint a, uint b) internal pure returns (uint) {\n        return a < b ? a : b;\n    }\n\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    function cbrt(uint256 n) internal pure returns (uint256) {\n        unchecked {\n            uint256 x = 0;\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\n                x <<= 1;\n                uint256 z = 3 * x * (x + 1) + 1;\n                if (n / y >= z) {\n                    n -= y * z;\n                    x += 1;\n                }\n            }\n            return x;\n        }\n    }\n}\n"
    },
    "contracts/Swap/Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC20} from \"./IERC20.sol\";\nimport {Math} from \"./Math.sol\";\nimport {PairFees} from \"./PairFees.sol\";\nimport {PairFactoryInterface} from \"./PairFactoryInterface.sol\";\n\ninterface IPairCallee {\n    function hook(\n        address sender,\n        uint amount0,\n        uint amount1,\n        bytes calldata data\n    ) external;\n}\n\ncontract Pair is Initializable {\n    string public name;\n    string public symbol;\n    uint8 public constant decimals = 18;\n\n    /// @notice Used to denote stable or volatile pair, not immutable since construction happens in the initialize method for CREATE2 deterministic addresses\n    bool public stable;\n\n    uint256 public totalSupply;\n\n    mapping(address => mapping(address => uint)) public allowance;\n    mapping(address => uint) public balanceOf;\n\n    bytes32 internal DOMAIN_SEPARATOR;\n    /// @dev keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 internal constant PERMIT_TYPEHASH =\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public nonces;\n\n    uint256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\n\n    address public token0;\n    address public token1;\n    address public fees;\n    address public factory;\n\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\n    struct Observation {\n        uint timestamp;\n        uint reserve0Cumulative;\n        uint reserve1Cumulative;\n    }\n\n    // Capture oracle reading every 30 minutes\n    uint constant periodSize = 1800;\n\n    Observation[] public observations;\n\n    uint internal decimals0;\n    uint internal decimals1;\n\n    uint public reserve0;\n    uint public reserve1;\n    uint public blockTimestampLast;\n\n    uint public reserve0CumulativeLast;\n    uint public reserve1CumulativeLast;\n\n    /// @dev simple re-entrancy check\n    bool internal _locked;\n\n    event Fees(address indexed sender, uint amount0, uint amount1);\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(\n        address indexed sender,\n        uint amount0,\n        uint amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint reserve0, uint reserve1);\n    event Claim(\n        address indexed sender,\n        address indexed recipient,\n        uint amount0,\n        uint amount1\n    );\n\n    event Transfer(address indexed from, address indexed to, uint amount);\n    event Approval(address indexed owner, address indexed spender, uint amount);\n\n    modifier lock() {\n        require(!_locked, \"No re-entrancy\");\n        _locked = true;\n        _;\n        _locked = false;\n    }\n\n    function initialize() public initializer {\n        factory = msg.sender;\n        (address _token0, address _token1, bool _stable) = PairFactoryInterface(\n            msg.sender\n        ).getInitializable();\n        (token0, token1, stable) = (_token0, _token1, _stable);\n        PairFees pairFees = new PairFees();\n        pairFees.initialize(_token0, _token1);\n        fees = address(pairFees);\n\n        if (_stable) {\n            name = string(\n                abi.encodePacked(\n                    \"Stable AMM - \",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n            symbol = string(\n                abi.encodePacked(\n                    \"sAMM-\",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n        } else {\n            name = string(\n                abi.encodePacked(\n                    \"Volatile AMM - \",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n            symbol = string(\n                abi.encodePacked(\n                    \"vAMM-\",\n                    IERC20(_token0).symbol(),\n                    \"/\",\n                    IERC20(_token1).symbol()\n                )\n            );\n        }\n\n        decimals0 = 10 ** IERC20(_token0).decimals();\n        decimals1 = 10 ** IERC20(_token1).decimals();\n\n        observations.push(Observation(block.timestamp, 0, 0));\n    }\n\n    function observationLength() external view returns (uint) {\n        return observations.length;\n    }\n\n    function lastObservation() public view returns (Observation memory) {\n        return observations[observations.length - 1];\n    }\n\n    function metadata()\n        external\n        view\n        returns (\n            uint dec0,\n            uint dec1,\n            uint r0,\n            uint r1,\n            bool st,\n            address t0,\n            address t1\n        )\n    {\n        return (\n            decimals0,\n            decimals1,\n            reserve0,\n            reserve1,\n            stable,\n            token0,\n            token1\n        );\n    }\n\n    function tokens() external view returns (address, address) {\n        return (token0, token1);\n    }\n\n    /// @dev claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\n    function claimFees() external returns (uint claimed0, uint claimed1) {\n        require(\n            msg.sender == PairFactoryInterface(factory).feeManager(),\n            \"not fee manager\"\n        );\n\n        claimed0 = IERC20(token0).balanceOf(address(fees));\n        claimed1 = IERC20(token1).balanceOf(address(fees));\n\n        PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\n        emit Claim(msg.sender, msg.sender, claimed0, claimed1);\n    }\n\n    /// @dev Accrue fees on token0\n    /// @dev all fees go to PairFees contract\n    function _update0(uint amount) internal {\n        _safeTransfer(token0, fees, amount); // transfer the fees out to PairFees\n\n        emit Fees(msg.sender, amount, 0);\n    }\n\n    /// @dev Accrue fees on token1\n    /// @dev all fees go to PairFees contract\n\n    function _update1(uint amount) internal {\n        _safeTransfer(token1, fees, amount);\n        emit Fees(msg.sender, 0, amount);\n    }\n\n    /// @dev Deprecate _updateFor, all fees go to PairFees contract\n\n    function getReserves()\n        public\n        view\n        returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast)\n    {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    /// @dev update reserves and, on the first call per block, price accumulators\n    function _update(\n        uint balance0,\n        uint balance1,\n        uint _reserve0,\n        uint _reserve1\n    ) internal {\n        uint blockTimestamp = block.timestamp;\n        uint timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            reserve0CumulativeLast += _reserve0 * timeElapsed;\n            reserve1CumulativeLast += _reserve1 * timeElapsed;\n        }\n\n        Observation memory _point = lastObservation();\n        timeElapsed = blockTimestamp - _point.timestamp; // compare the last observation with current timestamp, if greater than 30 minutes, record a new event\n        if (timeElapsed > periodSize) {\n            observations.push(\n                Observation(\n                    blockTimestamp,\n                    reserve0CumulativeLast,\n                    reserve1CumulativeLast\n                )\n            );\n        }\n        reserve0 = balance0;\n        reserve1 = balance1;\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    /// @dev produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices()\n        public\n        view\n        returns (\n            uint reserve0Cumulative,\n            uint reserve1Cumulative,\n            uint blockTimestamp\n        )\n    {\n        blockTimestamp = block.timestamp;\n        reserve0Cumulative = reserve0CumulativeLast;\n        reserve1Cumulative = reserve1CumulativeLast;\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (\n            uint _reserve0,\n            uint _reserve1,\n            uint _blockTimestampLast\n        ) = getReserves();\n        if (_blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint timeElapsed = blockTimestamp - _blockTimestampLast;\n            reserve0Cumulative += _reserve0 * timeElapsed;\n            reserve1Cumulative += _reserve1 * timeElapsed;\n        }\n    }\n\n    /// @dev gives the current twap price measured from amountIn * tokenIn gives amountOut\n    function current(\n        address tokenIn,\n        uint amountIn\n    ) external view returns (uint amountOut) {\n        Observation memory _observation = lastObservation();\n        (\n            uint reserve0Cumulative,\n            uint reserve1Cumulative,\n\n        ) = currentCumulativePrices();\n        if (block.timestamp == _observation.timestamp) {\n            _observation = observations[observations.length - 2];\n        }\n\n        uint timeElapsed = block.timestamp - _observation.timestamp;\n        uint _reserve0 = (reserve0Cumulative -\n            _observation.reserve0Cumulative) / timeElapsed;\n        uint _reserve1 = (reserve1Cumulative -\n            _observation.reserve1Cumulative) / timeElapsed;\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\n    }\n\n    /// @dev as per `current`, however allows user configured granularity, up to the full window size\n    function quote(\n        address tokenIn,\n        uint amountIn,\n        uint granularity\n    ) external view returns (uint amountOut) {\n        uint[] memory _prices = sample(tokenIn, amountIn, granularity, 1);\n        uint priceAverageCumulative;\n        for (uint i = 0; i < _prices.length; i++) {\n            priceAverageCumulative += _prices[i];\n        }\n        return priceAverageCumulative / granularity;\n    }\n\n    /// @dev returns a memory set of twap prices\n    function prices(\n        address tokenIn,\n        uint amountIn,\n        uint points\n    ) external view returns (uint[] memory) {\n        return sample(tokenIn, amountIn, points, 1);\n    }\n\n    function sample(\n        address tokenIn,\n        uint amountIn,\n        uint points,\n        uint window\n    ) public view returns (uint[] memory) {\n        uint[] memory _prices = new uint[](points);\n\n        uint length = observations.length - 1;\n        uint i = length - (points * window);\n        uint nextIndex = 0;\n        uint index = 0;\n\n        for (; i < length; i += window) {\n            nextIndex = i + window;\n            uint timeElapsed = observations[nextIndex].timestamp -\n                observations[i].timestamp;\n            uint _reserve0 = (observations[nextIndex].reserve0Cumulative -\n                observations[i].reserve0Cumulative) / timeElapsed;\n            uint _reserve1 = (observations[nextIndex].reserve1Cumulative -\n                observations[i].reserve1Cumulative) / timeElapsed;\n            _prices[index] = _getAmountOut(\n                amountIn,\n                tokenIn,\n                _reserve0,\n                _reserve1\n            );\n            // index < length; length cannot overflow\n            unchecked {\n                index = index + 1;\n            }\n        }\n        return _prices;\n    }\n\n    /**\n     * @notice this low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\n     * standard uniswap v2 implementation\n     */\n    function mint(address to) external lock returns (uint liquidity) {\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\n        uint _balance0 = IERC20(token0).balanceOf(address(this));\n        uint _balance1 = IERC20(token1).balanceOf(address(this));\n        uint _amount0 = _balance0 - _reserve0;\n        uint _amount1 = _balance1 - _reserve1;\n\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(\n                (_amount0 * _totalSupply) / _reserve0,\n                (_amount1 * _totalSupply) / _reserve1\n            );\n        }\n        require(liquidity > 0, \"ILM\"); // Pair: INSUFFICIENT_LIQUIDITY_MINTED\n        _mint(to, liquidity);\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Mint(msg.sender, _amount0, _amount1);\n    }\n\n    /**\n     * @notice this low-level function should be called from a contract which performs important safety checks\n     * standard uniswap v2 implementation\n     */\n    function burn(\n        address to\n    ) external lock returns (uint amount0, uint amount1) {\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\n        (address _token0, address _token1) = (token0, token1);\n        uint _balance0 = IERC20(_token0).balanceOf(address(this));\n        uint _balance1 = IERC20(_token1).balanceOf(address(this));\n        uint _liquidity = balanceOf[address(this)];\n\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = (_liquidity * _balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = (_liquidity * _balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, \"ILB\"); // Pair: INSUFFICIENT_LIQUIDITY_BURNED\n        _burn(address(this), _liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        _balance0 = IERC20(_token0).balanceOf(address(this));\n        _balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    /// @dev this low-level function should be called from a contract which performs important safety checks\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external lock {\n        require(!PairFactoryInterface(factory).isPaused());\n        require(amount0Out > 0 || amount1Out > 0, \"IOA\"); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \"IL\"); // Pair: INSUFFICIENT_LIQUIDITY\n\n        uint _balance0;\n        uint _balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            (address _token0, address _token1) = (token0, token1);\n            require(to != _token0 && to != _token1, \"IT\"); // Pair: INVALID_TO\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n            if (data.length > 0)\n                IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\n            _balance0 = IERC20(_token0).balanceOf(address(this));\n            _balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = _balance0 > _reserve0 - amount0Out\n            ? _balance0 - (_reserve0 - amount0Out)\n            : 0;\n        uint amount1In = _balance1 > _reserve1 - amount1Out\n            ? _balance1 - (_reserve1 - amount1Out)\n            : 0;\n        require(amount0In > 0 || amount1In > 0, \"IIA\"); // Pair: INSUFFICIENT_INPUT_AMOUNT\n        {\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n            (address _token0, address _token1) = (token0, token1);\n            if (amount0In > 0)\n                _update0(\n                    // TODO: change calc fee method to dynamic with reference oracle?\n                    (amount0In *\n                        PairFactoryInterface(factory).getFee(stable, token0)) /\n                        10000\n                ); // accrue fees for token0 and move them out of pool\n            if (amount1In > 0)\n                _update1(\n                    (amount1In *\n                        PairFactoryInterface(factory).getFee(stable, token1)) /\n                        10000\n                ); // accrue fees for token1 and move them out of pool\n            _balance0 = IERC20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\n            _balance1 = IERC20(_token1).balanceOf(address(this));\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\n            require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), \"K\"); // Pair: K\n        }\n\n        _update(_balance0, _balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    /// @dev force balances to match reserves\n    function skim(address to) external lock {\n        (address _token0, address _token1) = (token0, token1);\n        _safeTransfer(\n            _token0,\n            to,\n            IERC20(_token0).balanceOf(address(this)) - (reserve0)\n        );\n        _safeTransfer(\n            _token1,\n            to,\n            IERC20(_token1).balanceOf(address(this)) - (reserve1)\n        );\n    }\n\n    /// @dev force reserves to match balances\n    function sync() external lock {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this)),\n            reserve0,\n            reserve1\n        );\n    }\n\n    function _f(uint x0, uint y) internal pure returns (uint) {\n        return\n            (x0 * ((((y * y) / 1e18) * y) / 1e18)) /\n            1e18 +\n            (((((x0 * x0) / 1e18) * x0) / 1e18) * y) /\n            1e18;\n    }\n\n    function _d(uint x0, uint y) internal pure returns (uint) {\n        return\n            (3 * x0 * ((y * y) / 1e18)) /\n            1e18 +\n            ((((x0 * x0) / 1e18) * x0) / 1e18);\n    }\n\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\n        for (uint i = 0; i < 255; i++) {\n            uint y_prev = y;\n            uint k = _f(x0, y);\n            if (k < xy) {\n                uint dy = ((xy - k) * 1e18) / _d(x0, y);\n                y = y + dy;\n            } else {\n                uint dy = ((k - xy) * 1e18) / _d(x0, y);\n                y = y - dy;\n            }\n            if (y > y_prev) {\n                if (y - y_prev <= 1) {\n                    return y;\n                }\n            } else {\n                if (y_prev - y <= 1) {\n                    return y;\n                }\n            }\n        }\n        return y;\n    }\n\n    function getAmountOut(\n        uint amountIn,\n        address tokenIn\n    ) external view returns (uint) {\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\n        amountIn -=\n            (amountIn * PairFactoryInterface(factory).getFee(stable, tokenIn)) /\n            10000; // remove fee from amount received\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\n    }\n\n    function _getAmountOut(\n        uint amountIn,\n        address tokenIn,\n        uint _reserve0,\n        uint _reserve1\n    ) internal view returns (uint) {\n        if (stable) {\n            // if (tokenIn == token0) {\n            //     _reserve0 = adjustAmount(token0, _reserve0);\n            //     _reserve1 = adjustAmount(token1, _reserve1);\n            // } else {\n            //     _reserve0 = adjustAmount(token1, _reserve0);\n            //     _reserve1 = adjustAmount(token0, _reserve1);\n            // }\n\n            uint xy = _k(_reserve0, _reserve1);\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\n            (uint reserveA, uint reserveB) = tokenIn == token0\n                ? (_reserve0, _reserve1)\n                : (_reserve1, _reserve0);\n            amountIn = tokenIn == token0\n                ? (amountIn * 1e18) / decimals0\n                : (amountIn * 1e18) / decimals1;\n            uint y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\n        } else {\n            (uint reserveA, uint reserveB) = tokenIn == token0\n                ? (_reserve0, _reserve1)\n                : (_reserve1, _reserve0);\n            return (amountIn * reserveB) / (reserveA + amountIn);\n        }\n    }\n\n    function _k(uint x, uint y) internal view returns (uint) {\n        if (stable) {\n            uint _x = (x * 1e18) / decimals0;\n            uint _y = (y * 1e18) / decimals1;\n            uint _a = (_x * _y) / 1e18;\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\n            return (_a * _b) / 1e18; // x3y+y3x >= k\n        } else {\n            return x * y; // xy >= k\n        }\n    }\n\n    function _mint(address dst, uint amount) internal {\n        totalSupply += amount;\n        balanceOf[dst] += amount;\n        emit Transfer(address(0), dst, amount);\n    }\n\n    function _burn(address dst, uint amount) internal {\n        totalSupply -= amount;\n        balanceOf[dst] -= amount;\n        emit Transfer(dst, address(0), amount);\n    }\n\n    function approve(address spender, uint amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint value,\n        uint deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        require(deadline >= block.timestamp, \"Pair: EXPIRED\");\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name)),\n                keccak256(bytes(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        owner,\n                        spender,\n                        value,\n                        nonces[owner]++,\n                        deadline\n                    )\n                )\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(\n            recoveredAddress != address(0) && recoveredAddress == owner,\n            \"Pair: INVALID_SIGNATURE\"\n        );\n        allowance[owner][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function transfer(address dst, uint amount) external returns (bool) {\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint amount\n    ) external returns (bool) {\n        address spender = msg.sender;\n        uint spenderAllowance = allowance[src][spender];\n\n        if (spender != src && spenderAllowance != type(uint).max) {\n            uint newAllowance = spenderAllowance - amount;\n            allowance[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    function _transferTokens(address src, address dst, uint amount) internal {\n        balanceOf[src] -= amount;\n        balanceOf[dst] += amount;\n\n        emit Transfer(src, dst, amount);\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) internal {\n        require(token.code.length > 0, \"Pair: invalid token\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"Pair: transfer failed\"\n        );\n    }\n}\n"
    },
    "contracts/Swap/PairFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {Pair} from \"./Pair.sol\";\n\ncontract PairFactory is Initializable {\n    bool public isPaused;\n    address public pauser;\n    address public pendingPauser;\n\n    // TODO: dynamic fee stable base 0.04% , max 1%, price 시작부터, max 3% 차이, (1, 위믹스파이 교환비로 수수료 책정) optional\n    // TODO: stWEMIX 교환비 나누는거 넣기 optional\n    uint256 public stableFee;\n    uint256 public volatileFee;\n    uint256 public MAX_FEE = 100; // 1%\n    uint256 public MAX_PRICE_DIFF = 300; // 3%\n    address public feeManager;\n    address public pendingFeeManager;\n\n    mapping(address => mapping(address => mapping(bool => address)))\n        public getPair;\n    address[] public allPairs;\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\n\n    address internal _temp0;\n    address internal _temp1;\n    bool internal _temp;\n\n    // TODO: implement reference oracle, and dynamic fee calculation function\n    mapping(address => address) public referenceOracle;\n    // TODO: exchange Rate Oracle for lsd, add pair pause function here to avoid price manipulation before add exchange rate\n    // if wemix : stWEMIX = not 1:1 , 1:1.1 => adjust reserve of stwemix by multiplying 1.1 or get external call data from stwemix share\n    address public exchangeRateRef;\n\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        bool stable,\n        address pair,\n        uint\n    );\n\n    function initialize() public initializer {\n        pauser = msg.sender;\n        isPaused = false;\n        feeManager = msg.sender;\n        stableFee = 2; // 0.02%\n        volatileFee = 20; // 0.2%\n    }\n\n    function allPairsLength() external view returns (uint) {\n        return allPairs.length;\n    }\n\n    function setPauser(address _pauser) external {\n        require(msg.sender == pauser, \"PairFactory: not a pauser\");\n        pendingPauser = _pauser;\n    }\n\n    function acceptPauser() external {\n        require(\n            msg.sender == pendingPauser,\n            \"PairFactory: not a pendingPauser\"\n        );\n        pauser = pendingPauser;\n    }\n\n    function setPause(bool _state) external {\n        require(msg.sender == pauser, \"PairFactory: not a pauser\");\n        isPaused = _state;\n    }\n\n    function setFeeManager(address _feeManager) external {\n        require(msg.sender == feeManager, \"not fee manager\");\n        pendingFeeManager = _feeManager;\n    }\n\n    function acceptFeeManager() external {\n        require(msg.sender == pendingFeeManager, \"not pending fee manager\");\n        feeManager = pendingFeeManager;\n    }\n\n    function setFee(bool _stable, uint256 _fee) external {\n        require(msg.sender == feeManager, \"not fee manager\");\n        require(_fee <= MAX_FEE, \"fee too high\");\n        require(_fee != 0, \"fee must be nonzero\");\n        if (_stable) {\n            stableFee = _fee;\n        } else {\n            volatileFee = _fee;\n        }\n    }\n\n    function setExchangeRateRef(address _ref) external {\n        require(msg.sender == feeManager, \"not fee manager\");\n        exchangeRateRef = _ref;\n    }\n\n    function getFee(\n        bool _stable,\n        address _baseToken\n    ) public view returns (uint256) {\n        // if(referenceOracle[_baseToken]) {\n        // uint256 baseFee = _stable ? stableFee : volatileFee;\n\n        // } else {\n\n        return _stable ? stableFee : volatileFee;\n        // }\n    }\n\n    function pairCodeHash() external pure returns (bytes32) {\n        return keccak256(type(Pair).creationCode);\n    }\n\n    function getInitializable() external view returns (address, address, bool) {\n        return (_temp0, _temp1, _temp);\n    }\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external returns (address pair) {\n        require(tokenA != tokenB, \"IA\"); // Pair: IDENTICAL_ADDRESSES\n        (address token0, address token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"ZA\"); // Pair: ZERO_ADDRESS\n        require(getPair[token0][token1][stable] == address(0), \"PE\"); // Pair: PAIR_EXISTS - single check is sufficient\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\n        (_temp0, _temp1, _temp) = (token0, token1, stable);\n        Pair newPair = new Pair{salt: salt}();\n        newPair.initialize();\n        pair = address(newPair);\n        getPair[token0][token1][stable] = pair;\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        isPair[pair] = true;\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\n    }\n}\n"
    },
    "contracts/Swap/PairFactoryInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface PairFactoryInterface {\n    function isPaused() external view returns (bool);\n\n    function allPairsLength() external view returns (uint);\n\n    function isPair(address pair) external view returns (bool);\n\n    function getFee(\n        bool _stable,\n        address _baseToken\n    ) external view returns (uint256);\n\n    function feeManager() external view returns (address);\n\n    function pairCodeHash() external pure returns (bytes32);\n\n    function getPair(\n        address tokenA,\n        address token,\n        bool stable\n    ) external view returns (address);\n\n    function getInitializable() external view returns (address, address, bool);\n\n    function createPair(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external returns (address pair);\n}\n"
    },
    "contracts/Swap/PairFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {IERC20} from \"./IERC20.sol\";\n\n/**\n * @title Pair Fees\n * @notice used as a 1:1 pair relationship to split out fees, this ensures\n * that the curve does not need to be modified for LP shares\n */\n\ncontract PairFees is Initializable {\n    address internal pair; // The pair it is bonded to\n    address internal token0; // token0 of pair, saved localy and statically for gas optimization\n    address internal token1; // Token1 of pair, saved localy and statically for gas optimization\n\n    function initialize(address _token0, address _token1) public initializer {\n        pair = msg.sender;\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) internal {\n        require(token.code.length > 0, \"PairFees: invalid token\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"PairFees: transfer failed\"\n        );\n    }\n\n    // Allow the pair to transfer fees to users\n    function claimFeesFor(\n        address recipient,\n        uint amount0,\n        uint amount1\n    ) external {\n        require(msg.sender == pair, \"Only pair contract can call\");\n        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\n        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\n    }\n}\n"
    },
    "contracts/Swap/PairInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface PairInterface {\n    function metadata()\n        external\n        view\n        returns (\n            uint dec0,\n            uint dec1,\n            uint r0,\n            uint r1,\n            bool st,\n            address t0,\n            address t1\n        );\n\n    function claimFees() external returns (uint, uint);\n\n    function tokens() external returns (address, address);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint amount\n    ) external returns (bool);\n\n    function permit(\n        address owner,\n        address spender,\n        uint value,\n        uint deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function swap(\n        uint amount0Out,\n        uint amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function burn(address to) external returns (uint amount0, uint amount1);\n\n    function mint(address to) external returns (uint liquidity);\n\n    function getReserves()\n        external\n        view\n        returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\n\n    function getAmountOut(uint, address) external view returns (uint);\n}\n"
    },
    "contracts/Swap/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {Math} from \"./Math.sol\";\nimport {PairInterface} from \"./PairInterface.sol\";\nimport {PairFactoryInterface} from \"./PairFactoryInterface.sol\";\nimport {IWETH} from \"./IWETH.sol\";\nimport {RouterInterface} from \"./RouterInterface.sol\";\n\ncontract Router is RouterInterface {\n    struct Route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    uint internal constant MINIMUM_LIQUIDITY = 10 ** 3;\n    address public immutable factory;\n    IWETH public immutable weth;\n    bytes32 public immutable pairCodeHash;\n\n    modifier ensure(uint deadline) {\n        require(deadline >= block.timestamp, \"Router: EXPIRED\");\n        _;\n    }\n\n    constructor(address _factory, address _weth) {\n        factory = _factory;\n        pairCodeHash = PairFactoryInterface(_factory).pairCodeHash();\n        weth = IWETH(_weth);\n    }\n\n    /// @dev only accept ETH via fallback from the WETH contract\n    receive() external payable {\n        assert(msg.sender == address(weth));\n    }\n\n    function sortTokens(\n        address tokenA,\n        address tokenB\n    ) public pure returns (address token0, address token1) {\n        require(tokenA != tokenB, \"Router: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"Router: ZERO_ADDRESS\");\n    }\n\n    /// @dev calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) public view returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1, stable)),\n                            pairCodeHash // init code hash\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    /// @dev given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quoteLiquidity(\n        uint amountA,\n        uint reserveA,\n        uint reserveB\n    ) internal pure returns (uint amountB) {\n        require(amountA > 0, \"Router: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"Router: INSUFFICIENT_LIQUIDITY\");\n        amountB = (amountA * reserveB) / reserveA;\n    }\n\n    /// @dev fetches and sorts the reserves for a pair\n    function getReserves(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) public view returns (uint reserveA, uint reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1, ) = PairInterface(\n            pairFor(tokenA, tokenB, stable)\n        ).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    /// @dev performs chained getAmountOut calculations on any number of pairs\n    function getAmountOut(\n        uint amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint amount, bool stable) {\n        address pair = pairFor(tokenIn, tokenOut, true);\n        uint amountStable;\n        uint amountVolatile;\n        if (PairFactoryInterface(factory).isPair(pair)) {\n            amountStable = PairInterface(pair).getAmountOut(amountIn, tokenIn);\n        }\n        pair = pairFor(tokenIn, tokenOut, false);\n        if (PairFactoryInterface(factory).isPair(pair)) {\n            amountVolatile = PairInterface(pair).getAmountOut(\n                amountIn,\n                tokenIn\n            );\n        }\n        return\n            amountStable > amountVolatile\n                ? (amountStable, true)\n                : (amountVolatile, false);\n    }\n\n    /// @dev performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        uint amountIn,\n        Route[] memory routes\n    ) public view returns (uint[] memory amounts) {\n        require(routes.length >= 1, \"Router: INVALID_PATH\");\n        amounts = new uint[](routes.length + 1);\n        amounts[0] = amountIn;\n        for (uint i = 0; i < routes.length; i++) {\n            address pair = pairFor(\n                routes[i].from,\n                routes[i].to,\n                routes[i].stable\n            );\n            if (PairFactoryInterface(factory).isPair(pair)) {\n                amounts[i + 1] = PairInterface(pair).getAmountOut(\n                    amounts[i],\n                    routes[i].from\n                );\n            }\n        }\n    }\n\n    function isPair(address pair) external view returns (bool) {\n        return PairFactoryInterface(factory).isPair(pair);\n    }\n\n    function quoteAddLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint amountADesired,\n        uint amountBDesired\n    ) external view returns (uint amountA, uint amountB, uint liquidity) {\n        // create the pair if it doesn't exist yet\n        address _pair = PairFactoryInterface(factory).getPair(\n            tokenA,\n            tokenB,\n            stable\n        );\n        (uint reserveA, uint reserveB) = (0, 0);\n        uint _totalSupply = 0;\n        if (_pair != address(0)) {\n            _totalSupply = IERC20(_pair).totalSupply();\n            (reserveA, reserveB) = getReserves(tokenA, tokenB, stable);\n        }\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n            liquidity = Math.sqrt(amountA * amountB) - MINIMUM_LIQUIDITY;\n        } else {\n            uint amountBOptimal = quoteLiquidity(\n                amountADesired,\n                reserveA,\n                reserveB\n            );\n            if (amountBOptimal <= amountBDesired) {\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n                liquidity = Math.min(\n                    (amountA * _totalSupply) / reserveA,\n                    (amountB * _totalSupply) / reserveB\n                );\n            } else {\n                uint amountAOptimal = quoteLiquidity(\n                    amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n                liquidity = Math.min(\n                    (amountA * _totalSupply) / reserveA,\n                    (amountB * _totalSupply) / reserveB\n                );\n            }\n        }\n    }\n\n    function quoteRemoveLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint liquidity\n    ) external view returns (uint amountA, uint amountB) {\n        // create the pair if it doesn't exist yet\n        address _pair = PairFactoryInterface(factory).getPair(\n            tokenA,\n            tokenB,\n            stable\n        );\n\n        if (_pair == address(0)) {\n            return (0, 0);\n        }\n\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);\n        uint _totalSupply = IERC20(_pair).totalSupply();\n\n        amountA = (liquidity * reserveA) / _totalSupply; // using balances ensures pro-rata distribution\n        amountB = (liquidity * reserveB) / _totalSupply; // using balances ensures pro-rata distribution\n    }\n\n    function _addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin\n    ) internal returns (uint amountA, uint amountB) {\n        require(\n            amountADesired >= amountAMin,\n            \"Router: invalid desired amountA\"\n        );\n        require(\n            amountBDesired >= amountBMin,\n            \"Router: invalid desired amountB\"\n        );\n        // create the pair if it doesn't exist yet\n        address _pair = PairFactoryInterface(factory).getPair(\n            tokenA,\n            tokenB,\n            stable\n        );\n        if (_pair == address(0)) {\n            _pair = PairFactoryInterface(factory).createPair(\n                tokenA,\n                tokenB,\n                stable\n            );\n        }\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB, stable);\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (amountADesired, amountBDesired);\n        } else {\n            uint amountBOptimal = quoteLiquidity(\n                amountADesired,\n                reserveA,\n                reserveB\n            );\n            if (amountBOptimal <= amountBDesired) {\n                require(\n                    amountBOptimal >= amountBMin,\n                    \"Router: INSUFFICIENT_B_AMOUNT\"\n                );\n                (amountA, amountB) = (amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = quoteLiquidity(\n                    amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                assert(amountAOptimal <= amountADesired);\n                require(\n                    amountAOptimal >= amountAMin,\n                    \"Router: INSUFFICIENT_A_AMOUNT\"\n                );\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\n            }\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    )\n        external\n        ensure(deadline)\n        returns (uint amountA, uint amountB, uint liquidity)\n    {\n        (amountA, amountB) = _addLiquidity(\n            tokenA,\n            tokenB,\n            stable,\n            amountADesired,\n            amountBDesired,\n            amountAMin,\n            amountBMin\n        );\n        address pair = pairFor(tokenA, tokenB, stable);\n        _safeTransferFrom(tokenA, msg.sender, pair, amountA);\n        _safeTransferFrom(tokenB, msg.sender, pair, amountB);\n        liquidity = PairInterface(pair).mint(to);\n    }\n\n    function addLiquidityETH(\n        address token,\n        bool stable,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    )\n        external\n        payable\n        ensure(deadline)\n        returns (uint amountToken, uint amountETH, uint liquidity)\n    {\n        (amountToken, amountETH) = _addLiquidity(\n            token,\n            address(weth),\n            stable,\n            amountTokenDesired,\n            msg.value,\n            amountTokenMin,\n            amountETHMin\n        );\n        address pair = pairFor(token, address(weth), stable);\n        _safeTransferFrom(token, msg.sender, pair, amountToken);\n        weth.deposit{value: amountETH}();\n        assert(weth.transfer(pair, amountETH));\n        liquidity = PairInterface(pair).mint(to);\n        // refund dust eth, if any\n        if (msg.value > amountETH)\n            _safeTransferETH(msg.sender, msg.value - amountETH);\n    }\n\n    // **** REMOVE LIQUIDITY ****\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\n        address pair = pairFor(tokenA, tokenB, stable);\n        require(\n            PairInterface(pair).transferFrom(msg.sender, pair, liquidity),\n            \"Router: transfer failed\"\n        ); // send liquidity to pair\n        (uint amount0, uint amount1) = PairInterface(pair).burn(to);\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (amountA, amountB) = tokenA == token0\n            ? (amount0, amount1)\n            : (amount1, amount0);\n        require(amountA >= amountAMin, \"Router: INSUFFICIENT_A_AMOUNT\");\n        require(amountB >= amountBMin, \"Router: INSUFFICIENT_B_AMOUNT\");\n    }\n\n    function removeLiquidityETH(\n        address token,\n        bool stable,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) public ensure(deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            token,\n            address(weth),\n            stable,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            address(this),\n            deadline\n        );\n        _safeTransfer(token, to, amountToken);\n        weth.withdraw(amountETH);\n        _safeTransferETH(to, amountETH);\n    }\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint amountA, uint amountB) {\n        address pair = pairFor(tokenA, tokenB, stable);\n        {\n            uint value = approveMax ? type(uint).max : liquidity;\n            PairInterface(pair).permit(\n                msg.sender,\n                address(this),\n                value,\n                deadline,\n                v,\n                r,\n                s\n            );\n        }\n\n        (amountA, amountB) = removeLiquidity(\n            tokenA,\n            tokenB,\n            stable,\n            liquidity,\n            amountAMin,\n            amountBMin,\n            to,\n            deadline\n        );\n    }\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        bool stable,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint amountToken, uint amountETH) {\n        address pair = pairFor(token, address(weth), stable);\n        uint value = approveMax ? type(uint).max : liquidity;\n        PairInterface(pair).permit(\n            msg.sender,\n            address(this),\n            value,\n            deadline,\n            v,\n            r,\n            s\n        );\n        (amountToken, amountETH) = removeLiquidityETH(\n            token,\n            stable,\n            liquidity,\n            amountTokenMin,\n            amountETHMin,\n            to,\n            deadline\n        );\n    }\n\n    // **** SWAP ****\n    /// @dev requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint[] memory amounts,\n        Route[] memory routes,\n        address _to\n    ) internal virtual {\n        for (uint i = 0; i < routes.length; i++) {\n            (address token0, ) = sortTokens(routes[i].from, routes[i].to);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = routes[i].from == token0\n                ? (uint(0), amountOut)\n                : (amountOut, uint(0));\n            address to = i < routes.length - 1\n                ? pairFor(\n                    routes[i + 1].from,\n                    routes[i + 1].to,\n                    routes[i + 1].stable\n                )\n                : _to;\n            PairInterface(\n                pairFor(routes[i].from, routes[i].to, routes[i].stable)\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n    }\n\n    function swapExactTokensForTokensSimple(\n        uint amountIn,\n        uint amountOutMin,\n        address tokenFrom,\n        address tokenTo,\n        bool stable,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory amounts) {\n        Route[] memory routes = new Route[](1);\n        routes[0].from = tokenFrom;\n        routes[0].to = tokenTo;\n        routes[0].stable = stable;\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, to);\n    }\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory amounts) {\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, to);\n    }\n\n    function swapExactETHForTokens(\n        uint amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint deadline\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\n        require(routes[0].from == address(weth), \"Router: INVALID_PATH\");\n        amounts = getAmountsOut(msg.value, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        weth.deposit{value: amounts[0]}();\n        assert(\n            weth.transfer(\n                pairFor(routes[0].from, routes[0].to, routes[0].stable),\n                amounts[0]\n            )\n        );\n        _swap(amounts, routes, to);\n    }\n\n    function swapExactTokensForETH(\n        uint amountIn,\n        uint amountOutMin,\n        Route[] calldata routes,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory amounts) {\n        require(\n            routes[routes.length - 1].to == address(weth),\n            \"Router: INVALID_PATH\"\n        );\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, address(this));\n        weth.withdraw(amounts[amounts.length - 1]);\n        _safeTransferETH(to, amounts[amounts.length - 1]);\n    }\n\n    function UNSAFE_swapExactTokensForTokens(\n        uint[] memory amounts,\n        Route[] calldata routes,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory) {\n        _safeTransferFrom(\n            routes[0].from,\n            msg.sender,\n            pairFor(routes[0].from, routes[0].to, routes[0].stable),\n            amounts[0]\n        );\n        _swap(amounts, routes, to);\n        return amounts;\n    }\n\n    function _safeTransferETH(address to, uint value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) internal {\n        require(token.code.length > 0, \"Router: invalid token\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"Router: token transfer failed\"\n        );\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"Router: invalid token\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"Router: token transfer failed\"\n        );\n    }\n}\n"
    },
    "contracts/Swap/RouterInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface RouterInterface {\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external view returns (address pair);\n\n    function factory() external view returns (address);\n}\n"
    },
    "contracts/Swap/Wrapper/RebasedSbWemix.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {WrapperUpgradeable} from \"./WrapperUpgradeable.sol\";\nimport {CTokenInterface} from \"../../CTokenInterfaces.sol\";\n\ncontract RebasedSbWemix is WrapperUpgradeable {\n    function initialize() public initializer {\n        __ERC20_init_unchained(\"Rebased Shoebill WEMIX\", \"rbsbWEMIX\");\n        __ReentrancyGuard_init_unchained();\n        shareToken = 0xD42ad8346d14853EB3D30568B7415cF90C579D83; // sbWEMIX\n    }\n\n    /**\n     * @notice Returns amount of stAmount for corresponding shares\n     * @dev Shares --> Amount\n     * @param sharesAmount amount of shares to convert\n     */\n    function _getAmountByShares(\n        uint256 sharesAmount\n    ) internal view override returns (uint256) {\n        uint256 exchangeRateStored = CTokenInterface(shareToken)\n            .exchangeRateStored();\n        return (sharesAmount * exchangeRateStored) / 1e18;\n    }\n\n    /**\n     * @notice Returns amount of shares for corresponding stAmount\n     * @dev Amount --> Shares\n     * @param tokenAmount amount of stAmount to convert\n     */\n    function _getSharesByAmount(\n        uint256 tokenAmount\n    ) internal view override returns (uint256) {\n        uint256 exchangeRateStored = CTokenInterface(shareToken)\n            .exchangeRateStored();\n\n        return (tokenAmount * 1e18) / exchangeRateStored;\n    }\n\n    function _totalSupply() internal view override returns (uint256) {\n        return\n            _getAmountByShares(IERC20(shareToken).balanceOf((address(this))));\n    }\n}\n"
    },
    "contracts/Swap/Wrapper/RebasedStWemix.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {StWemixInterface} from \"../../StWemixInterface.sol\";\nimport {WrapperUpgradeable} from \"./WrapperUpgradeable.sol\";\n\ncontract RebasedStWemix is WrapperUpgradeable {\n    function initialize() public initializer {\n        __ERC20_init_unchained(\"Rebased Staked WEMIX\", \"rbstWEMIX\");\n        __ReentrancyGuard_init_unchained();\n        shareToken = 0x9B377bd7Db130E8bD2f3641E0E161cB613DA93De;\n    }\n\n    /**\n     * @notice Returns amount of stAmount for corresponding shares\n     * @dev Shares --> Amount\n     * @param sharesAmount amount of shares to convert\n     */\n    function _getAmountByShares(\n        uint256 sharesAmount\n    ) internal view override returns (uint256) {\n        return\n            StWemixInterface(shareToken).getPooledWEMIXBySharesWithFee(\n                sharesAmount\n            );\n    }\n\n    /**\n     * @notice Returns amount of shares for corresponding stAmount\n     * @dev Amount --> Shares\n     * @param tokenAmount amount of stAmount to convert\n     */\n    function _getSharesByAmount(\n        uint256 tokenAmount\n    ) internal view override returns (uint256) {\n        return\n            StWemixInterface(shareToken).getSharesByPooledWEMIXWithFee(\n                tokenAmount\n            );\n    }\n\n    function _totalSupply() internal view override returns (uint256) {\n        return\n            StWemixInterface(shareToken).getPooledWEMIXBySharesWithFee(\n                balance()\n            );\n    }\n}\n"
    },
    "contracts/Swap/Wrapper/SbWemixInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\ninterface SbWemixInterface {\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return calculated exchange rate scaled by 1e18\n     */\n\n    function exchangeRateStored() external view returns (uint256);\n}\n"
    },
    "contracts/Swap/Wrapper/WrapperInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\ninterface WrapperInterface {\n    function getSharesByAmount(uint256 amount) external view returns (uint256);\n\n    function getAmountByShares(uint256 amount) external view returns (uint256);\n\n    function stake(uint256 amount) external;\n\n    function unstake(uint256 amount) external;\n}\n"
    },
    "contracts/Swap/Wrapper/WrapperUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {IERC20} from \"../IERC20.sol\";\n\nabstract contract WrapperUpgradeable is\n    ERC20Upgradeable,\n    ReentrancyGuardUpgradeable\n{\n    address public constant ZERO_ADDRESS = address(0);\n\n    address public shareToken;\n\n    mapping(address => uint256) public shares; // stwemix amount\n    ///////////////////////////////////////////////////////////////////\n    //     Events\n    ///////////////////////////////////////////////////////////////////\n\n    event SharesChanged(\n        address indexed user,\n        uint256 prevShares,\n        uint256 shares\n    );\n\n    ///////////////////////////////////////////////////////////////////\n    //     External Functions (View)\n    ///////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Returns amount of stAmount for corresponding shares\n     * @dev Shares --> Amount\n     * @param amount amount of shares to convert\n     */\n    function getSharesByAmount(uint256 amount) external view returns (uint256) {\n        return _getSharesByAmount(amount);\n    }\n\n    /**\n     * @notice Returns amount of shares for corresponding stAmount\n     * @dev Amount --> Shares\n     * @param amount amount of stAmount to convert\n     */\n    function getAmountByShares(uint256 amount) external view returns (uint256) {\n        return _getAmountByShares(amount);\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //     Public Functions\n    ///////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Returns user balance in stAmount amount\n     */\n    function balanceOf(address user) public view override returns (uint256) {\n        return _getAmountByShares(sharesOf(user));\n    }\n\n    /**\n     * @notice Returns user balance in shares\n     */\n    function sharesOf(address user) public view returns (uint256) {\n        return shares[user];\n    }\n\n    /**\n     * @notice Returns amount of wemix in.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply();\n    }\n\n    function balance() public view returns (uint256) {\n        return IERC20(shareToken).balanceOf(address(this));\n    }\n\n    function totalShares() public view returns (uint256) {\n        return balance();\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //     External Functions\n    ///////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Deposits for sender\n     * Emits a `Transfer` event from zero address to msgSender\n     */\n    function stake(uint256 _amount) external nonReentrant {\n        _safeTransferFrom(shareToken, msg.sender, address(this), _amount);\n        _stake(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Deposits for designated address\n     * @param recipient address to deposit for\n     * Emits a `Transfer` event from zero address to recipient\n     */\n    function stakeFor(\n        uint256 _amount,\n        address recipient\n    ) external nonReentrant {\n        _safeTransferFrom(shareToken, msg.sender, address(this), _amount);\n        _stake(recipient, _amount);\n    }\n\n    /**\n     * @notice Requests unstaking to sender\n     * @param amount amount to unstake\n     * Emits a `Transfer` event from msgSender to zero address\n     */\n    function unstake(uint256 amount) external nonReentrant {\n        uint256 stAmount = _unstake(amount);\n        _safeTransfer(shareToken, msg.sender, stAmount);\n    }\n\n    /**\n     * @notice Requests unstaking to sender\n     * @param amount amount to unstake\n     * Emits a `Transfer` event from msgSender to zero address\n     */\n    function unstakeShares(uint256 amount) external nonReentrant {\n        uint256 stAmount = _unstakeShares(amount);\n        _safeTransfer(shareToken, msg.sender, stAmount);\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //     Internal Functions\n    ///////////////////////////////////////////////////////////////////\n\n    /**\n     * @notice Transfers token ownership\n     * @param from address of current token owner\n     * @param to address of new token owner\n     * @param amount amount of tokens to transfer\n     * Emits a `Transfer` event\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        _beforeTokenTransfer(from, to, amount);\n\n        _transferShares(from, to, _getSharesByAmount(amount));\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    function _safeTransfer(address token, address to, uint256 value) internal {\n        require(token.code.length > 0, \"SafeERC20: invalid token\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"SafeERC20: transfer failed\"\n        );\n    }\n\n    function _safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        require(token.code.length > 0, \"SafeERC20: invalid token\");\n        (bool success, bytes memory data) = token.call(\n            abi.encodeWithSelector(\n                IERC20.transferFrom.selector,\n                from,\n                to,\n                value\n            )\n        );\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"SafeERC20: transfer failed\"\n        );\n    }\n\n    function _stake(address user, uint256 amount) internal nonReentrant {\n        uint256 sharesToMint = amount;\n\n        _mintShares(user, sharesToMint);\n\n        emit Transfer(ZERO_ADDRESS, user, _getAmountByShares(sharesToMint));\n    }\n\n    function _unstake(uint256 amount) internal nonReentrant returns (uint256) {\n        address user = msg.sender;\n\n        uint256 sharesToBurn = _getSharesByAmount(amount);\n        _burnShares(user, sharesToBurn);\n\n        emit Transfer(user, ZERO_ADDRESS, amount);\n        return sharesToBurn;\n    }\n\n    function _unstakeShares(\n        uint256 amount\n    ) internal nonReentrant returns (uint256) {\n        address user = msg.sender;\n\n        uint256 sharesToBurn = amount;\n        _burnShares(user, sharesToBurn);\n\n        emit Transfer(user, ZERO_ADDRESS, amount);\n        return sharesToBurn;\n    }\n\n    /**\n     * @notice Mints new shares of the token to a certain user\n     * @param user address to mint shares to\n     * @param amount amount to mint\n     * Emits a `SharesChanged` event\n     */\n    function _mintShares(address user, uint256 amount) internal {\n        uint256 prevShares = sharesOf(user);\n        shares[user] = prevShares + amount;\n\n        emit SharesChanged(user, prevShares, shares[user]);\n    }\n\n    /**\n     * @notice Burns shares of the token\n     * @param user address to burn for\n     * @param amount amount to burn\n     * Emits a `SharesChanged` event\n     */\n    function _burnShares(address user, uint256 amount) internal {\n        uint256 prevShares = sharesOf(user);\n        require(prevShares >= amount, \"StAmount:: insufficient shares\");\n\n        shares[user] = prevShares - amount;\n\n        emit SharesChanged(user, prevShares, shares[user]);\n    }\n\n    /**\n     * @notice Transfers shares from one address to another\n     * @param from address to transfer from\n     * @param to address to transfer to\n     * @param amount amount to transfer\n     * Emits a `SharesChanged` event\n     */\n    function _transferShares(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        uint256 fromShares = sharesOf(from);\n        require(fromShares >= amount, \"StAmount:: insufficient shares\");\n\n        shares[from] = fromShares - amount;\n        uint256 toShares = sharesOf(to);\n        shares[to] = toShares + amount;\n\n        emit SharesChanged(from, fromShares, shares[from]);\n        emit SharesChanged(to, toShares, shares[to]);\n    }\n\n    /**\n     * @notice Returns amount of stAmount for corresponding shares\n     * @dev Shares --> Amount\n     * @param sharesAmount amount of shares to convert\n     */\n    function _getAmountByShares(\n        uint256 sharesAmount\n    ) internal view virtual returns (uint256);\n\n    /**\n     * @notice Returns amount of shares for corresponding stAmount\n     * @dev Amount --> Shares\n     * @param tokenAmount amount of stAmount to convert\n     */\n    function _getSharesByAmount(\n        uint256 tokenAmount\n    ) internal view virtual returns (uint256);\n\n    function _totalSupply() internal view virtual returns (uint256);\n}\n"
    },
    "contracts/Swap/WrappingRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {WrapperInterface} from \"./Wrapper/WrapperInterface.sol\";\nimport {Router} from \"./Router.sol\";\n\ncontract WrappingRouter is Router {\n    mapping(address => address) private _tokenWrappers;\n\n    address private _wrapperSetter;\n\n    constructor(address _factory, address _weth) Router(_factory, _weth) {\n        _wrapperSetter = msg.sender;\n    }\n\n    /// @notice Set Wrapper ERC20 Address\n    /// @param _token yield bearing token address e.g. stWEMIX, sbWEMIX, stsbWEMIX\n    /// @param _wrapper wrapper ERC20 address e.g. RebasedSbWemix etc..\n    function setWrapper(address _token, address _wrapper) external {\n        require(msg.sender == _wrapperSetter, \"Router: FORBIDDEN\");\n        _tokenWrappers[_token] = _wrapper;\n    }\n\n    function swapExactTokensForTokensSimpleWrapper(\n        uint amountIn,\n        uint amountOutMin,\n        address tokenFrom,\n        address tokenTo,\n        bool stable,\n        address to,\n        uint deadline\n    ) external ensure(deadline) returns (uint[] memory amounts) {\n        Route[] memory routes = new Route[](1);\n        routes[0].from = _transformToWrap(tokenFrom);\n        routes[0].to = _transformToWrap(tokenTo);\n        routes[0].stable = stable;\n        amounts = getAmountsOut(amountIn, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        _wrapAndSendToPair(tokenFrom, amounts[0], routes[0]);\n\n        // TODO: to address(this)\n        _swap(amounts, routes, address(this));\n\n        _unwrapAndSend(tokenTo, amounts[amounts.length - 1], to);\n    }\n\n    function swapExactETHForTokensSimpleWrapper(\n        uint amountOutMin,\n        address tokenFrom, // WETH\n        address tokenTo,\n        bool stable,\n        address to,\n        uint deadline\n    ) external payable ensure(deadline) returns (uint[] memory amounts) {\n        require(tokenFrom == address(weth), \"Router: INVALID_PATH\");\n\n        Route[] memory routes = new Route[](1);\n        routes[0].from = _transformToWrap(tokenFrom);\n        routes[0].to = _transformToWrap(tokenTo);\n        routes[0].stable = stable;\n        amounts = getAmountsOut(msg.value, routes);\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"Router: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        weth.deposit{value: amounts[0]}();\n\n        _wrapAndSendToPair(tokenFrom, amounts[0], routes[0]);\n\n        _swap(amounts, routes, address(this));\n\n        _unwrapAndSend(tokenTo, amounts[amounts.length - 1], to);\n    }\n\n    function _transformToWrap(address _token) internal view returns (address) {\n        if (_tokenWrappers[_token] == address(0)) return _token;\n\n        return _tokenWrappers[_token];\n    }\n\n    function _unwrapAndSend(\n        address _token,\n        uint256 amount,\n        address to\n    ) internal {\n        address wrapper = _tokenWrappers[_token];\n\n        if (wrapper == address(0)) {\n            _safeTransfer(_token, to, amount);\n        } else {\n            WrapperInterface(wrapper).unstake(amount);\n            _safeTransfer(_token, to, IERC20(_token).balanceOf(address(this)));\n        }\n    }\n\n    function _wrapAndSendToPair(\n        address _token,\n        uint256 amount,\n        Route memory route\n    ) internal {\n        address wrapper = _tokenWrappers[_token];\n        if (wrapper == address(0)) {\n            _safeTransferFrom(\n                route.from,\n                msg.sender,\n                pairFor(route.from, route.to, route.stable),\n                amount\n            );\n        } else {\n            // transfer token to this contract\n            _safeTransferFrom(_token, msg.sender, address(this), amount);\n\n            IERC20(_token).approve(wrapper, amount);\n            // wrap\n            WrapperInterface(wrapper).stake(amount);\n\n            _safeTransfer(\n                wrapper,\n                pairFor(route.from, route.to, route.stable),\n                IERC20(wrapper).balanceOf(address(this))\n            );\n        }\n    }\n}\n"
    },
    "contracts/Token/BoostSBLNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract BoostSBLNFT is ERC721 {\n    address public owner;\n    uint256 public lastTokenId;\n\n    address public paymentToken;\n    address public paymentReceiver;\n\n    struct Sale {\n        uint256 startTime;\n        uint256 price;\n        uint256 saleAmount;\n        uint256 soldAmount;\n    }\n    mapping(uint256 => Sale) public sales; // round => Sale\n    uint256 public currentRound;\n\n    constructor() ERC721(\"Shoebill Booster-A\", \"SBL Boost\") {\n        owner = msg.sender;\n        paymentReceiver = msg.sender;\n    }\n\n    function mint(uint256 amount) external {\n        require(amount > 0, \"BoostSBLNFT: INVALID_AMOUNT\");\n        Sale storage sale = sales[currentRound];\n\n        require(\n            sale.startTime <= block.timestamp,\n            \"BoostSBLNFT: SALE_NOT_STARTED\"\n        );\n        require(\n            sale.soldAmount + amount <= sale.saleAmount,\n            \"BoostSBLNFT: SOLD_OUT\"\n        );\n\n        IERC20(paymentToken).transferFrom(\n            msg.sender,\n            paymentReceiver,\n            sale.price * amount\n        );\n\n        for (uint256 i; i < amount; i++) {\n            _safeMint(msg.sender, lastTokenId);\n            lastTokenId++;\n            sale.soldAmount++;\n        }\n    }\n\n    function setCurrentRound(uint256 _round) external {\n        require(msg.sender == owner, \"BoostSBLNFT: FORBIDDEN\");\n        currentRound = _round;\n    }\n\n    function setPaymentToken(address _paymentToken) external {\n        require(msg.sender == owner, \"BoostSBLNFT: FORBIDDEN\");\n        paymentToken = _paymentToken;\n    }\n\n    function setPaymentReceiver(address _paymentReceiver) external {\n        require(msg.sender == owner, \"BoostSBLNFT: FORBIDDEN\");\n        paymentReceiver = _paymentReceiver;\n    }\n\n    function setSale(\n        uint256 _round,\n        uint256 _startTime,\n        uint256 _price,\n        uint256 _saleAmount\n    ) external {\n        require(msg.sender == owner, \"BoostSBLNFT: FORBIDDEN\");\n        require(_saleAmount > 0, \"BoostSBLNFT: INVALID_AMOUNT\");\n        require(_startTime > block.timestamp, \"BoostSBLNFT: INVALID_TIME\");\n\n        sales[_round] = Sale({\n            startTime: _startTime,\n            price: _price,\n            saleAmount: _saleAmount,\n            soldAmount: 0\n        });\n    }\n}\n"
    },
    "contracts/Token/ExternalMultiRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title ExternalMultiRewarder\n/// @notice Modified from MultiRewards contract\n/// @dev Staked Amount refers to the amount of GovSBL staked in the GovSBL contract\n/// @dev when GovSBL balance changes, refreshReward should be called\n/// https://github.com/curvefi/multi-rewards/blob/master/contracts/MultiRewards.sol\ncontract ExternalMultiRewarder is\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== STATE VARIABLES ========== */\n\n    struct Reward {\n        address rewardsDistributor;\n        uint256 rewardsDuration;\n        uint256 periodFinish;\n        uint256 rewardRate;\n        uint256 lastUpdateTime;\n        uint256 rewardPerTokenStored;\n    }\n    mapping(address => Reward) public rewardData;\n    address[] public rewardTokens;\n\n    // user -> reward token -> amount\n    mapping(address => mapping(address => uint256))\n        public userRewardPerTokenPaid;\n    mapping(address => mapping(address => uint256)) public rewards;\n\n    IERC20 public GovSBL;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _govSBL) external initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        GovSBL = IERC20(_govSBL);\n    }\n\n    function addReward(\n        address _rewardsToken,\n        address _rewardsDistributor,\n        uint256 _rewardsDuration\n    ) public onlyOwner {\n        require(rewardData[_rewardsToken].rewardsDuration == 0);\n        rewardTokens.push(_rewardsToken);\n        rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\n    }\n\n    /* ========== VIEWS ========== */\n\n    function totalStaked() public view returns (uint256) {\n        return GovSBL.totalSupply();\n    }\n\n    function staked(address _account) public view returns (uint256) {\n        return GovSBL.balanceOf(_account);\n    }\n\n    function lastTimeRewardApplicable(\n        address _rewardsToken\n    ) public view returns (uint256) {\n        return\n            Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\n    }\n\n    function rewardPerToken(\n        address _rewardsToken\n    ) public view returns (uint256) {\n        if (totalStaked() == 0) {\n            return rewardData[_rewardsToken].rewardPerTokenStored;\n        }\n        return\n            rewardData[_rewardsToken].rewardPerTokenStored.add(\n                lastTimeRewardApplicable(_rewardsToken)\n                    .sub(rewardData[_rewardsToken].lastUpdateTime)\n                    .mul(rewardData[_rewardsToken].rewardRate)\n                    .mul(1e18)\n                    .div(totalStaked())\n            );\n    }\n\n    function earned(\n        address account,\n        address _rewardsToken\n    ) public view returns (uint256) {\n        return\n            staked(account)\n                .mul(\n                    rewardPerToken(_rewardsToken).sub(\n                        userRewardPerTokenPaid[account][_rewardsToken]\n                    )\n                )\n                .div(1e18)\n                .add(rewards[account][_rewardsToken]);\n    }\n\n    function getRewardForDuration(\n        address _rewardsToken\n    ) external view returns (uint256) {\n        return\n            rewardData[_rewardsToken].rewardRate.mul(\n                rewardData[_rewardsToken].rewardsDuration\n            );\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function setRewardsDistributor(\n        address _rewardsToken,\n        address _rewardsDistributor\n    ) external onlyOwner {\n        rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\n    }\n\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        for (uint i; i < rewardTokens.length; i++) {\n            address _rewardsToken = rewardTokens[i];\n            uint256 reward = rewards[msg.sender][_rewardsToken];\n            if (reward > 0) {\n                rewards[msg.sender][_rewardsToken] = 0;\n                IERC20(_rewardsToken).safeTransfer(msg.sender, reward);\n                emit RewardPaid(msg.sender, _rewardsToken, reward);\n            }\n        }\n    }\n\n    function refreshReward(address account) external updateReward(account) {}\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function notifyRewardAmount(\n        address _rewardsToken,\n        uint256 reward\n    ) external updateReward(address(0)) {\n        require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\n        // of transactions required and ensure correctness of the reward amount\n        IERC20(_rewardsToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            reward\n        );\n\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\n            rewardData[_rewardsToken].rewardRate = reward.div(\n                rewardData[_rewardsToken].rewardsDuration\n            );\n        } else {\n            uint256 remaining = rewardData[_rewardsToken].periodFinish.sub(\n                block.timestamp\n            );\n            uint256 leftover = remaining.mul(\n                rewardData[_rewardsToken].rewardRate\n            );\n            rewardData[_rewardsToken].rewardRate = reward.add(leftover).div(\n                rewardData[_rewardsToken].rewardsDuration\n            );\n        }\n\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\n        rewardData[_rewardsToken].periodFinish = block.timestamp.add(\n            rewardData[_rewardsToken].rewardsDuration\n        );\n        emit RewardAdded(reward);\n    }\n\n    function setRewardsDuration(\n        address _rewardsToken,\n        uint256 _rewardsDuration\n    ) external {\n        require(\n            block.timestamp > rewardData[_rewardsToken].periodFinish,\n            \"Reward period still active\"\n        );\n        require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\n        require(_rewardsDuration > 0, \"Reward duration must be non-zero\");\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\n        emit RewardsDurationUpdated(\n            _rewardsToken,\n            rewardData[_rewardsToken].rewardsDuration\n        );\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier updateReward(address account) {\n        for (uint i; i < rewardTokens.length; i++) {\n            address token = rewardTokens[i];\n            rewardData[token].rewardPerTokenStored = rewardPerToken(token);\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\n            if (account != address(0)) {\n                rewards[account][token] = earned(account, token);\n                userRewardPerTokenPaid[account][token] = rewardData[token]\n                    .rewardPerTokenStored;\n            }\n        }\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(\n        address indexed user,\n        address indexed rewardsToken,\n        uint256 reward\n    );\n    event RewardsDurationUpdated(address token, uint256 newDuration);\n    event Recovered(address token, uint256 amount);\n}\n"
    },
    "contracts/Token/GovSBL.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface ILinearUnstakingStage {\n    function enterUnstakingStage(address user, uint256 amount) external;\n}\n\ninterface IPenaltyUnstakingStage {\n    function enterUnstakingStage(address user, uint256 amount) external;\n}\n\ninterface IClaimComp {\n    function claimComp(address holder) external;\n}\n\ninterface IExteranlMultiRewarder {\n    function refreshReward(address _user) external;\n}\n\n/// @title GovSBL\n/// @notice Shoebill Governance staking contract\n/// @dev G.SBL has tier system, boost from staked amount and boost from NFT with max boost\n/// @dev G.SBL can be unstaked with linear vesting or penalty vesting\n/// @dev G.SBL holder can earn external reward.\ncontract GovSBL is ERC20Upgradeable, OwnableUpgradeable, IERC721Receiver {\n    using SafeERC20 for IERC20;\n\n    IERC20 public shoebill; // SBL\n\n    ILinearUnstakingStage public linearUnstakingStage;\n    IPenaltyUnstakingStage public penaltyUnstakingStage;\n\n    IClaimComp[] public unitrollers; // unitrollers (manta has 2 markets)\n\n    IExteranlMultiRewarder public externalMultiRewarder;\n\n    // =============================== BOOST ===================================\n    uint256 public maxBoostMultiplier; // 100% => 2x // denominator: 10000\n\n    // user => nft => balance\n    mapping(address => mapping(address => uint256)) public nftBalance;\n    // NFT => bool\n    address[] public boostNft;\n    // NFT => boostMultiplier\n    mapping(address => uint256) public boostNftMultiplier;\n    // Balance Tier / amount required\n    uint256[] public balanceTierRequired;\n    // Balance Tier => multiplier\n    mapping(uint256 => uint256) public balanceTierMultiplier; // 11000 = 10% boost\n\n    // =============================== EVENT ===================================\n\n    event SetLinearUnstakingStage(address indexed linearUnstakingStage);\n    event SetPenaltyUnstakingStage(address indexed penaltyUnstakingStage);\n    event SetExternalRewarder(address indexed rewarder);\n    event Stake(address indexed user, uint256 amount, uint256 shares);\n    event StakeNFT(address indexed user, address indexed nft, uint256 tokenId);\n    event Unstake(\n        address indexed user,\n        uint256 amount,\n        uint256 shares,\n        uint256 unstakingStage\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(address _shoebill) external initializer {\n        __Governance_init();\n        shoebill = IERC20(_shoebill);\n\n        maxBoostMultiplier = 10000; // 1x at start\n        // maxBoostMultiplier = 20000;\n\n        balanceTierRequired.push(1000 ether);\n        balanceTierMultiplier[0] = 10500; // 1.05x\n\n        balanceTierRequired.push(2000 ether);\n        balanceTierMultiplier[1] = 11250; // 1.125\n\n        balanceTierRequired.push(3000 ether);\n        balanceTierMultiplier[2] = 12500; // 1.25x\n\n        // if user hld more than 3000 sbp, they will get 1.05x * 1.125x * 1.25x = 1.40625x\n    }\n\n    function __Governance_init() internal initializer {\n        __ERC20_init(\"Governance Shoebill\", \"gSBL\");\n        __Ownable_init();\n    }\n\n    // =============================== SETTER ===================================\n\n    function setLinearUnstakingStage(\n        address _linearUnstakingStage\n    ) external onlyOwner {\n        linearUnstakingStage = ILinearUnstakingStage(_linearUnstakingStage);\n\n        emit SetLinearUnstakingStage(_linearUnstakingStage);\n    }\n\n    function setPenaltyUnstakingStage(\n        address _penaltyUnstakingStage\n    ) external onlyOwner {\n        linearUnstakingStage = ILinearUnstakingStage(_penaltyUnstakingStage);\n\n        emit SetPenaltyUnstakingStage(_penaltyUnstakingStage);\n    }\n\n    function setExternalMultiRewarder(\n        address _externalMultiRewarder\n    ) external onlyOwner {\n        externalMultiRewarder = IExteranlMultiRewarder(_externalMultiRewarder);\n\n        emit SetExternalRewarder(_externalMultiRewarder);\n    }\n\n    function addUnitroller(address _unitroller) external onlyOwner {\n        unitrollers.push(IClaimComp(_unitroller));\n    }\n\n    function removeUnitroller(address _unitroller) external onlyOwner {\n        for (uint256 i = 0; i < unitrollers.length; i++) {\n            if (address(unitrollers[i]) == _unitroller) {\n                unitrollers[i] = unitrollers[unitrollers.length - 1];\n                unitrollers.pop();\n                break;\n            }\n        }\n    }\n\n    function addTier(uint256 _amount, uint256 _boost) external onlyOwner {\n        balanceTierRequired.push(_amount);\n        balanceTierMultiplier[balanceTierRequired.length - 1] = _boost;\n    }\n\n    function removeTier() external onlyOwner {\n        balanceTierRequired.pop();\n        balanceTierMultiplier[balanceTierRequired.length] = 0;\n    }\n\n    function updateTier(\n        uint256 _index,\n        uint256 _amount,\n        uint256 _boost\n    ) external onlyOwner {\n        balanceTierRequired[_index] = _amount;\n        balanceTierMultiplier[_index] = _boost;\n    }\n\n    function setMaxBoostMultiplier(\n        uint256 _maxBoostMultiplier\n    ) external onlyOwner {\n        maxBoostMultiplier = _maxBoostMultiplier;\n    }\n\n    function addBoostNft(address _nft) external onlyOwner {\n        boostNft.push(_nft);\n    }\n\n    function removeBoostNft(address _nft) external onlyOwner {\n        for (uint256 i = 0; i < boostNft.length; i++) {\n            if (boostNft[i] == _nft) {\n                boostNft[i] = boostNft[boostNft.length - 1];\n                boostNft.pop();\n                break;\n            }\n        }\n    }\n\n    function setBoostNftMultiplier(\n        address _nft,\n        uint256 _multiplier\n    ) external onlyOwner {\n        boostNftMultiplier[_nft] = _multiplier;\n    }\n\n    // =============================== External ===================================\n\n    function stake(address _user, uint256 _amount) external {\n        _stake(_user, _amount);\n    }\n\n    function stakeAll(address _user) external {\n        _stake(_user, shoebill.balanceOf(msg.sender));\n    }\n\n    function unstake(\n        uint256 _shares,\n        uint256 _unstakingStage /* 0 = linear, 1 = penalty*/\n    ) external {\n        _unstake(_shares, _unstakingStage);\n    }\n\n    function unstakeAll(uint256 _unstakingStage) external {\n        _unstake(balanceOf(msg.sender), _unstakingStage);\n    }\n\n    function stakeNFT(IERC721 _nft, uint256 _tokenId) external {\n        _stakeNFT(_nft, _tokenId);\n    }\n\n    // =============================== INTERNAL ===================================\n\n    /// @notice Stake sbp to g.sbp\n    /// @dev boost changed, balance changed, transferFrom user\n    /// @param _user user address, can be msg sender or delegatee\n    /// @param _amount amount of sbp\n    function _stake(address _user, uint256 _amount) internal {\n        _beforeAction(_user);\n\n        uint256 shares;\n        uint256 totalSupply_ = totalSupply();\n        if (totalSupply_ == 0) {\n            shares = _amount;\n        } else {\n            shares =\n                (_amount * totalSupply_) /\n                shoebill.balanceOf(address(this));\n        }\n\n        shoebill.safeTransferFrom(msg.sender, address(this), _amount);\n\n        _mint(_user, shares);\n\n        emit Stake(_user, _amount, shares);\n    }\n\n    /// @notice Unstake g.sbp to sbp with vesting\n    /// @dev boost changed, balance changed, send to linearUnstakingStage\n    /// @param _shares balance of g.sbp\n    /// @param _unstakingStage 0 = linear, 1 = penalty\n    function _unstake(uint256 _shares, uint256 _unstakingStage) internal {\n        _beforeAction(msg.sender);\n        uint256 amount = (_shares * shoebill.balanceOf(address(this))) /\n            totalSupply();\n\n        _burn(msg.sender, _shares);\n\n        if (_unstakingStage == 0) {\n            IERC20(shoebill).approve(address(linearUnstakingStage), amount);\n            linearUnstakingStage.enterUnstakingStage(msg.sender, amount);\n            emit Unstake(msg.sender, amount, _shares, _unstakingStage);\n        } else if (_unstakingStage == 1) {\n            IERC20(shoebill).approve(address(penaltyUnstakingStage), amount);\n            penaltyUnstakingStage.enterUnstakingStage(msg.sender, amount);\n            emit Unstake(msg.sender, amount, _shares, _unstakingStage);\n        } else {\n            revert(\"Invalid unstaking stage\");\n        }\n    }\n\n    /// @notice Stake Approved boost item NFT\n    /// @dev boost changed,  transferFrom nft to user\n    /// @param _nft nft address\n    function _stakeNFT(IERC721 _nft, uint256 _tokenId) internal {\n        _beforeAction(msg.sender);\n\n        _nft.safeTransferFrom(msg.sender, address(this), _tokenId);\n\n        nftBalance[msg.sender][address(_nft)] += 1;\n\n        emit StakeNFT(msg.sender, address(_nft), _tokenId);\n    }\n\n    /// @notice Before action hook\n    /// @dev claim reward before re-calculate boost\n    function _beforeAction(address _user) internal {\n        // 1. call extenal reward (boost x) based on g.sbl balance\n        if (address(externalMultiRewarder) != address(0)) {\n            try externalMultiRewarder.refreshReward(_user) {} catch {}\n        }\n\n        // 2. claim unitroller reward (boost, refferal)\n        for (uint256 i; i < unitrollers.length; i++) {\n            unitrollers[i].claimComp(_user);\n        }\n    }\n\n    // =============================== VIEW ===================================\n\n    /// @notice Get boost multiplier from staked amount\n    function getBalanceTierAndBoost(\n        address _user\n    ) public view returns (uint256) {\n        uint256 boostMultiplier = 10000;\n\n        uint256 staked = balanceOf(_user);\n        for (uint256 i; i < balanceTierRequired.length; i++) {\n            if (staked >= balanceTierRequired[i]) {\n                boostMultiplier =\n                    (boostMultiplier * balanceTierMultiplier[i]) /\n                    10000;\n            }\n        }\n\n        return boostMultiplier < 10000 ? 10000 : boostMultiplier;\n    }\n\n    function getNftBoost(address _user) public view returns (uint256) {\n        uint256 boostMultiplier = 10000;\n\n        for (uint256 i; i < boostNft.length; i++) {\n            boostMultiplier =\n                boostMultiplier +\n                nftBalance[_user][boostNft[i]] *\n                boostNftMultiplier[boostNft[i]];\n        }\n\n        return boostMultiplier < 10000 ? 10000 : boostMultiplier;\n    }\n\n    function getBoostMultiplier(address _user) external view returns (uint256) {\n        uint256 boostMultiplier = 10000;\n        // 1. get boost multiplier from staked amount\n        boostMultiplier =\n            (boostMultiplier * getBalanceTierAndBoost(_user)) /\n            10000;\n\n        // 2. get boost multiplier from nft\n        boostMultiplier = (boostMultiplier * getNftBoost(_user)) / 10000;\n\n        // 3. get max boost multiplier\n        if (boostMultiplier > maxBoostMultiplier) {\n            boostMultiplier = maxBoostMultiplier;\n        }\n\n        return boostMultiplier;\n    }\n\n    // =============================== OVERRIDEN ===================================\n\n    // can not transfer\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._beforeTokenTransfer(from, to, amount);\n        require(\n            from == address(0) || to == address(0),\n            \"gSBL: transfer disabled\"\n        );\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/Token/IGovSBL.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\ninterface IGovSBL {\n    function stake(address user, uint256 amount) external;\n\n    function getBoostMultiplier(address user) external view returns (uint256);\n\n    function maxBoostMultiplier() external view returns (uint256);\n\n    function getBalanceTierAndBoost(\n        address user\n    ) external view returns (uint256);\n    function getNftBoost(address user) external view returns (uint256);\n}\n"
    },
    "contracts/Token/IMiningReferral.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\ninterface IMiningReferral {\n    function recordReferralCommission(\n        address _referrer,\n        uint256 _commission\n    ) external;\n\n    function getReferrer(address _user) external view returns (address);\n\n    function baseRate() external view returns (uint256);\n\n    function bonusRate(address _user) external view returns (uint256);\n}\n"
    },
    "contracts/Token/LinearUnstakingStage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./IGovSBL.sol\";\n\n/// @title LinearUnstakingStage\n/// @notice Implements  unstaking GovSBL to SBL with linear release\n/// @dev Unstaking amount will be released linearly during unstaking period\n/// @dev User can claim, or restake during unstaking period\n/// @dev Every Unstakes will claim releasable amount and restart unstaking period\ncontract LinearUnstakingStage is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    address public gShoebillToken;\n    address public shoebillToken;\n\n    struct UnstakingInfo {\n        uint256 unstakeAmount;\n        uint256 lastClaimTimestamp;\n        uint256 completeTimestamp;\n    }\n    mapping(address /* user */ => UnstakingInfo) public unstakingRequest;\n\n    uint256 public unstakingPeriod;\n\n    event UpdateUnstakingPeriod(uint256 unstakingPeriod);\n    event EnterUnstakingStage(\n        address indexed user,\n        uint256 amount,\n        uint256 completeTime\n    );\n    event Claim(address indexed user, uint256 amount);\n    event Restake(address indexed user, uint256 amount);\n\n    modifier onlyGShoebillToken() {\n        require(msg.sender == gShoebillToken, \"Only GShoebillToken\");\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _shoebillToken,\n        address _gShoebillToken\n    ) external initializer {\n        __Ownable_init();\n        shoebillToken = _shoebillToken;\n        gShoebillToken = _gShoebillToken;\n\n        unstakingPeriod = 40 days;\n    }\n\n    function updateUnstakingPeriod(\n        uint256 _unstakingPeriod\n    ) external onlyOwner {\n        unstakingPeriod = _unstakingPeriod;\n        emit UpdateUnstakingPeriod(unstakingPeriod);\n    }\n\n    /// @notice Unstake function called by GShoebillToken\n    /// @dev 1. claim releasable amount 2. restart unstaking period including (un-released amount + new amount)\n    /// @param user The user address\n    /// @param amount Amounts of tokens that user want to unstake\n    function enterUnstakingStage(\n        address user,\n        uint256 amount\n    ) external onlyGShoebillToken {\n        UnstakingInfo storage info = unstakingRequest[user];\n\n        if (info.unstakeAmount > 0) {\n            uint256 claimableAmount;\n            if (block.timestamp >= info.completeTimestamp) {\n                claimableAmount = info.unstakeAmount;\n            } else {\n                uint256 timeDelta = block.timestamp - info.lastClaimTimestamp;\n                claimableAmount =\n                    (info.unstakeAmount * timeDelta) /\n                    unstakingPeriod;\n            }\n\n            info.unstakeAmount -= claimableAmount;\n            IERC20(shoebillToken).safeTransfer(user, claimableAmount);\n\n            emit Claim(user, claimableAmount);\n        }\n\n        IERC20(shoebillToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        info.unstakeAmount += amount;\n        info.lastClaimTimestamp = block.timestamp;\n        info.completeTimestamp = block.timestamp + unstakingPeriod;\n\n        emit EnterUnstakingStage(user, amount, info.completeTimestamp);\n    }\n\n    /// @dev 1. claim releasable amount\n    /// @param user The user address\n    function claim(address user) external {\n        UnstakingInfo storage info = unstakingRequest[user];\n\n        if (info.unstakeAmount > 0) {\n            uint256 claimableAmount;\n            // unstake complete\n            if (block.timestamp >= info.completeTimestamp) {\n                claimableAmount = info.unstakeAmount;\n            } else {\n                uint256 timeDelta = block.timestamp - info.lastClaimTimestamp;\n                claimableAmount =\n                    (info.unstakeAmount * timeDelta) /\n                    unstakingPeriod;\n            }\n\n            info.unstakeAmount -= claimableAmount;\n            IERC20(shoebillToken).safeTransfer(user, claimableAmount);\n\n            emit Claim(user, claimableAmount);\n        }\n        info.lastClaimTimestamp = block.timestamp;\n    }\n\n    function getUserInfo(\n        address user\n    )\n        external\n        view\n        returns (\n            uint256 remaining,\n            uint256 claimable,\n            uint256 completeTimestamp\n        )\n    {\n        UnstakingInfo memory info = unstakingRequest[user];\n\n        remaining = info.unstakeAmount;\n\n        if (info.unstakeAmount > 0) {\n            // unstake complete\n            if (block.timestamp >= info.completeTimestamp) {\n                claimable = info.unstakeAmount;\n            } else {\n                uint256 timeDelta = block.timestamp - info.lastClaimTimestamp;\n                claimable = (info.unstakeAmount * timeDelta) / unstakingPeriod;\n            }\n        }\n\n        completeTimestamp = info.completeTimestamp;\n    }\n\n    /// @notice Restake function\n    /// @dev 1. All unstake amount will be restaked onbehalf of msg sender (releasable + unreleased amount)\n    function restake() external {\n        UnstakingInfo storage info = unstakingRequest[msg.sender];\n        require(info.unstakeAmount > 0, \"No unstake amount\");\n\n        info.lastClaimTimestamp = block.timestamp;\n        info.completeTimestamp = block.timestamp + unstakingPeriod;\n        info.unstakeAmount = 0;\n\n        IERC20(shoebillToken).approve(gShoebillToken, info.unstakeAmount);\n\n        IGovSBL(gShoebillToken).stake(msg.sender, info.unstakeAmount);\n\n        emit Restake(msg.sender, info.unstakeAmount);\n    }\n\n    function totalUnstakingAmount() external view returns (uint256) {\n        return IERC20(shoebillToken).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/Token/MiningReferral.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MiningReferral is Ownable {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public operators;\n    mapping(address => address) public referrers; // user address => referrer address\n\n    mapping(address => uint256) public referralsCount; // referrer address => referrals count\n    mapping(address => address[]) public referrals; // referrer address => referrals list\n    mapping(address => uint256) public totalReferralCommissions; // referrer address => total referral commissions\n\n    mapping(address => bool) public authorized; // referrer address => authorized\n    mapping(address => uint256) public bonusRate; // referrer address => bonus rate if registered\n\n    uint256 public baseRate = 500;\n\n    event ReferralRecorded(address indexed user, address indexed referrer);\n    event ReferralCommissionRecorded(\n        address indexed referrer,\n        uint256 commission\n    );\n    event OperatorUpdated(address indexed operator, bool indexed status);\n\n    modifier onlyOperator() {\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\n        _;\n    }\n\n    constructor() Ownable() {\n        operators[msg.sender] = true;\n    }\n\n    function recordReferral(address _user, address _referrer) public {\n        // require(authorized[_referrer], \"Referrer is not authorized\");\n\n        require(_user == msg.sender || operators[msg.sender], \"Not authorized\");\n\n        if (\n            _user != address(0) &&\n            _referrer != address(0) &&\n            _user != _referrer &&\n            referrers[_user] == address(0)\n        ) {\n            referrers[_user] = _referrer;\n\n            referralsCount[_referrer] += 1;\n            referrals[_referrer].push(_user);\n            emit ReferralRecorded(_user, _referrer);\n        }\n    }\n\n    function recordReferralCommission(\n        address _referrer,\n        uint256 _commission\n    ) public onlyOperator {\n        if (_referrer != address(0) && _commission > 0) {\n            totalReferralCommissions[_referrer] += _commission;\n            emit ReferralCommissionRecorded(_referrer, _commission);\n        }\n    }\n\n    // Get the referrer address that referred the user\n    function getReferrer(address _user) public view returns (address) {\n        return referrers[_user];\n    }\n\n    function getReferralsList(\n        address _referrer\n    ) public view returns (address[] memory) {\n        return referrals[_referrer];\n    }\n\n    function setAuthorized(\n        address _referrer,\n        bool _status,\n        uint256 _bonusRate\n    ) external onlyOwner {\n        authorized[_referrer] = _status;\n        bonusRate[_referrer] = _bonusRate;\n    }\n\n    function getBonusRate(address _user) public view returns (uint256) {\n        address userReferral = referrers[_user];\n        if (userReferral == address(0) || !authorized[userReferral]) {\n            return baseRate;\n        }\n        return bonusRate[userReferral];\n    }\n\n    function referralInfoForUser(\n        address _user\n    )\n        external\n        view\n        returns (\n            address _referrer,\n            uint256 _referralsCount,\n            address[] memory _referrals,\n            uint256 _totalReferralCommissions\n        )\n    {\n        return (\n            referrers[_user],\n            referralsCount[_user],\n            referrals[_user],\n            totalReferralCommissions[_user]\n        );\n    }\n\n    // Update the status of the operator\n    function updateOperator(\n        address _operator,\n        bool _status\n    ) external onlyOwner {\n        operators[_operator] = _status;\n        emit OperatorUpdated(_operator, _status);\n    }\n\n    // Owner can drain tokens that are sent here by mistake\n    function recoverERC20Token(\n        IERC20 _token,\n        uint256 _amount,\n        address _to\n    ) external onlyOwner {\n        _token.safeTransfer(_to, _amount);\n    }\n}\n"
    },
    "contracts/Token/PenaltyUnstakingStage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./IGovSBL.sol\";\n\n/// @title PenaltyUnstakingStage\n/// @notice Implements  unstaking GovSBL to SBL without locked period but with penalty\n/// @dev Unstaking amount will be released linearly during unstaking period\n/// @dev User can claim, or restake during unstaking period\n/// @dev Every Unstakes will claim releasable amount and restart unstaking period\ncontract PenaltyUnstakingStage is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    address public gShoebillToken;\n    address public shoebillToken;\n\n    uint256 public penaltyRate; // how much user unstaking amount will be deducted\n    uint256 public holderRate; // how much user's penalty amount will be given to holder\n    uint256 public discountRate; // how much bonus amount will be given to user\n\n    event UpdatePenaltyRate(uint256 penaltyRate);\n    event UpdateDiscountRate(uint256 discountRate);\n    event UpdateHolderRate(uint256 holderRate);\n\n    event EnterUnstakingStage(\n        address indexed user,\n        uint256 amount,\n        uint256 penaltyAmount,\n        uint256 holderAmount\n    );\n    event BuyGSBL(address indexed user, uint256 burnAmount, uint256 amount);\n\n    modifier onlyGShoebillToken() {\n        require(msg.sender == gShoebillToken, \"Only GShoebillToken\");\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _shoebillToken,\n        address _gShoebillToken\n    ) external initializer {\n        __Ownable_init();\n        shoebillToken = _shoebillToken;\n        gShoebillToken = _gShoebillToken;\n\n        penaltyRate = 8000;\n        holderRate = 5000;\n        discountRate = 5000;\n    }\n\n    function updatePenaltyRate(uint256 _penaltyRate) external onlyOwner {\n        penaltyRate = _penaltyRate;\n\n        emit UpdatePenaltyRate(_penaltyRate);\n    }\n\n    function updateDiscountRate(uint256 _discountRate) external onlyOwner {\n        discountRate = _discountRate;\n\n        emit UpdateDiscountRate(_discountRate);\n    }\n\n    function updateHolderRate(uint256 _holderRate) external onlyOwner {\n        holderRate = _holderRate;\n\n        emit UpdateHolderRate(_holderRate);\n    }\n\n    /// @notice Penalty Unstake function called by GShoebillToken\n    /// @dev Only GShoebillToken can call this function\n    /// @param user The user address\n    /// @param amount Amounts of tokens that user want to unstake\n    function enterUnstakingStage(\n        address user,\n        uint256 amount\n    ) external onlyGShoebillToken {\n        IERC20(shoebillToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        uint256 penaltyAmount = (amount * penaltyRate) / 10000;\n\n        IERC20(shoebillToken).safeTransfer(user, amount - penaltyAmount);\n\n        uint256 holderAmount = (penaltyAmount * holderRate) / 10000;\n\n        IERC20(shoebillToken).safeTransfer(msg.sender, holderAmount);\n\n        emit EnterUnstakingStage(user, amount, penaltyAmount, holderAmount);\n    }\n\n    /// @notice Buy G.SBL with bonus\n    /// @dev User can acquire G.SBL through buying G.SBL with bonus\n    /// @param amount SBL amount to buy G.SBL\n    function buyGSBL(uint256 amount) external {\n        uint256 currentAvailableAmount = IERC20(shoebillToken).balanceOf(\n            address(this)\n        );\n        require(currentAvailableAmount >= amount, \"Not enough sale amount\");\n\n        uint256 discountedAmount = (amount * discountRate) / 10000;\n\n        // discounted amount from user will be burned\n        IERC20(shoebillToken).safeTransferFrom(\n            msg.sender,\n            address(0),\n            discountedAmount\n        );\n\n        IERC20(shoebillToken).approve(gShoebillToken, amount);\n\n        IGovSBL(gShoebillToken).stake(msg.sender, amount);\n\n        emit BuyGSBL(msg.sender, discountedAmount, amount);\n    }\n\n    // available amount to buy g.sbt\n    function availableInAmount() external view returns (uint256) {\n        return IERC20(shoebillToken).balanceOf(address(this));\n    }\n}\n"
    },
    "contracts/Token/ReserveGuardian.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\n// WEMIX 100% buyback\n// Manta Network 50% buyback and 50% admin\ncontract ReserveGuardian {\n    constructor() {}\n}\n"
    },
    "contracts/Token/SBL.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract SBL is ERC20 {\n    uint256 public constant MAX_SUPPLY = 100_000_000 ether;\n\n    constructor() ERC20(\"Shoebill\", \"SBL\") {\n        _mint(msg.sender, MAX_SUPPLY);\n    }\n}\n"
    },
    "contracts/Token/SBPToGovSBLConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./IGovSBL.sol\";\n\n/// @title SBP to GovSBL Converter\n/// @notice Convert ShoebillPoint ERC20 token to GovSBL ERC20 token with pre-defined rate\n/// @dev SBL Amounts should be transferred to this contract before calling convert function\ncontract SBPToGovSBLConverter is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    uint256 public endTime; // converter has end time\n\n    address public shoebillPoint; // sbp token address\n    address public shoebillToken; // SBL\n    address public gShoebillToken; // govSBL\n    uint256 public convertRate; // sbp to sbl rate in 1e18 (sbp * convertRate / 1e18 = sbl)\n\n    mapping(address => uint256) sbpCommitments;\n    uint256 totalSbpCommitments;\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        address _shoebillPoint,\n        address _shoebillToken,\n        address _gShoebillToken,\n        uint256 _convertRate\n    ) external initializer {\n        __Ownable_init();\n        shoebillPoint = _shoebillPoint;\n        shoebillToken = _shoebillToken;\n        gShoebillToken = _gShoebillToken;\n        convertRate = _convertRate;\n\n        endTime = block.timestamp + 30 days;\n    }\n\n    function setEndTime(uint256 _endTime) external onlyOwner {\n        endTime = _endTime;\n    }\n\n    function setConvertRate(uint256 _convertRate) external onlyOwner {\n        convertRate = _convertRate;\n    }\n\n    /// @notice Withdraw all ERC20 after end time\n    /// @param _token ERC20 token address\n    /// @dev withdraw function if there is unconverted SBL token\n    function withdrawAfterEnd(address _token) external onlyOwner {\n        require(block.timestamp > endTime, \"Not end\");\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        IERC20(_token).safeTransfer(msg.sender, amount);\n    }\n\n    /// @notice Convert ShoebillPoint ERC20 token to GovSBL ERC20 token with pre-defined rate\n    function convert() external {\n        require(block.timestamp < endTime, \"End time\");\n        uint256 amount = IERC20(shoebillPoint).balanceOf(msg.sender);\n        require(amount > 0, \"No balance\");\n\n        IERC20(shoebillPoint).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        sbpCommitments[msg.sender] += amount;\n        totalSbpCommitments += amount;\n\n        uint256 convertAmount = pointToToken(amount);\n\n        IERC20(shoebillToken).approve(gShoebillToken, convertAmount);\n\n        IGovSBL(gShoebillToken).stake(msg.sender, convertAmount);\n    }\n\n    function pointToToken(uint256 amount) public view returns (uint256) {\n        return (convertRate * amount) / 1e18;\n    }\n\n    function convertInfo()\n        external\n        view\n        returns (uint256 _convertRate, uint256 _endTime)\n    {\n        _convertRate = convertRate;\n        _endTime = endTime;\n    }\n\n    function convertInfoAuth(\n        address _user\n    )\n        external\n        returns (\n            uint256 pointAmount,\n            uint256 estShoebillAmount,\n            uint256 estGShoebillAmount\n        )\n    {\n        pointAmount = IERC20(shoebillPoint).balanceOf(_user);\n\n        uint256 beforeBal = IERC20(gShoebillToken).balanceOf(_user);\n\n        uint256 convertAmount = pointToToken(pointAmount);\n        estShoebillAmount = convertAmount;\n\n        IERC20(shoebillToken).approve(gShoebillToken, convertAmount);\n\n        IGovSBL(gShoebillToken).stake(msg.sender, convertAmount);\n        uint256 afterBal = IERC20(gShoebillToken).balanceOf(_user);\n\n        estGShoebillAmount = afterBal - beforeBal;\n    }\n}\n"
    },
    "contracts/Unitroller.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./ErrorReporter.sol\";\nimport \"./ComptrollerStorage.sol\";\n\n/**\n * @title ComptrollerCore\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\n * CTokens should reference this contract as their comptroller.\n */\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n    /**\n     * @notice Emitted when pendingComptrollerImplementation is changed\n     */\n    event NewPendingImplementation(\n        address oldPendingImplementation,\n        address newPendingImplementation\n    );\n\n    /**\n     * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n     */\n    event NewImplementation(\n        address oldImplementation,\n        address newImplementation\n    );\n\n    /**\n     * @notice Emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    constructor() {\n        // Set admin to caller\n        admin = msg.sender;\n    }\n\n    /*** Admin Functions ***/\n    function _setPendingImplementation(\n        address newPendingImplementation\n    ) public returns (uint) {\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK\n                );\n        }\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n        emit NewPendingImplementation(\n            oldPendingImplementation,\n            pendingComptrollerImplementation\n        );\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n     * @dev Admin function for new implementation to accept it's role as implementation\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptImplementation() public returns (uint) {\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n        if (\n            msg.sender != pendingComptrollerImplementation ||\n            pendingComptrollerImplementation == address(0)\n        ) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK\n                );\n        }\n\n        // Save current values for inclusion in log\n        address oldImplementation = comptrollerImplementation;\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = address(0);\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n        emit NewPendingImplementation(\n            oldPendingImplementation,\n            pendingComptrollerImplementation\n        );\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n     * @param newPendingAdmin New pending admin.\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK\n                );\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n     * @dev Admin function for pending admin to accept role and update admin\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _acceptAdmin() public returns (uint) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return\n                fail(\n                    Error.UNAUTHORIZED,\n                    FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK\n                );\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * It returns to the external caller whatever the implementation returns\n     * or forwards reverts.\n     */\n    fallback() external payable {\n        // delegate all other functions to current implementation\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n        assembly {\n            let free_mem_ptr := mload(0x40)\n            returndatacopy(free_mem_ptr, 0, returndatasize())\n\n            switch success\n            case 0 {\n                revert(free_mem_ptr, returndatasize())\n            }\n            default {\n                return(free_mem_ptr, returndatasize())\n            }\n        }\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    },
    "witnet-solidity-bridge/contracts/interfaces/IWitnetPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// @title The Witnet Price Feed basic interface.\n/// @dev Guides implementation of active price feed polling contracts.\n/// @author The Witnet Foundation.\n\ninterface IWitnetPriceFeed {\n\n    /// Signals that a new price update request is being posted to the Witnet Request Board\n    event PriceFeeding(address indexed from, uint256 queryId, uint256 extraFee);\n\n    /// Estimates minimum fee amount in native currency to be paid when \n    /// requesting a new price update.\n    /// @dev Actual fee depends on the gas price of the `requestUpdate()` transaction.\n    /// @param _gasPrice Gas price expected to be paid when calling `requestUpdate()`\n    function estimateUpdateFee(uint256 _gasPrice) external view returns (uint256);\n\n    /// Returns result of the last valid price update request successfully solved by the Witnet oracle.\n    function lastPrice() external view returns (int256);\n\n    /// Returns the EVM-timestamp when last valid price was reported back from the Witnet oracle.\n    function lastTimestamp() external view returns (uint256);    \n\n    /// Returns tuple containing last valid price and timestamp, as well as status code of latest update\n    /// request that got posted to the Witnet Request Board.\n    /// @return _lastPrice Last valid price reported back from the Witnet oracle.\n    /// @return _lastTimestamp EVM-timestamp of the last valid price.\n    /// @return _lastDrTxHash Hash of the Witnet Data Request that solved the last valid price.\n    /// @return _latestUpdateStatus Status code of the latest update request.\n    function lastValue() external view returns (\n        int _lastPrice,\n        uint _lastTimestamp,\n        bytes32 _lastDrTxHash,\n        uint _latestUpdateStatus\n    );\n\n    /// Returns identifier of the latest update request posted to the Witnet Request Board.\n    function latestQueryId() external view returns (uint256);\n\n    /// Returns hash of the Witnet Data Request that solved the latest update request.\n    /// @dev Returning 0 while the latest update request remains unsolved.\n    function latestUpdateDrTxHash() external view returns (bytes32);\n\n    /// Returns error message of latest update request posted to the Witnet Request Board.\n    /// @dev Returning empty string if the latest update request remains unsolved, or\n    /// @dev if it was succesfully solved with no errors.\n    function latestUpdateErrorMessage() external view returns (string memory);\n\n    /// Returns status code of latest update request posted to the Witnet Request Board:\n    /// @dev Status codes:\n    /// @dev   - 200: update request was succesfully solved with no errors\n    /// @dev   - 400: update request was solved with errors\n    /// @dev   - 404: update request was not solved yet \n    function latestUpdateStatus() external view returns (uint256);\n\n    /// Returns `true` if latest update request posted to the Witnet Request Board \n    /// has not been solved yet by the Witnet oracle.\n    function pendingUpdate() external view returns (bool);\n\n    /// Posts a new price update request to the Witnet Request Board. Requires payment of a fee\n    /// that depends on the value of `tx.gasprice`. See `estimateUpdateFee(uint256)`.\n    /// @dev If previous update request was not solved yet, calling this method again allows\n    /// @dev upgrading the update fee if called with a higher `tx.gasprice` value.\n    function requestUpdate() external payable;\n\n    /// Tells whether this contract implements the interface defined by `interfaceId`. \n    /// @dev See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n    /// @dev to learn more about how these ids are created.\n    function supportsInterface(bytes4) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}