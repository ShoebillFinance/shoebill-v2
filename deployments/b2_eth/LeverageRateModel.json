{
  "address": "0x24E4d6D97Ee1fDbEc6BCc7a89D6a90Fbd68725F9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocksPerYear_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseRatePerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jumpMultiplierPerBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "kink",
          "type": "uint256"
        }
      ],
      "name": "NewInterestParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "getBorrowRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "getSupplyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInterestRateModel",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jumpMultiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocksPerYear_",
          "type": "uint256"
        }
      ],
      "name": "updateBlocksPerYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseRatePerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "jumpMultiplierPerYear",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "kink_",
          "type": "uint256"
        }
      ],
      "name": "updateJumpRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserves",
          "type": "uint256"
        }
      ],
      "name": "utilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa758628c93577cbefb654f93a7ff7ec67ea731b6d6b77413922443a96898440d",
  "receipt": {
    "to": null,
    "from": "0xcFf0E961d0DEC9dadF8587F66f158738e1366264",
    "contractAddress": "0x24E4d6D97Ee1fDbEc6BCc7a89D6a90Fbd68725F9",
    "transactionIndex": 4,
    "gasUsed": "786436",
    "logsBloom": "0x
    "blockHash": "0xba2f07bd1841d2f20cafc93f4193836112b1280d835478ace6077638c2689868",
    "transactionHash": "0xa758628c93577cbefb654f93a7ff7ec67ea731b6d6b77413922443a96898440d",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 439083,
        "transactionHash": "0xa758628c93577cbefb654f93a7ff7ec67ea731b6d6b77413922443a96898440d",
        "address": "0x24E4d6D97Ee1fDbEc6BCc7a89D6a90Fbd68725F9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cff0e961d0dec9dadf8587f66f158738e1366264"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xba2f07bd1841d2f20cafc93f4193836112b1280d835478ace6077638c2689868"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 439083,
        "transactionHash": "0xa758628c93577cbefb654f93a7ff7ec67ea731b6d6b77413922443a96898440d",
        "address": "0x24E4d6D97Ee1fDbEc6BCc7a89D6a90Fbd68725F9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000cff0e961d0dec9dadf8587f66f158738e1366264",
          "0x000000000000000000000000cff0e961d0dec9dadf8587f66f158738e1366264"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xba2f07bd1841d2f20cafc93f4193836112b1280d835478ace6077638c2689868"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 439083,
        "transactionHash": "0xa758628c93577cbefb654f93a7ff7ec67ea731b6d6b77413922443a96898440d",
        "address": "0x24E4d6D97Ee1fDbEc6BCc7a89D6a90Fbd68725F9",
        "topics": [
          "0x6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024ea4122a0000000000000000000000000000000000000000000000000000000a1d5ea5a90000000000000000000000000000000000000000000000000b1a2bc2ec500000",
        "logIndex": 3,
        "blockHash": "0xba2f07bd1841d2f20cafc93f4193836112b1280d835478ace6077638c2689868"
      }
    ],
    "blockNumber": 439083,
    "cumulativeGasUsed": "974456",
    "status": 1,
    "byzantium": true
  },
  "args": [
    31536000,
    "0",
    "250000000000000000",
    "1370000000000000000",
    "800000000000000000",
    "0xcFf0E961d0DEC9dadF8587F66f158738e1366264",
    "LeverageRateModel"
  ],
  "numDeployments": 1,
  "solcInputHash": "328738b94191aefcacff31bcb4151875",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksPerYear_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseRatePerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"kink\",\"type\":\"uint256\"}],\"name\":\"NewInterestParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jumpMultiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksPerYear_\",\"type\":\"uint256\"}],\"name\":\"updateBlocksPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseRatePerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jumpMultiplierPerYear\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kink_\",\"type\":\"uint256\"}],\"name\":\"updateJumpRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound (modified by Dharma Labs)\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by 1e18)\",\"jumpMultiplierPerYear\":\"The multiplierPerBlock after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\",\"multiplierPerYear\":\"The rate of increase in interest rate wrt utilization (scaled by 1e18)\",\"name_\":\"User-friendly name for the new contract\",\"owner_\":\"Sets the owner of the contract to someone other than msgSender\"}},\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The borrow rate percentage per block as a mantissa (scaled by 1e18)\"}},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserveFactorMantissa\":\"The current reserve factor for the market\",\"reserves\":\"The amount of reserves in the market\"},\"returns\":{\"_0\":\"The supply rate percentage per block as a mantissa (scaled by 1e18)\"}},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBlocksPerYear(uint256)\":{\"params\":{\"blocksPerYear_\":\"The new estimated eth blocks per year.\"}},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"params\":{\"baseRatePerYear\":\"The approximate target base APR, as a mantissa (scaled by 1e18)\",\"jumpMultiplierPerYear\":\"The multiplierPerBlock after hitting a specified utilization point\",\"kink_\":\"The utilization point at which the jump multiplier is applied\",\"multiplierPerYear\":\"The rate of increase in interest rate wrt utilization (scaled by 1e18)\"}},\"utilizationRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The amount of borrows in the market\",\"cash\":\"The amount of cash in the market\",\"reserves\":\"The amount of reserves in the market (currently unused)\"},\"returns\":{\"_0\":\"The utilization rate as a mantissa between [0, 1e18]\"}}},\"title\":\"Compound's JumpRateModel Contract V3\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseRatePerBlock()\":{\"notice\":\"The base interest rate which is the y-intercept when utilization rate is 0\"},\"blocksPerYear()\":{\"notice\":\"The approximate number of blocks per year that is assumed by the interest rate model\"},\"constructor\":{\"notice\":\"Construct an interest rate model\"},\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow rate per block, with the error code expected by the market\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply rate per block\"},\"isInterestRateModel()\":{\"notice\":\"Indicator that this is an InterestRateModel contract (for inspection)\"},\"jumpMultiplierPerBlock()\":{\"notice\":\"The multiplierPerBlock after hitting a specified utilization point\"},\"kink()\":{\"notice\":\"The utilization point at which the jump multiplier is applied\"},\"multiplierPerBlock()\":{\"notice\":\"The multiplier of utilization rate that gives the slope of the interest rate\"},\"name()\":{\"notice\":\"A name for user-friendliness, e.g. WBTC\"},\"updateBlocksPerYear(uint256)\":{\"notice\":\"Updates the blocksPerYear in order to make interest calculations simpler\"},\"updateJumpRateModel(uint256,uint256,uint256,uint256)\":{\"notice\":\"Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\"},\"utilizationRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\"}},\"notice\":\"Version 2 modifies Version 1 by enabling updateable parameters.Version 3 includes Ownable and have updatable blocksPerYear.Version 4 moves blocksPerYear to the constructor.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JumpRateModelV4.sol\":\"JumpRateModelV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title InterestRateModel Interface\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves\\n    ) external view virtual returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x92e1ea65509fe62cbbc110d35d0fe2b7ce0cc6be1dde75b373ad2ffe2f37f543\",\"license\":\"BSD-3-Clause\"},\"contracts/JumpRateModelV4.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Ownership/Ownable.sol\\\";\\n\\n/**\\n * @title Compound's JumpRateModel Contract V3\\n * @author Compound (modified by Dharma Labs)\\n * @notice Version 2 modifies Version 1 by enabling updateable parameters.\\n * @notice Version 3 includes Ownable and have updatable blocksPerYear.\\n * @notice Version 4 moves blocksPerYear to the constructor.\\n */\\ncontract JumpRateModelV4 is InterestRateModel, Ownable {\\n    using SafeMath for uint256;\\n\\n    event NewInterestParams(\\n        uint256 baseRatePerBlock, uint256 multiplierPerBlock, uint256 jumpMultiplierPerBlock, uint256 kink\\n    );\\n\\n    /**\\n     * @notice The approximate number of blocks per year that is assumed by the interest rate model\\n     */\\n    uint256 public blocksPerYear;\\n\\n    /**\\n     * @notice The multiplier of utilization rate that gives the slope of the interest rate\\n     */\\n    uint256 public multiplierPerBlock;\\n\\n    /**\\n     * @notice The base interest rate which is the y-intercept when utilization rate is 0\\n     */\\n    uint256 public baseRatePerBlock;\\n\\n    /**\\n     * @notice The multiplierPerBlock after hitting a specified utilization point\\n     */\\n    uint256 public jumpMultiplierPerBlock;\\n\\n    /**\\n     * @notice The utilization point at which the jump multiplier is applied\\n     */\\n    uint256 public kink;\\n\\n    /**\\n     * @notice A name for user-friendliness, e.g. WBTC\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice Construct an interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     * @param owner_ Sets the owner of the contract to someone other than msgSender\\n     * @param name_ User-friendly name for the new contract\\n     */\\n    constructor(\\n        uint256 blocksPerYear_,\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_,\\n        address owner_,\\n        string memory name_\\n    ) {\\n        blocksPerYear = blocksPerYear_;\\n        name = name_;\\n        _transferOwnership(owner_);\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    /**\\n     * @notice Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModel(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) external onlyOwner {\\n        updateJumpRateModelInternal(baseRatePerYear, multiplierPerYear, jumpMultiplierPerYear, kink_);\\n    }\\n\\n    // 435375443937\\n\\n    /**\\n     * @notice Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market (currently unused)\\n     * @return The utilization rate as a mantissa between [0, 1e18]\\n     */\\n    function utilizationRate(uint256 cash, uint256 borrows, uint256 reserves) public pure returns (uint256) {\\n        // Utilization rate is 0 when there are no borrows\\n        if (borrows == 0) {\\n            return 0;\\n        }\\n\\n        return borrows.mul(1e18).div(cash.add(borrows).sub(reserves));\\n    }\\n\\n    /**\\n     * @notice Updates the blocksPerYear in order to make interest calculations simpler\\n     * @param blocksPerYear_ The new estimated eth blocks per year.\\n     */\\n    function updateBlocksPerYear(uint256 blocksPerYear_) external onlyOwner {\\n        blocksPerYear = blocksPerYear_;\\n    }\\n\\n    /**\\n     * @notice Calculates the current borrow rate per block, with the error code expected by the market\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @return The borrow rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) public view override returns (uint256) {\\n        uint256 util = utilizationRate(cash, borrows, reserves);\\n\\n        if (util <= kink) {\\n            return util.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n        } else {\\n            uint256 normalRate = kink.mul(multiplierPerBlock).div(1e18).add(baseRatePerBlock);\\n            uint256 excessUtil = util.sub(kink);\\n            return excessUtil.mul(jumpMultiplierPerBlock).div(1e18).add(normalRate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the current supply rate per block\\n     * @param cash The amount of cash in the market\\n     * @param borrows The amount of borrows in the market\\n     * @param reserves The amount of reserves in the market\\n     * @param reserveFactorMantissa The current reserve factor for the market\\n     * @return The supply rate percentage per block as a mantissa (scaled by 1e18)\\n     */\\n    function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 oneMinusReserveFactor = uint256(1e18).sub(reserveFactorMantissa);\\n        uint256 borrowRate = getBorrowRate(cash, borrows, reserves);\\n        uint256 rateToPool = borrowRate.mul(oneMinusReserveFactor).div(1e18);\\n        return utilizationRate(cash, borrows, reserves).mul(rateToPool).div(1e18);\\n    }\\n\\n    /**\\n     * @notice Internal function to update the parameters of the interest rate model\\n     * @param baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)\\n     * @param multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)\\n     * @param jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point\\n     * @param kink_ The utilization point at which the jump multiplier is applied\\n     */\\n    function updateJumpRateModelInternal(\\n        uint256 baseRatePerYear,\\n        uint256 multiplierPerYear,\\n        uint256 jumpMultiplierPerYear,\\n        uint256 kink_\\n    ) internal {\\n        baseRatePerBlock = baseRatePerYear.div(blocksPerYear);\\n        multiplierPerBlock = (multiplierPerYear.mul(1e18)).div(blocksPerYear.mul(kink_));\\n        jumpMultiplierPerBlock = jumpMultiplierPerYear.div(blocksPerYear);\\n        kink = kink_;\\n\\n        emit NewInterestParams(baseRatePerBlock, multiplierPerBlock, jumpMultiplierPerBlock, kink);\\n    }\\n}\\n\",\"keccak256\":\"0x9ba3bc7f5b0c2d23cde27388831e99816ef9042ec92c7ca1376f78abf32728eb\",\"license\":\"BSD-3-Clause\"},\"contracts/Ownership/Ownable.sol\":{\"content\":\"pragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x34720c9af94a0ccd2d1b40692c872a552ef686d0b1c80357796004645f9d3c47\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c;\\n        unchecked {\\n            c = a + b;\\n        }\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        uint256 c;\\n        unchecked {\\n            c = a + b;\\n        }\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c;\\n        unchecked {\\n            c = a * b;\\n        }\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c;\\n        unchecked {\\n            c = a * b;\\n        }\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x07fedb964c0e96bdf828696a39caa9b76d77b419a86fa66db233644b62b1a2b7\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010b4380380620010b4833981016040819052620000349162000392565b600080546001600160a01b03191633908117825560405190919060008051602062001094833981519152908290a3600187905560066200007582826200052f565b5062000081826200009c565b6200008f8686868662000151565b5050505050505062000653565b6001600160a01b038116620001075760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b600080546040516001600160a01b03808516939216916000805160206200109483398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6200016d600154856200024a60201b620005481790919060201c565b600381905550620001c962000193826001546200029d60201b620005931790919060201c565b620001b5670de0b6b3a7640000866200029d60201b620005931790919060201c565b6200024a60201b620005481790919060201c565b600281905550620001eb600154836200024a60201b620005481790919060201c565b60048190556005829055600354600254604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b60006200029483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506200031a60201b60201c565b90505b92915050565b600082600003620002b15750600062000297565b82820282620002c18583620005fb565b14620002945760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401620000fe565b600081836200033e5760405162461bcd60e51b8152600401620000fe91906200061e565b5060006200034d8486620005fb565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003895781810151838201526020016200036f565b50506000910152565b600080600080600080600060e0888a031215620003ae57600080fd5b8751602089015160408a015160608b015160808c015160a08d0151949b50929950909750955093506001600160a01b0381168114620003ec57600080fd5b60c08901519092506001600160401b03808211156200040a57600080fd5b818a0191508a601f8301126200041f57600080fd5b81518181111562000434576200043462000356565b604051601f8201601f19908116603f011681019083821181831017156200045f576200045f62000356565b816040528281528d60208487010111156200047957600080fd5b6200048c8360208301602088016200036c565b809550505050505092959891949750929550565b600181811c90821680620004b557607f821691505b602082108103620004d657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200052a57600081815260208120601f850160051c81016020861015620005055750805b601f850160051c820191505b81811015620005265782815560010162000511565b5050505b505050565b81516001600160401b038111156200054b576200054b62000356565b62000563816200055c8454620004a0565b84620004dc565b602080601f8311600181146200059b5760008415620005825750858301515b600019600386901b1c1916600185901b17855562000526565b600085815260208120601f198616915b82811015620005cc57888601518255948401946001909101908401620005ab565b5085821015620005eb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000826200061957634e487b7160e01b600052601260045260246000fd5b500490565b60208152600082518060208401526200063f8160408501602087016200036c565b601f01601f19169190910160400192915050565b610a3180620006636000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638f32d59b11610097578063b9f9850a11610066578063b9f9850a146101f2578063f14039de146101fb578063f2fde38b14610204578063fd2da3391461021757600080fd5b80638f32d59b146101b0578063a3193e2e146101c3578063a385fb96146101d6578063b8168816146101df57600080fd5b80636e71e2d8116100d35780636e71e2d814610171578063715018a6146101845780638726bb891461018c5780638da5cb5b1461019557600080fd5b806306fdde031461010557806315f24053146101235780632037f3e7146101445780632191f92a14610159575b600080fd5b61010d610220565b60405161011a919061085b565b60405180910390f35b6101366101313660046108a9565b6102ae565b60405190815260200161011a565b6101576101523660046108d5565b61037a565b005b610161600181565b604051901515815260200161011a565b61013661017f3660046108a9565b6103bf565b610157610402565b61013660025481565b6000546040516001600160a01b03909116815260200161011a565b6000546001600160a01b03163314610161565b6101576101d1366004610907565b610476565b61013660015481565b6101366101ed3660046108d5565b6104a5565b61013660045481565b61013660035481565b610157610212366004610920565b610512565b61013660055481565b6006805461022d90610949565b80601f016020809104026020016040519081016040528092919081815260200182805461025990610949565b80156102a65780601f1061027b576101008083540402835291602001916102a6565b820191906000526020600020905b81548152906001019060200180831161028957829003601f168201915b505050505081565b6000806102bc8585856103bf565b90506005548111610302576102fa6003546102f4670de0b6b3a76400006102ee6002548661059390919063ffffffff16565b90610548565b9061060a565b915050610373565b600061032d6003546102f4670de0b6b3a76400006102ee60025460055461059390919063ffffffff16565b905060006103466005548461065f90919063ffffffff16565b905061036d826102f4670de0b6b3a76400006102ee6004548661059390919063ffffffff16565b93505050505b9392505050565b6000546001600160a01b031633146103ad5760405162461bcd60e51b81526004016103a490610983565b60405180910390fd5b6103b9848484846106a1565b50505050565b6000826000036103d157506000610373565b6103fa6103e8836103e2878761060a565b9061065f565b6102ee85670de0b6b3a7640000610593565b949350505050565b6000546001600160a01b0316331461042c5760405162461bcd60e51b81526004016103a490610983565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146104a05760405162461bcd60e51b81526004016103a490610983565b600155565b6000806104ba670de0b6b3a76400008461065f565b905060006104c98787876102ae565b905060006104e3670de0b6b3a76400006102ee8486610593565b9050610506670de0b6b3a76400006102ee836105008c8c8c6103bf565b90610593565b98975050505050505050565b6000546001600160a01b0316331461053c5760405162461bcd60e51b81526004016103a490610983565b61054581610733565b50565b600061058a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506107f3565b90505b92915050565b6000826000036105a55750600061058d565b828202826105b385836109b8565b1461058a5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103a4565b60008282018381101561058a5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103a4565b600061058a83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061082a565b6001546106af908590610548565b6003556001546106c3906103e89083610593565b6002556001546106d4908390610548565b60048190556005829055600354600254604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b6001600160a01b0381166107985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081836108145760405162461bcd60e51b81526004016103a4919061085b565b50600061082184866109b8565b95945050505050565b6000818484111561084e5760405162461bcd60e51b81526004016103a4919061085b565b50600061082184866109da565b600060208083528351808285015260005b818110156108885785810183015185820160400152820161086c565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806000606084860312156108be57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156108eb57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561091957600080fd5b5035919050565b60006020828403121561093257600080fd5b81356001600160a01b038116811461058a57600080fd5b600181811c9082168061095d57607f821691505b60208210810361097d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000826109d557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561058d57634e487b7160e01b600052601160045260246000fdfea26469706673582212200dbc277723bd16514166ed9e3c3b9cfb505b5076705a8ef63a7c5c52e765616264736f6c634300081000338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638f32d59b11610097578063b9f9850a11610066578063b9f9850a146101f2578063f14039de146101fb578063f2fde38b14610204578063fd2da3391461021757600080fd5b80638f32d59b146101b0578063a3193e2e146101c3578063a385fb96146101d6578063b8168816146101df57600080fd5b80636e71e2d8116100d35780636e71e2d814610171578063715018a6146101845780638726bb891461018c5780638da5cb5b1461019557600080fd5b806306fdde031461010557806315f24053146101235780632037f3e7146101445780632191f92a14610159575b600080fd5b61010d610220565b60405161011a919061085b565b60405180910390f35b6101366101313660046108a9565b6102ae565b60405190815260200161011a565b6101576101523660046108d5565b61037a565b005b610161600181565b604051901515815260200161011a565b61013661017f3660046108a9565b6103bf565b610157610402565b61013660025481565b6000546040516001600160a01b03909116815260200161011a565b6000546001600160a01b03163314610161565b6101576101d1366004610907565b610476565b61013660015481565b6101366101ed3660046108d5565b6104a5565b61013660045481565b61013660035481565b610157610212366004610920565b610512565b61013660055481565b6006805461022d90610949565b80601f016020809104026020016040519081016040528092919081815260200182805461025990610949565b80156102a65780601f1061027b576101008083540402835291602001916102a6565b820191906000526020600020905b81548152906001019060200180831161028957829003601f168201915b505050505081565b6000806102bc8585856103bf565b90506005548111610302576102fa6003546102f4670de0b6b3a76400006102ee6002548661059390919063ffffffff16565b90610548565b9061060a565b915050610373565b600061032d6003546102f4670de0b6b3a76400006102ee60025460055461059390919063ffffffff16565b905060006103466005548461065f90919063ffffffff16565b905061036d826102f4670de0b6b3a76400006102ee6004548661059390919063ffffffff16565b93505050505b9392505050565b6000546001600160a01b031633146103ad5760405162461bcd60e51b81526004016103a490610983565b60405180910390fd5b6103b9848484846106a1565b50505050565b6000826000036103d157506000610373565b6103fa6103e8836103e2878761060a565b9061065f565b6102ee85670de0b6b3a7640000610593565b949350505050565b6000546001600160a01b0316331461042c5760405162461bcd60e51b81526004016103a490610983565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146104a05760405162461bcd60e51b81526004016103a490610983565b600155565b6000806104ba670de0b6b3a76400008461065f565b905060006104c98787876102ae565b905060006104e3670de0b6b3a76400006102ee8486610593565b9050610506670de0b6b3a76400006102ee836105008c8c8c6103bf565b90610593565b98975050505050505050565b6000546001600160a01b0316331461053c5760405162461bcd60e51b81526004016103a490610983565b61054581610733565b50565b600061058a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506107f3565b90505b92915050565b6000826000036105a55750600061058d565b828202826105b385836109b8565b1461058a5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103a4565b60008282018381101561058a5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103a4565b600061058a83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061082a565b6001546106af908590610548565b6003556001546106c3906103e89083610593565b6002556001546106d4908390610548565b60048190556005829055600354600254604080519283526020830191909152810191909152606081018290527f6960ab234c7ef4b0c9197100f5393cfcde7c453ac910a27bd2000aa1dd4c068d9060800160405180910390a150505050565b6001600160a01b0381166107985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103a4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081836108145760405162461bcd60e51b81526004016103a4919061085b565b50600061082184866109b8565b95945050505050565b6000818484111561084e5760405162461bcd60e51b81526004016103a4919061085b565b50600061082184866109da565b600060208083528351808285015260005b818110156108885785810183015185820160400152820161086c565b506000604082860101526040601f19601f8301168501019250505092915050565b6000806000606084860312156108be57600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156108eb57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561091957600080fd5b5035919050565b60006020828403121561093257600080fd5b81356001600160a01b038116811461058a57600080fd5b600181811c9082168061095d57607f821691505b60208210810361097d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000826109d557634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561058d57634e487b7160e01b600052601160045260246000fdfea26469706673582212200dbc277723bd16514166ed9e3c3b9cfb505b5076705a8ef63a7c5c52e765616264736f6c63430008100033",
  "devdoc": {
    "author": "Compound (modified by Dharma Labs)",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by 1e18)",
          "jumpMultiplierPerYear": "The multiplierPerBlock after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied",
          "multiplierPerYear": "The rate of increase in interest rate wrt utilization (scaled by 1e18)",
          "name_": "User-friendly name for the new contract",
          "owner_": "Sets the owner of the contract to someone other than msgSender"
        }
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The borrow rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserveFactorMantissa": "The current reserve factor for the market",
          "reserves": "The amount of reserves in the market"
        },
        "returns": {
          "_0": "The supply rate percentage per block as a mantissa (scaled by 1e18)"
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBlocksPerYear(uint256)": {
        "params": {
          "blocksPerYear_": "The new estimated eth blocks per year."
        }
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "params": {
          "baseRatePerYear": "The approximate target base APR, as a mantissa (scaled by 1e18)",
          "jumpMultiplierPerYear": "The multiplierPerBlock after hitting a specified utilization point",
          "kink_": "The utilization point at which the jump multiplier is applied",
          "multiplierPerYear": "The rate of increase in interest rate wrt utilization (scaled by 1e18)"
        }
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "params": {
          "borrows": "The amount of borrows in the market",
          "cash": "The amount of cash in the market",
          "reserves": "The amount of reserves in the market (currently unused)"
        },
        "returns": {
          "_0": "The utilization rate as a mantissa between [0, 1e18]"
        }
      }
    },
    "title": "Compound's JumpRateModel Contract V3",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseRatePerBlock()": {
        "notice": "The base interest rate which is the y-intercept when utilization rate is 0"
      },
      "blocksPerYear()": {
        "notice": "The approximate number of blocks per year that is assumed by the interest rate model"
      },
      "constructor": {
        "notice": "Construct an interest rate model"
      },
      "getBorrowRate(uint256,uint256,uint256)": {
        "notice": "Calculates the current borrow rate per block, with the error code expected by the market"
      },
      "getSupplyRate(uint256,uint256,uint256,uint256)": {
        "notice": "Calculates the current supply rate per block"
      },
      "isInterestRateModel()": {
        "notice": "Indicator that this is an InterestRateModel contract (for inspection)"
      },
      "jumpMultiplierPerBlock()": {
        "notice": "The multiplierPerBlock after hitting a specified utilization point"
      },
      "kink()": {
        "notice": "The utilization point at which the jump multiplier is applied"
      },
      "multiplierPerBlock()": {
        "notice": "The multiplier of utilization rate that gives the slope of the interest rate"
      },
      "name()": {
        "notice": "A name for user-friendliness, e.g. WBTC"
      },
      "updateBlocksPerYear(uint256)": {
        "notice": "Updates the blocksPerYear in order to make interest calculations simpler"
      },
      "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
        "notice": "Update the parameters of the interest rate model (only callable by owner, i.e. Timelock)"
      },
      "utilizationRate(uint256,uint256,uint256)": {
        "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
      }
    },
    "notice": "Version 2 modifies Version 1 by enabling updateable parameters.Version 3 includes Ownable and have updatable blocksPerYear.Version 4 moves blocksPerYear to the constructor.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10565,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9216,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "blocksPerYear",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9219,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "multiplierPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9222,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "baseRatePerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9225,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "jumpMultiplierPerBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 9228,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "kink",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9231,
        "contract": "contracts/JumpRateModelV4.sol:JumpRateModelV4",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}