{
  "address": "0x8Ba76ded880583581E2d9D253F16b87aC29FA897",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowSpeed",
          "type": "uint256"
        }
      ],
      "name": "BorrowSpeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deltaAccrued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAccrued",
          "type": "uint256"
        }
      ],
      "name": "RewardAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplySpeed",
          "type": "uint256"
        }
      ],
      "name": "SupplySpeedUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_grantReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "supplySpeeds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowSpeeds",
          "type": "uint256[]"
        }
      ],
      "name": "_updateRewardSpeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "name": "_whitelistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "holders",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gShoebillToken",
      "outputs": [
        {
          "internalType": "contract IGovSBL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "miningReferral",
      "outputs": [
        {
          "internalType": "contract IMiningReferral",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "notifyBorrowIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "notifyBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "supplier",
          "type": "address"
        }
      ],
      "name": "notifySupplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "notifySupplyIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardAccountState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardAccrued",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardInitialIndex",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardMarketState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplySpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint224",
          "name": "supplyIndex",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "supplyBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "borrowSpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint224",
          "name": "borrowIndex",
          "type": "uint224"
        },
        {
          "internalType": "uint32",
          "name": "borrowBlock",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardTokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gShoebillToken",
          "type": "address"
        }
      ],
      "name": "setGShoebillToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_miningReferral",
          "type": "address"
        }
      ],
      "name": "setMiningReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef2d239b84be6f05ef3550a9e755126541727ac3d2fea158190d6ef4aa84d1fe",
  "receipt": {
    "to": null,
    "from": "0xcFf0E961d0DEC9dadF8587F66f158738e1366264",
    "contractAddress": "0x8Ba76ded880583581E2d9D253F16b87aC29FA897",
    "transactionIndex": 2,
    "gasUsed": "2080689",
    "logsBloom": "0x
    "blockHash": "0x21cd0c5748845a20e04d8df5f4fd18a6fb1c1cc345dc8b8660bfc36b166e30cf",
    "transactionHash": "0xef2d239b84be6f05ef3550a9e755126541727ac3d2fea158190d6ef4aa84d1fe",
    "logs": [],
    "blockNumber": 439073,
    "cumulativeGasUsed": "2145456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "43154d5442d095575383cce41093b385",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowSpeed\",\"type\":\"uint256\"}],\"name\":\"BorrowSpeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaAccrued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAccrued\",\"type\":\"uint256\"}],\"name\":\"RewardAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplySpeed\",\"type\":\"uint256\"}],\"name\":\"SupplySpeedUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_grantReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"supplySpeeds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowSpeeds\",\"type\":\"uint256[]\"}],\"name\":\"_updateRewardSpeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"_whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gShoebillToken\",\"outputs\":[{\"internalType\":\"contract IGovSBL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningReferral\",\"outputs\":[{\"internalType\":\"contract IMiningReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"notifyBorrowIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"notifyBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"name\":\"notifySupplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"notifySupplyIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardAccountState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAccrued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInitialIndex\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardMarketState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplySpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint224\",\"name\":\"supplyIndex\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"supplyBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"borrowSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint224\",\"name\":\"borrowIndex\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"borrowBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gShoebillToken\",\"type\":\"address\"}],\"name\":\"setGShoebillToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miningReferral\",\"type\":\"address\"}],\"name\":\"setMiningReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Reward Distributor (version 1)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"comptroller()\":{\"notice\":\"The comptroller that rewards are distributed to\"},\"getRewardTokens()\":{\"notice\":\"Getters \"},\"rewardAccountState(address,address)\":{\"notice\":\"The Reward state for each reward token for each account\"},\"rewardInitialIndex()\":{\"notice\":\"The initial reward index for a market\"},\"rewardMarketState(address,address)\":{\"notice\":\"The Reward state for each reward token for each market\"},\"rewardTokenExists(address)\":{\"notice\":\"Flag to check if reward token added before\"},\"rewardTokens(uint256)\":{\"notice\":\"Added reward tokens\"}},\"notice\":\"This contract is used to distribute rewards to users for supplying and borrowing assets. Each supply and borrow changing action from comptroller will trigger index update for each reward token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardDistributor.sol\":\"RewardDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    // Maximum borrow rate that can ever be applied (.0005% / block)\\n    uint internal constant borrowRateMaxMantissa = 0.00005e16;\\n\\n    // Maximum fraction of interest that can be set aside for reserves\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    // Official record of token balances for each account\\n    mapping(address => uint) internal accountTokens;\\n\\n    // Approved token transfer amounts on behalf of others\\n    mapping(address => mapping(address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    // Mapping of account addresses to outstanding borrow balances\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n\\n    /**\\n     * @notice The reserve guardian can reduce the reserves of the market\\n     */\\n    address payable public reserveGuardian;\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(\\n        uint cashPrior,\\n        uint interestAccumulated,\\n        uint borrowIndex,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(\\n        address borrower,\\n        uint borrowAmount,\\n        uint accountBorrows,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint accountBorrows,\\n        uint totalBorrows\\n    );\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        address cTokenCollateral,\\n        uint seizeTokens\\n    );\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(\\n        ComptrollerInterface oldComptroller,\\n        ComptrollerInterface newComptroller\\n    );\\n\\n    /**\\n     * @notice Event emitted when reserve guardian is changed\\n     */\\n    event NewReserveGuardian(\\n        address oldReserveGuardian,\\n        address newReserveGuardian\\n    );\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(\\n        InterestRateModel oldInterestRateModel,\\n        InterestRateModel newInterestRateModel\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(\\n        uint oldReserveFactorMantissa,\\n        uint newReserveFactorMantissa\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(\\n        address benefactor,\\n        uint addAmount,\\n        uint newTotalReserves\\n    );\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(\\n        address admin,\\n        uint reduceAmount,\\n        uint newTotalReserves\\n    );\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external virtual returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function approve(\\n        address spender,\\n        uint amount\\n    ) external virtual returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view virtual returns (uint);\\n\\n    function balanceOf(address owner) external view virtual returns (uint);\\n\\n    function balanceOfUnderlying(address owner) external virtual returns (uint);\\n\\n    function getAccountSnapshot(\\n        address account\\n    ) external view virtual returns (uint, uint, uint, uint);\\n\\n    function borrowRatePerBlock() external view virtual returns (uint);\\n\\n    function supplyRatePerBlock() external view virtual returns (uint);\\n\\n    function totalBorrowsCurrent() external virtual returns (uint);\\n\\n    function borrowBalanceCurrent(\\n        address account\\n    ) external virtual returns (uint);\\n\\n    function borrowBalanceStored(\\n        address account\\n    ) external view virtual returns (uint);\\n\\n    function exchangeRateCurrent() external virtual returns (uint);\\n\\n    function exchangeRateStored() external view virtual returns (uint);\\n\\n    function getCash() external view virtual returns (uint);\\n\\n    function accrueInterest() external virtual returns (uint);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual returns (uint);\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(\\n        address payable newPendingAdmin\\n    ) external virtual returns (uint);\\n\\n    function _acceptAdmin() external virtual returns (uint);\\n\\n    function _setComptroller(\\n        ComptrollerInterface newComptroller\\n    ) external virtual returns (uint);\\n\\n    function _setReserveFactor(\\n        uint newReserveFactorMantissa\\n    ) external virtual returns (uint);\\n\\n    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\\n\\n    function _setInterestRateModel(\\n        InterestRateModel newInterestRateModel\\n    ) external virtual returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external virtual returns (uint);\\n\\n    function redeem(uint redeemTokens) external virtual returns (uint);\\n\\n    function redeemUnderlying(\\n        uint redeemAmount\\n    ) external virtual returns (uint);\\n\\n    function borrow(uint borrowAmount) external virtual returns (uint);\\n\\n    function repayBorrow(uint repayAmount) external virtual returns (uint);\\n\\n    function repayBorrowBehalf(\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint repayAmount,\\n        CTokenInterface cTokenCollateral\\n    ) external virtual returns (uint);\\n\\n    function sweepToken(EIP20NonStandardInterface token) external virtual;\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external virtual returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(\\n        address oldImplementation,\\n        address newImplementation\\n    );\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(\\n        address implementation_,\\n        bool allowResign,\\n        bytes memory becomeImplementationData\\n    ) external virtual;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) external virtual;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() external virtual;\\n}\\n\",\"keccak256\":\"0xd456f409eeb4b4209fc62f68fde2027bfcac121f36a729ad03dd7e5048e16e9f\",\"license\":\"BSD-3-Clause\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(\\n        address[] calldata cTokens\\n    ) external virtual returns (uint[] memory);\\n\\n    function exitMarket(address cToken) external virtual returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint mintAmount\\n    ) external virtual returns (uint);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint mintAmount,\\n        uint mintTokens\\n    ) external virtual;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint redeemTokens\\n    ) external virtual returns (uint);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint redeemAmount,\\n        uint redeemTokens\\n    ) external virtual;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint borrowAmount\\n    ) external virtual returns (uint);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint borrowAmount\\n    ) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex\\n    ) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount\\n    ) external virtual returns (uint);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens\\n    ) external virtual;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual returns (uint);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens\\n    ) external virtual;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint transferTokens\\n    ) external virtual returns (uint);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint transferTokens\\n    ) external virtual;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount\\n    ) external view virtual returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xab561397519328ed731d7b88d8d97f3fa2b3884cc8a22336534d2970c21dee55\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transfer(\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return success Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0xc58019a1ce3f7f282b5e5d4960922d1f5334872431808fd0c1e777f263871bb8\",\"license\":\"BSD-3-Clause\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved\\n     * @return success Whether or not the approval succeeded\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool success);\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return remaining The number of tokens allowed to be spent\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x5f5e2de8a10d9d9b11c1db605fc44764867e18a11ab5de205fb2cc8637500ae7\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n     * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n     * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n     **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n     * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n     */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n     * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n     */\\n    function failOpaque(\\n        Error err,\\n        FailureInfo info,\\n        uint opaqueError\\n    ) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error SetReserveGuardianOwnerCheck();\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n}\\n\",\"keccak256\":\"0x4964ec19c8bce9ca1b242c5163922ab16e1ea5667f10c6acc14741f15fbcc068\",\"license\":\"BSD-3-Clause\"},\"contracts/ExponentialNoError.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract ExponentialNoError {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale / 2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(\\n        Exp memory a,\\n        uint scalar\\n    ) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint scalar,\\n        uint addend\\n    ) internal pure returns (uint) {\\n        Exp memory product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(\\n        Exp memory left,\\n        Exp memory right\\n    ) internal pure returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) internal pure returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(\\n        uint n,\\n        string memory errorMessage\\n    ) internal pure returns (uint224) {\\n        require(n < 2 ** 224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(\\n        uint n,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(n < 2 ** 32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) internal pure returns (uint) {\\n        return a + b;\\n    }\\n\\n    function sub_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) internal pure returns (uint) {\\n        return a - b;\\n    }\\n\\n    function mul_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(\\n        Double memory a,\\n        uint b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) internal pure returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) internal pure returns (uint) {\\n        return a * b;\\n    }\\n\\n    function div_(\\n        Exp memory a,\\n        Exp memory b\\n    ) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) internal pure returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) internal pure returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        Double memory b\\n    ) internal pure returns (Double memory) {\\n        return\\n            Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(\\n        Double memory a,\\n        uint b\\n    ) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) internal pure returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) internal pure returns (uint) {\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) internal pure returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xdd2743eae171dccf2ba3dbb5f4ee0f206cac2b28901f61f7bb69218f15432e96\",\"license\":\"BSD-3-Clause\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title InterestRateModel Interface\\n */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves\\n    ) external view virtual returns (uint);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint cash,\\n        uint borrows,\\n        uint reserves,\\n        uint reserveFactorMantissa\\n    ) external view virtual returns (uint);\\n}\\n\",\"keccak256\":\"0x92e1ea65509fe62cbbc110d35d0fe2b7ce0cc6be1dde75b373ad2ffe2f37f543\",\"license\":\"BSD-3-Clause\"},\"contracts/RewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./ExponentialNoError.sol\\\";\\n\\nimport \\\"./Token/IGovSBL.sol\\\";\\nimport \\\"./Token/IMiningReferral.sol\\\";\\n\\nstruct RewardMarketState {\\n    /// @notice The supply speed for each market\\n    uint256 supplySpeed;\\n    /// @notice The supply index for each market\\n    uint224 supplyIndex;\\n    /// @notice The last block number that Reward accrued for supply\\n    uint32 supplyBlock;\\n    /// @notice The borrow speed for each market\\n    uint256 borrowSpeed;\\n    /// @notice The borrow index for each market\\n    uint224 borrowIndex;\\n    /// @notice The last block number that Reward accrued for borrow\\n    uint32 borrowBlock;\\n}\\n\\nstruct RewardAccountState {\\n    /// @notice The supply index for each market as of the last time the account accrued Reward\\n    mapping(address => uint256) supplierIndex;\\n    /// @notice The borrow index for each market as of the last time the account accrued Reward\\n    mapping(address => uint256) borrowerIndex;\\n    /// @notice Accrued Reward but not yet transferred\\n    uint256 rewardAccrued;\\n}\\n\\n/**\\n * @title Reward Distributor (version 1)\\n * @notice This contract is used to distribute rewards to users for supplying and borrowing assets.\\n * Each supply and borrow changing action from comptroller will trigger index update for each reward token.\\n */\\ncontract RewardDistributor is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ExponentialNoError\\n{\\n    event RewardAccrued(\\n        address indexed rewardToken,\\n        address indexed user,\\n        uint256 deltaAccrued,\\n        uint256 totalAccrued\\n    );\\n\\n    event RewardGranted(\\n        address indexed rewardToken,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event SupplySpeedUpdated(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        uint256 supplySpeed\\n    );\\n\\n    event BorrowSpeedUpdated(\\n        address indexed rewardToken,\\n        address indexed cToken,\\n        uint256 borrowSpeed\\n    );\\n\\n    /// @notice The initial reward index for a market\\n    uint224 public constant rewardInitialIndex = 1e36;\\n\\n    /// @notice The comptroller that rewards are distributed to\\n    address public comptroller;\\n\\n    /// @notice The Reward state for each reward token for each market\\n    mapping(address => mapping(address => RewardMarketState))\\n        public rewardMarketState;\\n\\n    /// @notice The Reward state for each reward token for each account\\n    mapping(address => mapping(address => RewardAccountState))\\n        public rewardAccountState;\\n\\n    /// @notice Added reward tokens\\n    address[] public rewardTokens;\\n    /// @notice Flag to check if reward token added before\\n    mapping(address => bool) public rewardTokenExists;\\n\\n    // update shoebill boost\\n\\n    IGovSBL public gShoebillToken;\\n    IMiningReferral public miningReferral;\\n\\n    modifier onlyComptroller() {\\n        require(\\n            msg.sender == comptroller,\\n            \\\"RewardDistributor: only comptroller can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(address comptroller_) public initializer {\\n        __Ownable_init();\\n\\n        comptroller = comptroller_;\\n    }\\n\\n    function setGShoebillToken(address _gShoebillToken) external onlyOwner {\\n        gShoebillToken = IGovSBL(_gShoebillToken);\\n    }\\n\\n    function setMiningReferral(address _miningReferral) external onlyOwner {\\n        miningReferral = IMiningReferral(_miningReferral);\\n    }\\n\\n    function _whitelistToken(address rewardToken_) public onlyOwner {\\n        require(\\n            rewardToken_ != address(0),\\n            \\\"RewardDistributor: reward token cannot be zero address\\\"\\n        );\\n        require(\\n            !rewardTokenExists[rewardToken_],\\n            \\\"RewardDistributor: reward token already exists\\\"\\n        );\\n\\n        rewardTokens.push(rewardToken_);\\n        rewardTokenExists[rewardToken_] = true;\\n    }\\n\\n    function _updateRewardSpeeds(\\n        address rewardToken_,\\n        address[] memory cTokens,\\n        uint256[] memory supplySpeeds,\\n        uint256[] memory borrowSpeeds\\n    ) public onlyOwner {\\n        require(\\n            rewardTokenExists[rewardToken_],\\n            \\\"RewardDistributor: reward token does not exist\\\"\\n        );\\n        require(\\n            cTokens.length == supplySpeeds.length,\\n            \\\"RewardDistributor: supply speed array length mismatch\\\"\\n        );\\n        require(\\n            cTokens.length == borrowSpeeds.length,\\n            \\\"RewardDistributor: borrow speed array length mismatch\\\"\\n        );\\n\\n        for (uint256 i = 0; i < cTokens.length; i++) {\\n            updateRewardSpeedInternal(\\n                rewardToken_,\\n                cTokens[i],\\n                supplySpeeds[i],\\n                borrowSpeeds[i]\\n            );\\n        }\\n    }\\n\\n    function updateRewardSpeedInternal(\\n        address rewardToken,\\n        address cToken,\\n        uint256 supplySpeed,\\n        uint256 borrowSpeed\\n    ) internal {\\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\\n            cToken\\n        ];\\n\\n        if (marketState.supplySpeed != supplySpeed) {\\n            if (marketState.supplyIndex == 0) {\\n                marketState.supplyIndex = rewardInitialIndex;\\n            }\\n\\n            notifySupplyIndexInternal(rewardToken, cToken);\\n            marketState.supplySpeed = supplySpeed;\\n            emit SupplySpeedUpdated(rewardToken, cToken, supplySpeed);\\n        }\\n\\n        if (marketState.borrowSpeed != borrowSpeed) {\\n            if (marketState.borrowIndex == 0) {\\n                marketState.borrowIndex = rewardInitialIndex;\\n            }\\n\\n            notifyBorrowIndexInternal(rewardToken, cToken);\\n            marketState.borrowSpeed = borrowSpeed;\\n            emit BorrowSpeedUpdated(rewardToken, cToken, borrowSpeed);\\n        }\\n    }\\n\\n    function notifySupplyIndex(address cToken) external onlyComptroller {\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            notifySupplyIndexInternal(rewardTokens[i], cToken);\\n        }\\n    }\\n\\n    function notifySupplyIndexInternal(\\n        address rewardToken,\\n        address cToken\\n    ) internal {\\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\\n            cToken\\n        ];\\n\\n        uint32 blockNumber = getBlockNumber();\\n\\n        if (blockNumber > marketState.supplyBlock) {\\n            if (marketState.supplySpeed > 0) {\\n                uint256 deltaBlocks = blockNumber - marketState.supplyBlock;\\n                uint256 supplyTokens = CTokenInterface(cToken).totalSupply();\\n                uint256 accrued = mul_(deltaBlocks, marketState.supplySpeed);\\n                Double memory ratio = supplyTokens > 0\\n                    ? fraction(accrued, supplyTokens)\\n                    : Double({mantissa: 0});\\n                marketState.supplyIndex = safe224(\\n                    add_(Double({mantissa: marketState.supplyIndex}), ratio)\\n                        .mantissa,\\n                    \\\"new index exceeds 224 bits\\\"\\n                );\\n            }\\n\\n            marketState.supplyBlock = blockNumber;\\n        }\\n    }\\n\\n    function notifyBorrowIndex(address cToken) external onlyComptroller {\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            notifyBorrowIndexInternal(rewardTokens[i], cToken);\\n        }\\n    }\\n\\n    function notifyBorrowIndexInternal(\\n        address rewardToken,\\n        address cToken\\n    ) internal {\\n        Exp memory marketBorrowIndex = Exp({\\n            mantissa: CTokenInterface(cToken).borrowIndex()\\n        });\\n\\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\\n            cToken\\n        ];\\n\\n        uint32 blockNumber = getBlockNumber();\\n\\n        if (blockNumber > marketState.borrowBlock) {\\n            if (marketState.borrowSpeed > 0) {\\n                uint256 deltaBlocks = blockNumber - marketState.borrowBlock;\\n                uint256 borrowAmount = div_(\\n                    CTokenInterface(cToken).totalBorrows(),\\n                    marketBorrowIndex\\n                );\\n                uint256 accrued = mul_(deltaBlocks, marketState.borrowSpeed);\\n                Double memory ratio = borrowAmount > 0\\n                    ? fraction(accrued, borrowAmount)\\n                    : Double({mantissa: 0});\\n                marketState.borrowIndex = safe224(\\n                    add_(Double({mantissa: marketState.borrowIndex}), ratio)\\n                        .mantissa,\\n                    \\\"new index exceeds 224 bits\\\"\\n                );\\n            }\\n\\n            marketState.borrowBlock = blockNumber;\\n        }\\n    }\\n\\n    function notifySupplier(\\n        address cToken,\\n        address supplier\\n    ) external onlyComptroller {\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            notifySupplierInternal(rewardTokens[i], cToken, supplier);\\n        }\\n    }\\n\\n    function notifySupplierInternal(\\n        address rewardToken,\\n        address cToken,\\n        address supplier\\n    ) internal {\\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\\n            cToken\\n        ];\\n        RewardAccountState storage accountState = rewardAccountState[\\n            rewardToken\\n        ][supplier];\\n\\n        uint256 supplyIndex = marketState.supplyIndex;\\n        uint256 supplierIndex = accountState.supplierIndex[cToken];\\n\\n        // Update supplier's index to the current index since we are distributing accrued Reward\\n        accountState.supplierIndex[cToken] = supplyIndex;\\n\\n        if (supplierIndex == 0 && supplyIndex >= rewardInitialIndex) {\\n            supplierIndex = rewardInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the Reward per cToken accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: sub_(supplyIndex, supplierIndex)\\n        });\\n\\n        uint256 supplierTokens = CTokenInterface(cToken).balanceOf(supplier);\\n\\n        // Calculate Reward accrued: cTokenAmount * accruedPerCToken\\n        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);\\n\\n        accountState.rewardAccrued = add_(\\n            accountState.rewardAccrued,\\n            supplierDelta\\n        );\\n\\n        emit RewardAccrued(\\n            rewardToken,\\n            supplier,\\n            supplierDelta,\\n            accountState.rewardAccrued\\n        );\\n    }\\n\\n    function notifyBorrower(\\n        address cToken,\\n        address borrower\\n    ) external onlyComptroller {\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            notifyBorrowerInternal(rewardTokens[i], cToken, borrower);\\n        }\\n    }\\n\\n    function notifyBorrowerInternal(\\n        address rewardToken,\\n        address cToken,\\n        address borrower\\n    ) internal {\\n        Exp memory marketBorrowIndex = Exp({\\n            mantissa: CTokenInterface(cToken).borrowIndex()\\n        });\\n\\n        RewardMarketState storage marketState = rewardMarketState[rewardToken][\\n            cToken\\n        ];\\n        RewardAccountState storage accountState = rewardAccountState[\\n            rewardToken\\n        ][borrower];\\n\\n        uint256 borrowIndex = marketState.borrowIndex;\\n        uint256 borrowerIndex = accountState.borrowerIndex[cToken];\\n\\n        // Update borrowers's index to the current index since we are distributing accrued Reward\\n        accountState.borrowerIndex[cToken] = borrowIndex;\\n\\n        if (borrowerIndex == 0 && borrowIndex >= rewardInitialIndex) {\\n            // Covers the case where users borrowed tokens before the market's borrow state index was set.\\n            // Rewards the user with Reward accrued from the start of when borrower rewards were first\\n            // set for the market.\\n            borrowerIndex = rewardInitialIndex;\\n        }\\n\\n        // Calculate change in the cumulative sum of the Reward per borrowed unit accrued\\n        Double memory deltaIndex = Double({\\n            mantissa: sub_(borrowIndex, borrowerIndex)\\n        });\\n\\n        uint256 borrowerAmount = div_(\\n            CTokenInterface(cToken).borrowBalanceStored(borrower),\\n            marketBorrowIndex\\n        );\\n\\n        // Calculate Reward accrued: cTokenAmount * accruedPerBorrowedUnit\\n        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);\\n\\n        accountState.rewardAccrued = add_(\\n            accountState.rewardAccrued,\\n            borrowerDelta\\n        );\\n\\n        emit RewardAccrued(\\n            rewardToken,\\n            borrower,\\n            borrowerDelta,\\n            accountState.rewardAccrued\\n        );\\n    }\\n\\n    function claim(address[] memory holders) public {\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            claimInternal(rewardTokens[i], holders);\\n        }\\n    }\\n\\n    function claimInternal(\\n        address rewardToken,\\n        address[] memory holders\\n    ) internal {\\n        for (uint256 j = 0; j < holders.length; j++) {\\n            RewardAccountState storage accountState = rewardAccountState[\\n                rewardToken\\n            ][holders[j]];\\n\\n            accountState.rewardAccrued = grantRewardInternal(\\n                rewardToken,\\n                holders[j],\\n                accountState.rewardAccrued\\n            );\\n        }\\n    }\\n\\n    function getBlockNumber() public view returns (uint32) {\\n        return safe32(block.timestamp, \\\"block number exceeds 32 bits\\\");\\n    }\\n\\n    function _grantReward(\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) public onlyOwner {\\n        require(\\n            rewardTokenExists[token],\\n            \\\"RewardDistributor: grant reward token does not exist\\\"\\n        );\\n        grantRewardInternal(token, user, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer Reward to the user\\n     * @dev Note: If there is not enough Reward, we do not perform the transfer all.\\n     * @param user The address of the user to transfer Reward to\\n     * @param amount The amount of Reward to (possibly) transfer\\n     * @return The amount of Reward which was NOT transferred to the user\\n     */\\n    function grantRewardInternal(\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 remaining = EIP20Interface(token).balanceOf(address(this));\\n        if (amount > 0 && amount <= remaining) {\\n            uint256 amountToSend = amount;\\n            if (address(gShoebillToken) != address(0)) {\\n                uint256 boostMultiplier = gShoebillToken.getBoostMultiplier(\\n                    user\\n                );\\n                amountToSend = (amount * boostMultiplier) / 10000;\\n            }\\n            if (address(miningReferral) != address(0)) {\\n                address referrer = miningReferral.getReferrer(user);\\n                if (referrer != address(0)) {\\n                    // 50:50 ratio for referrer and user\\n                    uint256 referralAmount = (amount *\\n                        (miningReferral.bonusRate(referrer))) / 10000;\\n                    SafeERC20.safeTransfer(\\n                        IERC20(token),\\n                        referrer,\\n                        referralAmount\\n                    );\\n                    miningReferral.recordReferralCommission(\\n                        referrer,\\n                        referralAmount\\n                    );\\n\\n                    amountToSend = amountToSend + referralAmount;\\n                }\\n            }\\n            SafeERC20.safeTransfer(IERC20(token), user, amountToSend);\\n\\n            emit RewardGranted(token, user, amountToSend);\\n\\n            return 0;\\n        }\\n        return amount;\\n    }\\n\\n    /** Getters */\\n    function getRewardTokens() public view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n}\\n\",\"keccak256\":\"0xc96de55bdefeb7ba2cbab2b2362f17856f2a95a8dcc1255a3235173d464dd6a4\",\"license\":\"BSD-3-Clause\"},\"contracts/Token/IGovSBL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface IGovSBL {\\n    function stake(address user, uint256 amount) external;\\n\\n    function getBoostMultiplier(address user) external view returns (uint256);\\n\\n    function maxBoostMultiplier() external view returns (uint256);\\n\\n    function getBalanceTierAndBoost(\\n        address user\\n    ) external view returns (uint256);\\n    function getNftBoost(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5767c30c75abf94247449a87f0973a56b85ef5ba8f772276ef2fdad6daa2ef7c\",\"license\":\"MIT\"},\"contracts/Token/IMiningReferral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.16;\\n\\ninterface IMiningReferral {\\n    function recordReferralCommission(\\n        address _referrer,\\n        uint256 _commission\\n    ) external;\\n\\n    function getReferrer(address _user) external view returns (address);\\n\\n    function baseRate() external view returns (uint256);\\n\\n    function bonusRate(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe514c21d1223c3df55adc8b3bff66945a793f3b554de6f79ea21c637492337c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063c4d66de81161007c578063c4d66de8146103c3578063c4f59f9b146103d6578063e86b2fbe146103eb578063eb8f2806146103fe578063f2fde38b14610411578063f49dc6b61461042457600080fd5b8063715018a6146103355780637bb7bed11461033d578063831e8dec146103505780638da5cb5b1461038c5780638daa0acb1461039d578063b054347c146103b057600080fd5b806342cbb15c1161011557806342cbb15c1461029f57806345a49d3c146102bc57806357636069146102cf5780635ce65fe9146102e25780635fe3b567146102f557806366f91a241461030857600080fd5b806317b7fd9d1461015d57806321f1d8fd1461018d578063246467e8146101a25780632e4a5d60146101b5578063318d9e5d146101e857806332894a6d146101fb575b600080fd5b606a54610170906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a061019b366004611f29565b610437565b005b6101a06101b0366004611f46565b610461565b6101d86101c3366004611f29565b60696020526000908152604090205460ff1681565b6040519015158152602001610184565b6101a06101f6366004612066565b610504565b61025e61020936600461209b565b6066602090815260009283526040808420909152908252902080546001820154600283015460039093015491926001600160e01b038083169363ffffffff600160e01b94859004811694928216929091041686565b604080519687526001600160e01b03958616602088015263ffffffff94851690870152606086019290925290921660808401521660a082015260c001610184565b6102a7610558565b60405163ffffffff9091168152602001610184565b6101a06102ca36600461209b565b61059e565b6101a06102dd366004611f29565b61061e565b6101a06102f0366004611f29565b610648565b606554610170906001600160a01b031681565b61031d6a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b039091168152602001610184565b6101a06106c2565b61017061034b3660046120d4565b6106d6565b61037e61035e36600461209b565b606760209081526000928352604080842090915290825290206002015481565b604051908152602001610184565b6033546001600160a01b0316610170565b6101a06103ab366004611f29565b610700565b606b54610170906001600160a01b031681565b6101a06103d1366004611f29565b610864565b6103de610990565b60405161018491906120ed565b6101a06103f9366004611f29565b6109f2565b6101a061040c36600461209b565b610a6c565b6101a061041f366004611f29565b610ae7565b6101a0610432366004612195565b610b60565b61043f610d41565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b610469610d41565b6001600160a01b03831660009081526069602052604090205460ff166104f35760405162461bcd60e51b815260206004820152603460248201527f5265776172644469737472696275746f723a206772616e7420726577617264206044820152731d1bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60648201526084015b60405180910390fd5b6104fe838383610d9b565b50505050565b60005b606854811015610554576105426068828154811061052757610527612230565b6000918252602090912001546001600160a01b0316836110cb565b8061054c8161225c565b915050610507565b5050565b6000610599426040518060400160405280601c81526020017f626c6f636b206e756d626572206578636565647320333220626974730000000081525061116f565b905090565b6065546001600160a01b031633146105c85760405162461bcd60e51b81526004016104ea90612275565b60005b60685481101561061957610607606882815481106105eb576105eb612230565b6000918252602090912001546001600160a01b031684846111a2565b806106118161225c565b9150506105cb565b505050565b610626610d41565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146106725760405162461bcd60e51b81526004016104ea90612275565b60005b606854811015610554576106b06068828154811061069557610695612230565b6000918252602090912001546001600160a01b03168361133a565b806106ba8161225c565b915050610675565b6106ca610d41565b6106d4600061158c565b565b606881815481106106e657600080fd5b6000918252602090912001546001600160a01b0316905081565b610708610d41565b6001600160a01b03811661077d5760405162461bcd60e51b815260206004820152603660248201527f5265776172644469737472696275746f723a2072657761726420746f6b656e2060448201527563616e6e6f74206265207a65726f206164647265737360501b60648201526084016104ea565b6001600160a01b03811660009081526069602052604090205460ff16156107fd5760405162461bcd60e51b815260206004820152602e60248201527f5265776172644469737472696275746f723a2072657761726420746f6b656e2060448201526d616c72656164792065786973747360901b60648201526084016104ea565b6068805460018181019092557fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180546001600160a01b039093166001600160a01b031990931683179055600091825260696020526040909120805460ff19169091179055565b600054610100900460ff16158080156108845750600054600160ff909116105b8061089e5750303b15801561089e575060005460ff166001145b6109015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ea565b6000805460ff191660011790558015610924576000805461ff0019166101001790555b61092c6115de565b606580546001600160a01b0319166001600160a01b0384161790558015610554576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606060688054806020026020016040519081016040528092919081815260200182805480156109e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ca575b5050505050905090565b6065546001600160a01b03163314610a1c5760405162461bcd60e51b81526004016104ea90612275565b60005b60685481101561055457610a5a60688281548110610a3f57610a3f612230565b6000918252602090912001546001600160a01b03168361160d565b80610a648161225c565b915050610a1f565b6065546001600160a01b03163314610a965760405162461bcd60e51b81526004016104ea90612275565b60005b60685481101561061957610ad560688281548110610ab957610ab9612230565b6000918252602090912001546001600160a01b031684846117a5565b80610adf8161225c565b915050610a99565b610aef610d41565b6001600160a01b038116610b545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ea565b610b5d8161158c565b50565b610b68610d41565b6001600160a01b03841660009081526069602052604090205460ff16610be75760405162461bcd60e51b815260206004820152602e60248201527f5265776172644469737472696275746f723a2072657761726420746f6b656e2060448201526d191bd95cc81b9bdd08195e1a5cdd60921b60648201526084016104ea565b8151835114610c565760405162461bcd60e51b815260206004820152603560248201527f5265776172644469737472696275746f723a20737570706c79207370656564206044820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60648201526084016104ea565b8051835114610cc55760405162461bcd60e51b815260206004820152603560248201527f5265776172644469737472696275746f723a20626f72726f77207370656564206044820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60648201526084016104ea565b60005b8351811015610d3a57610d2885858381518110610ce757610ce7612230565b6020026020010151858481518110610d0157610d01612230565b6020026020010151858581518110610d1b57610d1b612230565b60200260200101516119bf565b80610d328161225c565b915050610cc8565b5050505050565b6033546001600160a01b031633146106d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ea565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906122d2565b9050600083118015610e1a5750808311155b156110bf57606a5483906001600160a01b031615610ebe57606a5460405163379b8f7f60e11b81526001600160a01b0387811660048301526000921690636f371efe90602401602060405180830381865afa158015610e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea191906122d2565b9050612710610eb082876122eb565b610eba919061230a565b9150505b606b546001600160a01b03161561105c57606b54604051634a9fefc760e01b81526001600160a01b0387811660048301526000921690634a9fefc790602401602060405180830381865afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e919061232c565b90506001600160a01b0381161561105a57606b5460405163fc1012e160e01b81526001600160a01b0383811660048301526000926127109291169063fc1012e190602401602060405180830381865afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc391906122d2565b610fcd90886122eb565b610fd7919061230a565b9050610fe4888383611b1f565b606b54604051631b82d29760e31b81526001600160a01b038481166004830152602482018490529091169063dc1694b890604401600060405180830381600087803b15801561103257600080fd5b505af1158015611046573d6000803e3d6000fd5b5050505080836110569190612349565b9250505b505b611067868683611b1f565b846001600160a01b0316866001600160a01b03167f6123969dd9705ebe9fca0229b85009158c92cae456c32d917d8d435748f3abd3836040516110ac91815260200190565b60405180910390a36000925050506110c4565b829150505b9392505050565b60005b8151811015610619576001600160a01b03831660009081526067602052604081208351829085908590811061110557611105612230565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506111578484848151811061114557611145612230565b60200260200101518360020154610d9b565b600290910155806111678161225c565b9150506110ce565b60008164010000000084106111975760405162461bcd60e51b81526004016104ea9190612380565b508290505b92915050565b6001600160a01b03808416600081815260666020908152604080832087861680855290835281842094845260678352818420958716845294825280832060018501549584529182905290912080546001600160e01b039094169081905591929091908015801561122057506a0c097ce7bc90715b34b9f160241b8210155b1561123657506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061124d8585611b71565b90526040516370a0823160e01b81526001600160a01b0388811660048301529192506000918916906370a0823190602401602060405180830381865afa15801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf91906122d2565b905060006112cd8284611b7d565b90506112dd866002015482611ba6565b600287018190556040805183815260208101929092526001600160a01b038a811692908d16917ffd07974d3aaf62e9d6f1492b77eba5e72f99d8367e456eaf203de8491d42c999910160405180910390a350505050505050505050565b60006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a991906122d2565b90526001600160a01b03808516600090815260666020908152604080832093871683529290529081209192506113dd610558565b600383015490915063ffffffff600160e01b90910481169082161115610d3a5760028201541561156457600382015460009061142690600160e01b900463ffffffff16836123b3565b63ffffffff169050600061149b866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149591906122d2565b86611bb2565b905060006114ad838660020154611bd0565b905060008083116114cd57604051806020016040528060008152506114d7565b6114d78284611bdc565b604080516020810190915260038801546001600160e01b0316815290915061153d906115039083611c20565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152611c4c565b6003870180546001600160e01b0319166001600160e01b0392909216919091179055505050505b60038201805463ffffffff8316600160e01b026001600160e01b039091161790555050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166116055760405162461bcd60e51b81526004016104ea906123d7565b6106d4611c73565b6001600160a01b03808316600090815260666020908152604080832093851683529290529081209061163d610558565b600183015490915063ffffffff600160e01b909104811690821611156104fe5781541561177e57600182015460009061168390600160e01b900463ffffffff16836123b3565b63ffffffff1690506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef91906122d2565b90506000611701838660000154611bd0565b90506000808311611721576040518060200160405280600081525061172b565b61172b8284611bdc565b604080516020810190915260018801546001600160e01b03168152909150611757906115039083611c20565b6001870180546001600160e01b0319166001600160e01b0392909216919091179055505050505b60018201805463ffffffff8316600160e01b026001600160e01b0390911617905550505050565b60006040518060200160405280846001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181491906122d2565b90526001600160a01b03808616600081815260666020908152604080832089861680855290835281842094845260678352818420958916845294825280832060038501549584526001810190925290912080546001600160e01b0390941690819055939450909290918015801561189957506a0c097ce7bc90715b34b9f160241b8210155b156118af57506a0c097ce7bc90715b34b9f160241b5b600060405180602001604052806118c68585611b71565b90526040516395dd919360e01b81526001600160a01b03898116600483015291925060009161194391908b16906395dd919390602401602060405180830381865afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d91906122d2565b88611bb2565b905060006119518284611b7d565b9050611961866002015482611ba6565b600287018190556040805183815260208101929092526001600160a01b038b811692908e16917ffd07974d3aaf62e9d6f1492b77eba5e72f99d8367e456eaf203de8491d42c999910160405180910390a35050505050505050505050565b6001600160a01b03808516600090815260666020908152604080832093871683529290522080548314611a755760018101546001600160e01b0316600003611a24576001810180546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1790555b611a2e858561160d565b8281556040518381526001600160a01b0385811691908716907f61918eb908e35e96d460dc030b7c4f6448ac64f1383759571b9c7cab50efd0469060200160405180910390a35b81816002015414610d3a5760038101546001600160e01b0316600003611ab8576003810180546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1790555b611ac2858561133a565b818160020181905550836001600160a01b0316856001600160a01b03167f13b9c4bac6e50afba9701545614343a5e29bc815d483928198270e878c42eaf984604051611b1091815260200190565b60405180910390a35050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610619908490611ca3565b60006110c48284612422565b60006a0c097ce7bc90715b34b9f160241b611b9c848460000151611bd0565b6110c4919061230a565b60006110c48284612349565b60006110c4611bc984670de0b6b3a7640000611bd0565b8351611d78565b60006110c482846122eb565b6040805160208101909152600081526040518060200160405280611c17611c11866a0c097ce7bc90715b34b9f160241b611bd0565b85611d78565b90529392505050565b6040805160208101909152600081526040518060200160405280611c1785600001518560000151611ba6565b600081600160e01b84106111975760405162461bcd60e51b81526004016104ea9190612380565b600054610100900460ff16611c9a5760405162461bcd60e51b81526004016104ea906123d7565b6106d43361158c565b6000611cf8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d849092919063ffffffff16565b9050805160001480611d19575080806020019051810190611d199190612435565b6106195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ea565b60006110c4828461230a565b6060611d938484600085611d9b565b949350505050565b606082471015611dfc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ea565b600080866001600160a01b03168587604051611e189190612457565b60006040518083038185875af1925050503d8060008114611e55576040519150601f19603f3d011682016040523d82523d6000602084013e611e5a565b606091505b5091509150611e6b87838387611e76565b979650505050505050565b60608315611ee5578251600003611ede576001600160a01b0385163b611ede5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ea565b5081611d93565b611d938383815115611efa5781518083602001fd5b8060405162461bcd60e51b81526004016104ea9190612380565b6001600160a01b0381168114610b5d57600080fd5b600060208284031215611f3b57600080fd5b81356110c481611f14565b600080600060608486031215611f5b57600080fd5b8335611f6681611f14565b92506020840135611f7681611f14565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fc657611fc6611f87565b604052919050565b600067ffffffffffffffff821115611fe857611fe8611f87565b5060051b60200190565b600082601f83011261200357600080fd5b8135602061201861201383611fce565b611f9d565b82815260059290921b8401810191818101908684111561203757600080fd5b8286015b8481101561205b57803561204e81611f14565b835291830191830161203b565b509695505050505050565b60006020828403121561207857600080fd5b813567ffffffffffffffff81111561208f57600080fd5b611d9384828501611ff2565b600080604083850312156120ae57600080fd5b82356120b981611f14565b915060208301356120c981611f14565b809150509250929050565b6000602082840312156120e657600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561212e5783516001600160a01b031683529284019291840191600101612109565b50909695505050505050565b600082601f83011261214b57600080fd5b8135602061215b61201383611fce565b82815260059290921b8401810191818101908684111561217a57600080fd5b8286015b8481101561205b578035835291830191830161217e565b600080600080608085870312156121ab57600080fd5b84356121b681611f14565b9350602085013567ffffffffffffffff808211156121d357600080fd5b6121df88838901611ff2565b945060408701359150808211156121f557600080fd5b6122018883890161213a565b9350606087013591508082111561221757600080fd5b506122248782880161213a565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161226e5761226e612246565b5060010190565b6020808252603a908201527f5265776172644469737472696275746f723a206f6e6c7920636f6d7074726f6c60408201527f6c65722063616e2063616c6c20746869732066756e6374696f6e000000000000606082015260800190565b6000602082840312156122e457600080fd5b5051919050565b600081600019048311821515161561230557612305612246565b500290565b60008261232757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561233e57600080fd5b81516110c481611f14565b8082018082111561119c5761119c612246565b60005b8381101561237757818101518382015260200161235f565b50506000910152565b602081526000825180602084015261239f81604085016020870161235c565b601f01601f19169190910160400192915050565b63ffffffff8281168282160390808211156123d0576123d0612246565b5092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8181038181111561119c5761119c612246565b60006020828403121561244757600080fd5b815180151581146110c457600080fd5b6000825161246981846020870161235c565b919091019291505056fea26469706673582212202856ed272ec32d1cb77f2e5bcd6c7a1d132c50fde1ca39dba4e76c80b6ebe98164736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063715018a6116100c3578063c4d66de81161007c578063c4d66de8146103c3578063c4f59f9b146103d6578063e86b2fbe146103eb578063eb8f2806146103fe578063f2fde38b14610411578063f49dc6b61461042457600080fd5b8063715018a6146103355780637bb7bed11461033d578063831e8dec146103505780638da5cb5b1461038c5780638daa0acb1461039d578063b054347c146103b057600080fd5b806342cbb15c1161011557806342cbb15c1461029f57806345a49d3c146102bc57806357636069146102cf5780635ce65fe9146102e25780635fe3b567146102f557806366f91a241461030857600080fd5b806317b7fd9d1461015d57806321f1d8fd1461018d578063246467e8146101a25780632e4a5d60146101b5578063318d9e5d146101e857806332894a6d146101fb575b600080fd5b606a54610170906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a061019b366004611f29565b610437565b005b6101a06101b0366004611f46565b610461565b6101d86101c3366004611f29565b60696020526000908152604090205460ff1681565b6040519015158152602001610184565b6101a06101f6366004612066565b610504565b61025e61020936600461209b565b6066602090815260009283526040808420909152908252902080546001820154600283015460039093015491926001600160e01b038083169363ffffffff600160e01b94859004811694928216929091041686565b604080519687526001600160e01b03958616602088015263ffffffff94851690870152606086019290925290921660808401521660a082015260c001610184565b6102a7610558565b60405163ffffffff9091168152602001610184565b6101a06102ca36600461209b565b61059e565b6101a06102dd366004611f29565b61061e565b6101a06102f0366004611f29565b610648565b606554610170906001600160a01b031681565b61031d6a0c097ce7bc90715b34b9f160241b81565b6040516001600160e01b039091168152602001610184565b6101a06106c2565b61017061034b3660046120d4565b6106d6565b61037e61035e36600461209b565b606760209081526000928352604080842090915290825290206002015481565b604051908152602001610184565b6033546001600160a01b0316610170565b6101a06103ab366004611f29565b610700565b606b54610170906001600160a01b031681565b6101a06103d1366004611f29565b610864565b6103de610990565b60405161018491906120ed565b6101a06103f9366004611f29565b6109f2565b6101a061040c36600461209b565b610a6c565b6101a061041f366004611f29565b610ae7565b6101a0610432366004612195565b610b60565b61043f610d41565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b610469610d41565b6001600160a01b03831660009081526069602052604090205460ff166104f35760405162461bcd60e51b815260206004820152603460248201527f5265776172644469737472696275746f723a206772616e7420726577617264206044820152731d1bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b60648201526084015b60405180910390fd5b6104fe838383610d9b565b50505050565b60005b606854811015610554576105426068828154811061052757610527612230565b6000918252602090912001546001600160a01b0316836110cb565b8061054c8161225c565b915050610507565b5050565b6000610599426040518060400160405280601c81526020017f626c6f636b206e756d626572206578636565647320333220626974730000000081525061116f565b905090565b6065546001600160a01b031633146105c85760405162461bcd60e51b81526004016104ea90612275565b60005b60685481101561061957610607606882815481106105eb576105eb612230565b6000918252602090912001546001600160a01b031684846111a2565b806106118161225c565b9150506105cb565b505050565b610626610d41565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b6065546001600160a01b031633146106725760405162461bcd60e51b81526004016104ea90612275565b60005b606854811015610554576106b06068828154811061069557610695612230565b6000918252602090912001546001600160a01b03168361133a565b806106ba8161225c565b915050610675565b6106ca610d41565b6106d4600061158c565b565b606881815481106106e657600080fd5b6000918252602090912001546001600160a01b0316905081565b610708610d41565b6001600160a01b03811661077d5760405162461bcd60e51b815260206004820152603660248201527f5265776172644469737472696275746f723a2072657761726420746f6b656e2060448201527563616e6e6f74206265207a65726f206164647265737360501b60648201526084016104ea565b6001600160a01b03811660009081526069602052604090205460ff16156107fd5760405162461bcd60e51b815260206004820152602e60248201527f5265776172644469737472696275746f723a2072657761726420746f6b656e2060448201526d616c72656164792065786973747360901b60648201526084016104ea565b6068805460018181019092557fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180546001600160a01b039093166001600160a01b031990931683179055600091825260696020526040909120805460ff19169091179055565b600054610100900460ff16158080156108845750600054600160ff909116105b8061089e5750303b15801561089e575060005460ff166001145b6109015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ea565b6000805460ff191660011790558015610924576000805461ff0019166101001790555b61092c6115de565b606580546001600160a01b0319166001600160a01b0384161790558015610554576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606060688054806020026020016040519081016040528092919081815260200182805480156109e857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ca575b5050505050905090565b6065546001600160a01b03163314610a1c5760405162461bcd60e51b81526004016104ea90612275565b60005b60685481101561055457610a5a60688281548110610a3f57610a3f612230565b6000918252602090912001546001600160a01b03168361160d565b80610a648161225c565b915050610a1f565b6065546001600160a01b03163314610a965760405162461bcd60e51b81526004016104ea90612275565b60005b60685481101561061957610ad560688281548110610ab957610ab9612230565b6000918252602090912001546001600160a01b031684846117a5565b80610adf8161225c565b915050610a99565b610aef610d41565b6001600160a01b038116610b545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ea565b610b5d8161158c565b50565b610b68610d41565b6001600160a01b03841660009081526069602052604090205460ff16610be75760405162461bcd60e51b815260206004820152602e60248201527f5265776172644469737472696275746f723a2072657761726420746f6b656e2060448201526d191bd95cc81b9bdd08195e1a5cdd60921b60648201526084016104ea565b8151835114610c565760405162461bcd60e51b815260206004820152603560248201527f5265776172644469737472696275746f723a20737570706c79207370656564206044820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60648201526084016104ea565b8051835114610cc55760405162461bcd60e51b815260206004820152603560248201527f5265776172644469737472696275746f723a20626f72726f77207370656564206044820152740c2e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60648201526084016104ea565b60005b8351811015610d3a57610d2885858381518110610ce757610ce7612230565b6020026020010151858481518110610d0157610d01612230565b6020026020010151858581518110610d1b57610d1b612230565b60200260200101516119bf565b80610d328161225c565b915050610cc8565b5050505050565b6033546001600160a01b031633146106d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ea565b6040516370a0823160e01b815230600482015260009081906001600160a01b038616906370a0823190602401602060405180830381865afa158015610de4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0891906122d2565b9050600083118015610e1a5750808311155b156110bf57606a5483906001600160a01b031615610ebe57606a5460405163379b8f7f60e11b81526001600160a01b0387811660048301526000921690636f371efe90602401602060405180830381865afa158015610e7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea191906122d2565b9050612710610eb082876122eb565b610eba919061230a565b9150505b606b546001600160a01b03161561105c57606b54604051634a9fefc760e01b81526001600160a01b0387811660048301526000921690634a9fefc790602401602060405180830381865afa158015610f1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3e919061232c565b90506001600160a01b0381161561105a57606b5460405163fc1012e160e01b81526001600160a01b0383811660048301526000926127109291169063fc1012e190602401602060405180830381865afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc391906122d2565b610fcd90886122eb565b610fd7919061230a565b9050610fe4888383611b1f565b606b54604051631b82d29760e31b81526001600160a01b038481166004830152602482018490529091169063dc1694b890604401600060405180830381600087803b15801561103257600080fd5b505af1158015611046573d6000803e3d6000fd5b5050505080836110569190612349565b9250505b505b611067868683611b1f565b846001600160a01b0316866001600160a01b03167f6123969dd9705ebe9fca0229b85009158c92cae456c32d917d8d435748f3abd3836040516110ac91815260200190565b60405180910390a36000925050506110c4565b829150505b9392505050565b60005b8151811015610619576001600160a01b03831660009081526067602052604081208351829085908590811061110557611105612230565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090506111578484848151811061114557611145612230565b60200260200101518360020154610d9b565b600290910155806111678161225c565b9150506110ce565b60008164010000000084106111975760405162461bcd60e51b81526004016104ea9190612380565b508290505b92915050565b6001600160a01b03808416600081815260666020908152604080832087861680855290835281842094845260678352818420958716845294825280832060018501549584529182905290912080546001600160e01b039094169081905591929091908015801561122057506a0c097ce7bc90715b34b9f160241b8210155b1561123657506a0c097ce7bc90715b34b9f160241b5b6000604051806020016040528061124d8585611b71565b90526040516370a0823160e01b81526001600160a01b0388811660048301529192506000918916906370a0823190602401602060405180830381865afa15801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf91906122d2565b905060006112cd8284611b7d565b90506112dd866002015482611ba6565b600287018190556040805183815260208101929092526001600160a01b038a811692908d16917ffd07974d3aaf62e9d6f1492b77eba5e72f99d8367e456eaf203de8491d42c999910160405180910390a350505050505050505050565b60006040518060200160405280836001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a991906122d2565b90526001600160a01b03808516600090815260666020908152604080832093871683529290529081209192506113dd610558565b600383015490915063ffffffff600160e01b90910481169082161115610d3a5760028201541561156457600382015460009061142690600160e01b900463ffffffff16836123b3565b63ffffffff169050600061149b866001600160a01b03166347bd37186040518163ffffffff1660e01b8152600401602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149591906122d2565b86611bb2565b905060006114ad838660020154611bd0565b905060008083116114cd57604051806020016040528060008152506114d7565b6114d78284611bdc565b604080516020810190915260038801546001600160e01b0316815290915061153d906115039083611c20565b5160408051808201909152601a81527f6e657720696e64657820657863656564732032323420626974730000000000006020820152611c4c565b6003870180546001600160e01b0319166001600160e01b0392909216919091179055505050505b60038201805463ffffffff8316600160e01b026001600160e01b039091161790555050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166116055760405162461bcd60e51b81526004016104ea906123d7565b6106d4611c73565b6001600160a01b03808316600090815260666020908152604080832093851683529290529081209061163d610558565b600183015490915063ffffffff600160e01b909104811690821611156104fe5781541561177e57600182015460009061168390600160e01b900463ffffffff16836123b3565b63ffffffff1690506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ef91906122d2565b90506000611701838660000154611bd0565b90506000808311611721576040518060200160405280600081525061172b565b61172b8284611bdc565b604080516020810190915260018801546001600160e01b03168152909150611757906115039083611c20565b6001870180546001600160e01b0319166001600160e01b0392909216919091179055505050505b60018201805463ffffffff8316600160e01b026001600160e01b0390911617905550505050565b60006040518060200160405280846001600160a01b031663aa5af0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181491906122d2565b90526001600160a01b03808616600081815260666020908152604080832089861680855290835281842094845260678352818420958916845294825280832060038501549584526001810190925290912080546001600160e01b0390941690819055939450909290918015801561189957506a0c097ce7bc90715b34b9f160241b8210155b156118af57506a0c097ce7bc90715b34b9f160241b5b600060405180602001604052806118c68585611b71565b90526040516395dd919360e01b81526001600160a01b03898116600483015291925060009161194391908b16906395dd919390602401602060405180830381865afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d91906122d2565b88611bb2565b905060006119518284611b7d565b9050611961866002015482611ba6565b600287018190556040805183815260208101929092526001600160a01b038b811692908e16917ffd07974d3aaf62e9d6f1492b77eba5e72f99d8367e456eaf203de8491d42c999910160405180910390a35050505050505050505050565b6001600160a01b03808516600090815260666020908152604080832093871683529290522080548314611a755760018101546001600160e01b0316600003611a24576001810180546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1790555b611a2e858561160d565b8281556040518381526001600160a01b0385811691908716907f61918eb908e35e96d460dc030b7c4f6448ac64f1383759571b9c7cab50efd0469060200160405180910390a35b81816002015414610d3a5760038101546001600160e01b0316600003611ab8576003810180546001600160e01b0319166a0c097ce7bc90715b34b9f160241b1790555b611ac2858561133a565b818160020181905550836001600160a01b0316856001600160a01b03167f13b9c4bac6e50afba9701545614343a5e29bc815d483928198270e878c42eaf984604051611b1091815260200190565b60405180910390a35050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610619908490611ca3565b60006110c48284612422565b60006a0c097ce7bc90715b34b9f160241b611b9c848460000151611bd0565b6110c4919061230a565b60006110c48284612349565b60006110c4611bc984670de0b6b3a7640000611bd0565b8351611d78565b60006110c482846122eb565b6040805160208101909152600081526040518060200160405280611c17611c11866a0c097ce7bc90715b34b9f160241b611bd0565b85611d78565b90529392505050565b6040805160208101909152600081526040518060200160405280611c1785600001518560000151611ba6565b600081600160e01b84106111975760405162461bcd60e51b81526004016104ea9190612380565b600054610100900460ff16611c9a5760405162461bcd60e51b81526004016104ea906123d7565b6106d43361158c565b6000611cf8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d849092919063ffffffff16565b9050805160001480611d19575080806020019051810190611d199190612435565b6106195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ea565b60006110c4828461230a565b6060611d938484600085611d9b565b949350505050565b606082471015611dfc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ea565b600080866001600160a01b03168587604051611e189190612457565b60006040518083038185875af1925050503d8060008114611e55576040519150601f19603f3d011682016040523d82523d6000602084013e611e5a565b606091505b5091509150611e6b87838387611e76565b979650505050505050565b60608315611ee5578251600003611ede576001600160a01b0385163b611ede5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ea565b5081611d93565b611d938383815115611efa5781518083602001fd5b8060405162461bcd60e51b81526004016104ea9190612380565b6001600160a01b0381168114610b5d57600080fd5b600060208284031215611f3b57600080fd5b81356110c481611f14565b600080600060608486031215611f5b57600080fd5b8335611f6681611f14565b92506020840135611f7681611f14565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fc657611fc6611f87565b604052919050565b600067ffffffffffffffff821115611fe857611fe8611f87565b5060051b60200190565b600082601f83011261200357600080fd5b8135602061201861201383611fce565b611f9d565b82815260059290921b8401810191818101908684111561203757600080fd5b8286015b8481101561205b57803561204e81611f14565b835291830191830161203b565b509695505050505050565b60006020828403121561207857600080fd5b813567ffffffffffffffff81111561208f57600080fd5b611d9384828501611ff2565b600080604083850312156120ae57600080fd5b82356120b981611f14565b915060208301356120c981611f14565b809150509250929050565b6000602082840312156120e657600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561212e5783516001600160a01b031683529284019291840191600101612109565b50909695505050505050565b600082601f83011261214b57600080fd5b8135602061215b61201383611fce565b82815260059290921b8401810191818101908684111561217a57600080fd5b8286015b8481101561205b578035835291830191830161217e565b600080600080608085870312156121ab57600080fd5b84356121b681611f14565b9350602085013567ffffffffffffffff808211156121d357600080fd5b6121df88838901611ff2565b945060408701359150808211156121f557600080fd5b6122018883890161213a565b9350606087013591508082111561221757600080fd5b506122248782880161213a565b91505092959194509250565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161226e5761226e612246565b5060010190565b6020808252603a908201527f5265776172644469737472696275746f723a206f6e6c7920636f6d7074726f6c60408201527f6c65722063616e2063616c6c20746869732066756e6374696f6e000000000000606082015260800190565b6000602082840312156122e457600080fd5b5051919050565b600081600019048311821515161561230557612305612246565b500290565b60008261232757634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561233e57600080fd5b81516110c481611f14565b8082018082111561119c5761119c612246565b60005b8381101561237757818101518382015260200161235f565b50506000910152565b602081526000825180602084015261239f81604085016020870161235c565b601f01601f19169190910160400192915050565b63ffffffff8281168282160390808211156123d0576123d0612246565b5092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8181038181111561119c5761119c612246565b60006020828403121561244757600080fd5b815180151581146110c457600080fd5b6000825161246981846020870161235c565b919091019291505056fea26469706673582212202856ed272ec32d1cb77f2e5bcd6c7a1d132c50fde1ca39dba4e76c80b6ebe98164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Reward Distributor (version 1)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "comptroller()": {
        "notice": "The comptroller that rewards are distributed to"
      },
      "getRewardTokens()": {
        "notice": "Getters "
      },
      "rewardAccountState(address,address)": {
        "notice": "The Reward state for each reward token for each account"
      },
      "rewardInitialIndex()": {
        "notice": "The initial reward index for a market"
      },
      "rewardMarketState(address,address)": {
        "notice": "The Reward state for each reward token for each market"
      },
      "rewardTokenExists(address)": {
        "notice": "Flag to check if reward token added before"
      },
      "rewardTokens(uint256)": {
        "notice": "Added reward tokens"
      }
    },
    "notice": "This contract is used to distribute rewards to users for supplying and borrowing assets. Each supply and borrow changing action from comptroller will trigger index update for each reward token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1470,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 23822,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "comptroller",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 23830,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardMarketState",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardMarketState)23760_storage))"
      },
      {
        "astId": 23838,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardAccountState",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RewardAccountState)23774_storage))"
      },
      {
        "astId": 23842,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23847,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "rewardTokenExists",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23850,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "gShoebillToken",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IGovSBL)35523"
      },
      {
        "astId": 23853,
        "contract": "contracts/RewardDistributor.sol:RewardDistributor",
        "label": "miningReferral",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IMiningReferral)35552"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGovSBL)35523": {
        "encoding": "inplace",
        "label": "contract IGovSBL",
        "numberOfBytes": "20"
      },
      "t_contract(IMiningReferral)35552": {
        "encoding": "inplace",
        "label": "contract IMiningReferral",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RewardAccountState)23774_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RewardAccountState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RewardAccountState)23774_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RewardMarketState)23760_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RewardMarketState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RewardMarketState)23760_storage)"
      },
      "t_mapping(t_address,t_struct(RewardAccountState)23774_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardAccountState)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardAccountState)23774_storage"
      },
      "t_mapping(t_address,t_struct(RewardMarketState)23760_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardMarketState)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardMarketState)23760_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardAccountState)23774_storage": {
        "encoding": "inplace",
        "label": "struct RewardAccountState",
        "members": [
          {
            "astId": 23765,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "supplierIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23770,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "borrowerIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 23773,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "rewardAccrued",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardMarketState)23760_storage": {
        "encoding": "inplace",
        "label": "struct RewardMarketState",
        "members": [
          {
            "astId": 23744,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "supplySpeed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23747,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "supplyIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint224"
          },
          {
            "astId": 23750,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "supplyBlock",
            "offset": 28,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 23753,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "borrowSpeed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23756,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "borrowIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint224"
          },
          {
            "astId": 23759,
            "contract": "contracts/RewardDistributor.sol:RewardDistributor",
            "label": "borrowBlock",
            "offset": 28,
            "slot": "3",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}